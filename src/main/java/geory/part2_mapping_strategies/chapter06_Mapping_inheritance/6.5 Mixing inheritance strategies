6.5 Mixing inheritance strategies

Kết hợp các chiến lược kế thừa
Bạn có thể ánh xạ toàn bộ cấu trúc kế thừa với chiến lược TABLE_PER_CLASS, SINGLE_TABLE hoặc JOINED.
Bạn không thể kết hợp chúng - ví dụ, để chuyển từ một cấu trúc table-per-class với một discriminator sang chiến lược
table-per-subclass chuẩn hóa. Một khi bạn đã đưa ra quyết định cho chiến lược kế thừa, bạn phải tuân theo nó.
Tuy nhiên, điều này không hoàn toàn đúng. Bằng cách sử dụng một số thủ thuật, bạn có thể chuyển đổi chiến lược ánh xạ
cho một subclass cụ thể. Ví dụ, bạn có thể ánh xạ một hệ thống lớp vào một bảng duy nhất, nhưng đối với một subclass
cụ thể, bạn có thể chuyển sang một bảng riêng biệt với chiến lược ánh xạ bằng khóa ngoại, giống như table-per-subclass.

Hãy xem bản mô tả trong hình 6.4.
Hãy ánh xạ superclass BillingDetails với InheritanceType.SINGLE_TABLE, như bạn đã làm trước đây. Bây giờ hãy ánh xạ
subclass mà bạn muốn tách ra khỏi bảng duy nhất thành một bảng phụ.

Listing 6.11 Mapping CreditCard
PATH: /model/src/main/java/org/jpwh/model/inheritance/mixed/CreditCard.java

@Entity
@DiscriminatorValue("CC")
@SecondaryTable(
    name = "CREDITCARD",
    pkJoinColumns = @PrimaryKeyJoinColumn(name = "CREDITCARD_ID")
)
public class CreditCard extends BillingDetails {
    @NotNull
    @Column(table = "CREDITCARD", nullable = false)
    protected String cardNumber;

    @Column(table = "CREDITCARD", nullable = false)
    protected String expMonth;

    @Column(table = "CREDITCARD", nullable = false)
    protected String expYear;
    // ...
}

Các chú thích @SecondaryTable và @Column nhóm một số thuộc tính lại và cho Hibernate biết lấy chúng từ một bảng phụ.
Bạn ánh xạ tất cả các thuộc tính đã di chuyển vào bảng phụ với tên của bảng phụ đó. Điều này được thực hiện bằng tham số
table của @Column, mà chúng ta chưa từng hiển thị trước đây.

Ánh xạ này có nhiều ứng dụng, và bạn sẽ thấy nó lại sau trong cuốn sách này. Trong ví dụ này, nó tách các thuộc tính
CreditCard ra khỏi chiến lược SINGLE_TABLE thành bảng CREDITCARD.

Cột CREDITCARD_ID của bảng này cùng lúc là khóa chính và có ràng buộc khóa ngoại tham chiếu đến ID của SINGLE_TABLE.
Nếu bạn không chỉ định cột kết nối khóa chính cho bảng phụ, tên của khóa chính của SINGLE_TABLE sẽ được sử dụng -
trong trường hợp này là ID.

Hãy nhớ rằng InheritanceType.SINGLE_TABLE bắt buộc tất cả các cột của các subclass phải có thể là null.
Một trong những lợi ích của ánh xạ này là bạn có thể khai báo các cột của bảng CREDITCARD là NOT NULL, đảm bảo tính
toàn vẹn dữ liệu.

Tại runtime, Hibernate thực hiện một outer join để truy xuất BillingDetails và tất cả các trường hợp của subclass một cách đa hình.

select
    ID, OWNER, ACCOUNT, BANKNAME, SWIFT,
    EXPMONTH, EXPYEAR, CARDNUMBER,
    BD_TYPE
from
    BILLINGDETAILS
    left outer join CREDITCARD on ID=CREDITCARD_ID


Bạn cũng có thể sử dụng thủ thuật này cho các subclass khác trong cấu trúc lớp của bạn. Nếu bạn có một cấu trúc lớp rộng lớn,
việc sử dụng outer join có thể trở thành một vấn đề. Một số hệ thống cơ sở dữ liệu (ví dụ: Oracle) giới hạn số lượng bảng
trong một phép toán outer join. Đối với một cấu trúc lớp rộng lớn, bạn có thể muốn chuyển sang một chiến lược truy xuất khác
thực hiện một lệnh SQL select thứ hai ngay lập tức thay vì sử dụng outer join.

Tại thời điểm viết bài này, việc chuyển đổi chiến lược fetching (truy xuất) cho ánh xạ này không có sẵn trong các
chú thích JPA hoặc Hibernate, vì vậy bạn phải ánh xạ lớp trong một tệp native XML Hibernate.

PATH: /model/src/main/resources/inheritance/mixed/FetchSelect.hbm.xml


[Hibernate Feature]
<subclass name="CreditCard"
        discriminator-value="CC">
    <join table="CREDITCARD" fetch="select">
        ...
    </join>
</subclass>

Cho đến nay, chúng ta chỉ đã nói về kế thừa của các đối tượng (entity). Mặc dù tài liệu JPA không đề cập đến kế thừa và
đa hình của các lớp @Embeddable, nhưng Hibernate cung cấp một chiến lược ánh xạ cho các loại thành phần (component types).