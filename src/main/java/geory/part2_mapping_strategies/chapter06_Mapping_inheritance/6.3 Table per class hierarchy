6.3 Table per class hierarchy (hệ thống phân lớp)
Bạn có thể ánh xạ toàn bộ một hệ thống lớp vào một bảng duy nhất. Bảng này bao gồm các cột cho tất cả các thuộc tính
của tất cả các lớp trong phân cấp. Giá trị của một cột hoặc công thức bổ sung loại nhận biết lớp cụ thể được đại diện
bởi một hàng cụ thể cụ thể. Hình 6.2 trình bày cách tiếp cận này.

Chiến lược ánh xạ này là một giải pháp vượt trội về cả hiệu suất và đơn giản. Đây là cách hiệu suất tốt nhất để biểu diễn
tính đa hình - cả các truy vấn đa hình và không đa hình đều hoạt động tốt - và thậm chí còn dễ dàng để viết truy vấn bằng tay.
Thậm chí có thể thực hiện mà không cần kết hợp hoặc sự hợp nhất phức tạp. Tiến hóa schema đơn giản.

Tuy nhiên, có một vấn đề lớn: (tính toàn vẹn dữ liệu). Bạn phải khai báo cột cho các thuộc tính được khai báo bởi các
lớp con là nullable. Nếu các lớp con của bạn mỗi lớp định nghĩa một số thuộc tính NOT NULL, việc mất ràng buộc NOT NULL
có thể là một vấn đề nghiêm trọng từ quan điểm độ chính xác của dữ liệu. Hãy tưởng tượng rằng một ngày hết hạn cho thẻ
tín dụng là bắt buộc, nhưng schema cơ sở dữ liệu của bạn không thể bắt buộc quy tắc này vì tất cả các cột của bảng có
thể là NULL. Một lỗi lập trình ứng dụng đơn giản có thể dẫn đến dữ liệu không hợp lệ.

Vấn đề quan trọng khác là (chuẩn hóa). Bạn đã tạo ra các phụ thuộc chức năng giữa các cột không phải khóa, vi phạm chuẩn hóa 3.
Như thường lệ, phi bình thường hóa vì mục đích hiệu suất có thể dẫn đến hiểu lầm, vì nó hy sinh tính ổn định,
khả năng bảo trì và tính toàn vẹn của dữ liệu cho những lợi ích ngay lập tức có thể cũng được đạt được thông qua tối
ưu hóa đúng đắn của kế hoạch thực hiện SQL (nói cách khác, hỏi DBA của bạn).

Sử dụng chiến lược kế thừa `SINGLE_TABLE` để tạo một table-per-class hierarchy, như được hiển thị trong đoạn mã sau.

Listing 6.5 Mapping BillingDetails with `SINGLE_TABLE`

@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "BD_TYPE")
public abstract class BillingDetails {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @NotNull                        // <- Bị Hibernate bỏ qua để tạo lược đồ!
    @Column(nullable = false)
    protected String owner;
    // ...
}

Lớp gốc BillingDetails trong hệ thống phân cấp được ánh xạ vào bảng BILLINGDETAILS một cách tự động.
Các thuộc tính chia sẻ của lớp cha có thể là NOT NULL trong schema; mỗi thực thể của các lớp con phải có một giá trị.
Một điểm mạnh của triển khai của Hibernate đòi hỏi bạn phải khai báo tính có thể là null bằng cách sử dụng @Column vì
Hibernate bỏ qua @NotNull của Bean Validation khi nó tạo schema cơ sở dữ liệu.

Bạn phải thêm một cột bắt đầu (discriminator column) đặc biệt để phân biệt mỗi hàng đại diện cho cái gì. Đây không phải
là một thuộc tính của thực thể; nó được sử dụng bên trong bởi Hibernate. Tên cột là BD_TYPE, và các giá trị là chuỗi -
trong trường hợp này, "CC" hoặc "BA". Hibernate tự động đặt và truy xuất các giá trị phân biệt này.


Nếu bạn không chỉ định một cột phân biệt trong lớp cha, tên của nó sẽ mặc định thành DTYPE và giá trị là chuỗi.
Tất cả các lớp cụ thể trong hệ thống phân cấp đều có thể có một giá trị phân biệt, ví dụ như CreditCard.

Listing 6.6 Mapping CreditCard
PATH: /model/src/main/java/org/jpwh/model/inheritance/singletable/CreditCard.java

@Entity
@DiscriminatorValue("CC")
public class CreditCard extends BillingDetails {
    @NotNull    // <- Bị Hibernate bỏ qua để tạo lược đồ!
    protected String cardNumber;

    @NotNull    // <- Bị Hibernate bỏ qua để tạo lược đồ!
    protected String expMonth;

    @NotNull    // <- Bị Hibernate bỏ qua để tạo lược đồ!
    protected String expYear;
    // ...
}


[Hibernate Feature]
Nếu không có giá trị phân biệt rõ ràng (discriminator value), Hibernate sẽ mặc định là tên đầy đủ của lớp nếu bạn
sử dụng tệp XML của Hibernate và tên thực thể đơn giản nếu bạn sử dụng chú thích hoặc tệp XML JPA.
Lưu ý rằng JPA không chỉ định một giá trị mặc định cho các loại phân biệt không phải chuỗi; mỗi nhà cung cấp lưu trữ
có thể có các giá trị mặc định khác nhau. Do đó, bạn nên luôn chỉ định discriminator value cho các lớp cụ thể của bạn.

Đánh dấu từng lớp con với @Entity, sau đó ánh xạ các thuộc tính của lớp con vào các cột trong bảng BILLINGDETAILS.
Hãy nhớ rằng ràng buộc NOT NULL không được phép trong schema, vì một thực thể BankAccount sẽ không có thuộc tính expMonth - tháng hết hạn.,
và cột EXPMONTH phải là NULL cho hàng đó. Hibernate bỏ qua @NotNull cho việc tạo DDL schema, nhưng nó tuân thủ nó trong
thời gian chạy, trước khi chèn một hàng. Điều này giúp bạn tránh lỗi lập trình; bạn không muốn lỡ lưu trữ dữ liệu thẻ
tín dụng mà không có ngày hết hạn. (Tất nhiên, các ứng dụng không hoạt động tốt hơn vẫn có thể lưu trữ dữ liệu không chính
xác trong cơ sở dữ liệu này.)

Hibernate tạo câu lệnh SQL sau đây cho truy vấn select bd from BillingDetails bd:
select
    ID, OWNER, EXPMONTH, EXPYEAR, CARDNUMBER,
    ACCOUNT, BANKNAME, SWIFT, BD_TYPE
from
    BILLINGDETAILS


Để truy vấn lớp con CreditCard, Hibernate thêm một điều kiện vào cột phân biệt:

select
    ID, OWNER, EXPMONTH, EXPYEAR, CARDNUMBER
from
    BILLINGDETAILS
where
    BD_TYPE='CC'


[Hibernate Feature]
Đôi khi, đặc biệt là trong các schema cổ điển, bạn không có tự do để bao gồm một cột extra discriminator (phân biệt bổ sung)
trong các bảng thực thể của bạn. Trong trường hợp này, bạn có thể áp dụng một biểu thức để tính toán giá trị discriminator
cho mỗi hàng. Các Formula (công thức) cho discriminator không phải là một phần của đặc tả JPA, nhưng Hibernate có một chú thích
mở rộng, @DiscriminatorFormula.

Listing 6.7 Mapping BillingDetails with a @DiscriminatorFormula
PATH: /model/src/main/java/org/jpwh/model/inheritance/singletableformula/BillingDetails.java

@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@org.hibernate.annotations.DiscriminatorFormula(
    "case when CARDNUMBER is not null then 'CC' else 'BA' end"
)
public abstract class BillingDetails {
    // ...
}

Trong schema không có cột phân biệt, vì vậy ánh xạ này dựa vào một biểu thức SQL CASE/WHEN để xác định liệu một hàng cụ
thể có đại diện cho một thẻ tín dụng hay một tài khoản ngân hàng (nhiều nhà phát triển có thể chưa từng sử dụng loại
biểu thức SQL này; hãy kiểm tra tiêu chuẩn ANSI nếu bạn không quen thuộc với nó). Kết quả của biểu thức là một chuỗi cố định,
CC hoặc BA, mà bạn khai báo trong các ánh xạ của các lớp con.

Nhược điểm của chiến lược "table-per-class hierarchy" có thể quá nghiêm trọng đối với thiết kế của bạn - xem xét các
schema không bình thường có thể trở thành một gánh nặng lớn trong dài hạn. DBA của bạn có thể không thích nó chút nào.
Chiến lược ánh xạ kế tiếp về kế thừa không đưa bạn vào tình huống này.