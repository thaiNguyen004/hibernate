7.1 Các tập hợp (Sets), túi (Bags), danh sách (Lists) và map (Maps) của các value type
Java có một Collection API phong phú, từ đó bạn có thể chọn interface và triển khai phù hợp nhất với thiết kế domain model
của bạn. Hãy đi qua các collection mapping phổ biến nhất, lặp lại ví dụ về Image và Mục Item với những biến thể nhỏ.
Chúng ta sẽ bắt đầu bằng cách xem xét schema cơ sở dữ liệu và tạo và ánh xạ một thuộc tính tập hợp (collection) một
cách tổng quan. Sau đó, chúng ta sẽ tiến đến cách chọn một interfacae collection cụ thể và ánh xạ các loại collection
khác nhau: set, identifier bag, list, map, và cuối cùng là các tập hợp được sắp xếp và có thứ tự (sorted and ordered collections).

[7.1.1] Schema cơ sở dữ liệu
Hãy mở rộng CaveatEmptor và hỗ trợ việc đính kèm hình ảnh vào các mục đấu giá. Bỏ qua mã Java trong lúc này và điều chỉnh
một chút để xem xét chỉ bảng cơ sở dữ liệu.

Bạn cần một bảng IMAGE trong cơ sở dữ liệu để lưu trữ các hình ảnh, hoặc có thể chỉ là tên tệp của các hình ảnh.
Bảng này cũng có một cột khóa ngoại, ví dụ ITEM_ID, tham chiếu đến bảng ITEM. Hãy xem schema được hiển thị trong hình 7.1.

Đó là tất cả về schema - không có tập hợp hoặc vòng đời hợp thành (composition life cycle).
(Bạn có thể sử dụng tùy chọn `ON DELETE CASCADE` trên cột khóa ngoại `ITEM_ID`. Khi ứng dụng xóa một hàng ITEM,
cơ sở dữ liệu sẽ tự động xóa các hàng IMAGE tham chiếu đến ITEM này trong cơ sở dữ liệu. Hãy giả sử trong thời điểm này
rằng điều này không xảy ra.)


[7.1.2] Creating and mapping a collection property

Làm thế nào bạn sẽ ánh xạ bảng `IMAGE` này dựa trên kiến thức hiện tại của bạn? Có lẽ bạn sẽ ánh xạ nó như một lớp @Entity
có tên là Image. Sau này trong chương này, bạn sẽ ánh xạ một cột khóa ngoại bằng cách sử dụng thuộc tính @ManyToOne.
Bạn cũng sẽ cần ánh xạ một phần tử primary key chung cho lớp thực thể, như được mô tả trong phần 9.2.2.

Không có collection nào được ánh xạ; chúng không cần thiết. Khi bạn cần các images của một item, bạn viết và thực thi
một truy vấn trong ngôn ngữ truy vấn JPA: `select img from Image img where img.item = :itemParameter`.
Các persistent collections luôn là tùy chọn - một tính năng. Tại sao bạn lại ánh xạ một collection?

Collection mà bạn có thể tạo ra là Item#images, tham chiếu tới tất cả các images của một item cụ thể.
Bạn tạo và ánh xạ thuộc tính collection này để thực hiện các công việc sau:
- Thực hiện truy vấn SQL `SELECT * from IMAGE where ITEM_ID = ?` tự động khi bạn gọi someItem.getImages().
Miễn là các thể hiện của mô hình miền của bạn đang ở trạng thái được quản lý (managed state - sẽ giải thích sau),
bạn có thể đọc từ cơ sở dữ liệu theo nhu cầu trong quá trình duyệt qua các mối quan hệ giữa các lớp của bạn.
Bạn không cần phải viết và thực thi truy vấn một cách thủ công bằng EntityManager để nạp dữ liệu.
Tuy nhiên, truy vấn collection khi bạn bắt đầu lặp qua collection luôn là "all images for this item" never
"only images that match criteria XYZ"
- Tránh việc lưu mỗi hình ảnh bằng entityManager.persist(). Nếu bạn có một collection được ánh xạ, việc thêm hình ảnh
vào collection với someItem.getImages().add() sẽ khiến nó trở nên persistance tự động khi Mục (Item) được lưu.
Việc tự động lưu này thuận tiện vì bạn có thể lưu các thể hiện mà không cần gọi EntityManager.
- Có một vòng đời phụ thuộc của các Hình ảnh (Images). Khi bạn xóa một Mục (Item), Hibernate sẽ xóa tất cả các
Hình ảnh (Images) đính kèm bằng một truy vấn SQL DELETE bổ sung. Bạn không cần phải lo lắng về vòng đời của các hình ảnh
và việc dọn dẹp các thực thể bị mất cha (orphans) (giả sử rằng ràng buộc khóa ngoại của cơ sở dữ liệu của bạn không có
ON DELETE CASCADE). Nhà cung cấp JPA xử lý vòng đời hợp thành (composition life cycle).

Quan trọng là bạn cần nhận thức rằng mặc dù những lợi ích này nghe có vẻ tuyệt vời, nhưng giá bạn phải trả là sự phức tạp
trong việc ánh xạ thêm. Chúng tôi đã thấy nhiều người mới bắt đầu với JPA gặp khó khăn trong việc ánh xạ các collection,
và thường câu trả lời cho câu hỏi "Tại sao bạn làm như vậy?" là "Tôi nghĩ collection này là bắt buộc."

Khi phân tích tình huống với image cho auction items (các mục đấu giá), bạn sẽ hưởng lợi từ việc ánh xạ một collection.
Các hình ảnh có vòng đời phụ thuộc; khi bạn xóa một mục, tất cả các hình ảnh đính kèm phải được xóa. Khi một mục được
lưu trữ, tất cả các hình ảnh đính kèm cũng nên được lưu trữ. Và khi bạn hiển thị một mục, bạn thường cũng hiển thị tất cả
các hình ảnh, vì vậy someItem.getImages() là thuận tiện trong mã UI. Bạn không cần phải gọi dịch vụ lưu trữ lại để lấy
các hình ảnh; chúng đã có sẵn.

Bây giờ, hãy chọn collection interface và triển khai của collection phù hợp nhất với thiết kế mô hình miền của bạn.
Hãy đi qua các ánh xạ collection phổ biến nhất, lặp lại ví dụ về Hình ảnh (Image) và Mục (Item) với các biến thể nhỏ.

[7.1.3] Selecting a collection interface
Cách thường dùng cho một collection property trong Java domain model là:

<<Interface>> images = new <<Implementation>>();
// Getter and setter methods
// ...

Sử dụng một interface để khai báo kiểu của thuộc tính, chứ không phải là một triển khai.
Chọn một triển khai tương ứng và khởi tạo collection ngay lập tức;
làm như vậy tránh việc collection chưa được khởi tạo. Chúng tôi không khuyến nghị khởi tạo collection muộn,
trong các hàm tạo (constructors) hoặc các phương thức setter.

Sử dụng generics, đây là một ví dụ về một Set điển hình:
Set<String> images = new HashSet<String>();

Raw collection không có kiểu generics
Nếu bạn không chỉ định kiểu của các phần tử trong collection với generics, hoặc các kiểu key/value trong một map, 
bạn cần thông báo cho Hibernate biết kiểu (kiểu) đó. Ví dụ, thay vì một Set<String>, bạn ánh xạ một Set dạng "raw" 
(không sử dụng generics) với @ElementCollection(targetClass=String.class). Điều này cũng áp dụng cho các tham số kiểu 
của một Map. Để chỉ định kiểu key của một Map, bạn sử dụng @MapKeyClass. Tất cả các ví dụ trong cuốn sách này đều sử 
dụng các collection và map có kiểu generics, và bạn cũng nên làm như vậy.


Mặc định, Hibernate hỗ trợ các interface collection quan trọng nhất của JDK và duy trì ngữ nghĩa của các collection, map
và array JDK một cách persistent. Mỗi interface JDK đều có một triển khai tương ứng được Hibernate hỗ trợ và việc sử dụng
kết hợp đúng là rất quan trọng. Hibernate bao bọc collection mà bạn đã khởi tạo trước đó khi khai báo trường,
hoặc đôi khi thay thế nó, nếu nó không phải là loại đúng. Hibernate thực hiện điều này để cho phép, giữa những điều khác,
lazy loading và dirty checking (kiểm tra sự thay đổi) của các phần tử trong collection.

Nếu không extends Hibernate, bạn có thể lựa chọn từ các collection sau đây:
- Thuộc tính java.util.Set, được khởi tạo bằng java.util.HashSet. Thứ tự các phần tử không được bảo tồn, và không cho
phép phần tử trùng lặp. Tất cả các nhà cung cấp JPA đều hỗ trợ loại này.

- Thuộc tính java.util.SortedSet, được khởi tạo bằng java.util.TreeSet. collection này hỗ trợ thứ tự ổn định của các
phần tử: việc sắp xếp xảy ra trong bộ nhớ, sau khi Hibernate load dữ liệu. Đây là một sự mở rộng chỉ có trong Hibernate;
các nhà cung cấp JPA khác có thể bỏ qua khía cạnh "được sắp xếp" của Set này.

- Thuộc tính java.util.List, được khởi tạo bằng java.util.ArrayList. Hibernate bảo tồn vị trí của mỗi phần tử với một cột
index bổ sung trong bảng cơ sở dữ liệu. Tất cả các nhà cung cấp JPA đều hỗ trợ loại này.

- Thuộc tính java.util.Collection, được khởi tạo bằng java.util.ArrayList. collection này có ngữ nghĩa của bag(túi);
có thể có các phần tử trùng lặp, nhưng không bảo tồn thứ tự của các phần tử. Tất cả các nhà cung cấp JPA đều hỗ trợ loại này.

- Thuộc tính java.util.Map, được khởi tạo bằng java.util.HashMap. Các cặp key và value của một map có thể được bảo tồn
trong cơ sở dữ liệu. Tất cả các nhà cung cấp JPA đều hỗ trợ loại này.

- Thuộc tính java.util.SortedMap, được khởi tạo bằng java.util.TreeMap. Nó hỗ trợ thứ tự ổn định của các phần tử:
việc sắp xếp xảy ra trong bộ nhớ, sau khi Hibernate load dữ liệu. Đây là một sự mở rộng chỉ có trong Hibernate;
các nhà cung cấp JPA khác có thể bỏ qua khía cạnh "được sắp xếp" của map này.

- Hibernate hỗ trợ các persistent arrays, nhưng JPA không hỗ trợ. Chúng hiếm khi được sử dụng và chúng tôi sẽ không
trình bày chúng trong cuốn sách này: Hibernate không thể bao bọc các thuộc tính mảng, vì vậy nhiều lợi ích của collection,
chẳng hạn như lazy loading theo yêu cầu, sẽ không hoạt động. Chỉ sử dụng mảng có tính bền vững trong mô hình miền
của bạn nếu bạn chắc chắn rằng bạn sẽ không cần lazy loading. (Bạn có thể load mảng theo yêu cầu, nhưng điều này đòi hỏi
can thiệp với việc tăng cường bytecode, như được giải thích trong phần 12.1.3.)

[Hibernate Feature]

Nếu bạn muốn ánh xạ các interface và triển khai collection không được Hibernate hỗ trợ trực tiếp, bạn cần thông báo cho
Hibernate về ngữ nghĩa của collection tùy chỉnh của bạn. Điểm mở rộng trong Hibernate là interface PersistentCollection
trong gói org.hibernate.collection.spi, nơi bạn thường mở rộng một trong các lớp PersistentSet, PersistentBag và PersistentList
hiện có. collection bền vững tùy chỉnh không dễ viết, và chúng tôi không khuyến nghị làm điều này nếu bạn không phải là
một người dùng Hibernate có kinh nghiệm. Bạn có thể tìm một ví dụ trong mã nguồn của Hibernate test suite.

Đối với ví dụ về auction và image, giả sử rằng image được lưu trữ ở 1 vài nơi trên hệ thống tệp và bạn chỉ giữ tên tệp
trong cơ sở dữ liệu.

1. Nếu bạn chỉ lưu tên tệp hình ảnh trong cơ sở dữ liệu SQL của bạn, bạn vẫn cần nơi để lưu trữ dữ liệu thực sự của
từng hình ảnh, tức là các tệp hình ảnh đó. Một cách là bạn có thể lưu trữ dữ liệu hình ảnh này trong cơ sở dữ liệu SQL
của bạn, trong các cột kiểu BLOB (Binary Large Object).

2.1. Các API tiêu chuẩn của Java cho hệ thống tệp, như `java.io.File` và `java.nio.file.Files`, không hỗ trợ giao dịch.
Điều này có nghĩa là bạn không thể quản lý các hoạt động trên các tệp này trong một giao dịch hệ thống lớn (JTA),
giống như bạn có thể quản lý các hoạt động SQL trong cơ sở dữ liệu.

2.2. Nếu bạn thực hiện một loạt các hoạt động như ghi tên tệp vào cơ sở dữ liệu SQL (ví dụ: để lưu trữ thông tin về hình ảnh)
trong một giao dịch, và sau đó bạn thử lưu trữ hoặc xóa các tệp từ hệ thống tệp thông thường, có thể xảy ra trường hợp một
phần của giao dịch thành công trong khi một phần khác thất bại. Điều này có thể gây ra sự không nhất quán trong dữ liệu của bạn.

2.3. Bạn không thể hoàn nguyên các hoạt động này như một đơn vị nguyên tử, nghĩa là bạn không thể hoàn tất hoặc quay
lại toàn bộ giao dịch nếu có lỗi xảy ra trong quá trình thực hiện các hoạt động liên quan đến tệp.

Vì vậy, để giải quyết vấn đề này, bạn có thể sử dụng các giải pháp bên ngoài như XADisk để tích hợp quản lý giao dịch
cho các hoạt động liên quan đến tệp trên hệ thống tệp. Điều này giúp đảm bảo tính nhất quán và quản lý giao dịch
cho cả hoạt động SQL trong cơ sở dữ liệu và các hoạt động liên quan đến tệp trong hệ thống tệp của bạn.


3. Tuy nhiên, có may mắn là có các triển khai hệ thống tệp có hỗ trợ giao dịch cho Java, như XADisk (xem tại https://xadisk.java.net).
Bạn có thể dễ dàng tích hợp XADisk với một quản lý giao dịch hệ thống như Bitronix, mà ví dụ trong cuốn sách này sử dụng.
Khi bạn tích hợp, các hoạt động trên tệp sẽ được quản lý bằng cách tham gia vào giao dịch của hệ thống, và chúng sẽ
được hoàn thành hoặc hoàn nguyên cùng với các hoạt động SQL của Hibernate trong cùng một giao dịch người dùng
(UserTransaction).

Hãy ánh xạ một tập hợp các tên tệp hình ảnh của một item.



[7.1.4] Mapping a set

Biểu diễn đơn giản nhất là một Set các tên tệp hình ảnh dưới dạng chuỗi. Thêm một thuộc tính collection vào lớp Item,
như được hiển thị trong đoạn mã dưới đây:

Listing 7.1 Images mapped as a simple set of strings

PATH: /model/src/main/java/org/jpwh/model/collections/setofstrings/Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(
        name = "IMAGE",       // Defaults to `ITEM_IMAGES`
        joinColumns = @JoinColumn(name = "ITEM_ID"))
    @Column(name = "FILENAME")      // Defaults to IMAGES
    protected Set<String> images = new HashSet<String>();
    // ...
}

Chú thích JPA @ElementCollection được yêu cầu cho một collection các phần tử có kiểu giá trị. Nếu thiếu các chú thích
@CollectionTable và @Column, Hibernate sẽ sử dụng tên mặc định cho schema. Hãy xem bảng mẫu trong hình 7.2:
các cột khóa chính được gạch chân.

Bảng IMAGE có một khóa chính tổ hợp bao gồm cả các cột `ITEM_ID` và `FILENAME`. Điều này có nghĩa là bạn không thể có
các hàng trùng lặp: mỗi tệp hình ảnh chỉ có thể được gắn kết một lần với một mục duy nhất. Thứ tự của các hình ảnh không 
được lưu trữ. Điều này phù hợp với mô hình miền và collection Set.

Tuy nhiên, dường như bạn không cho phép người dùng gắn kết cùng một hình ảnh nhiều lần với cùng một mục.
Nhưng hãy giả sử bạn cho phép điều đó. Trong trường hợp đó, loại ánh xạ phù hợp sẽ là gì?

[Hibernate Feature]
7.1.5 Mapping an identifier bag

Một "bag" (túi) là một collection (tập hợp) không có thứ tự cho phép chứa các phần tử trùng lặp, tương tự như giao diện
java.util.Collection. Thú vị là, Collections của Java không bao gồm một triển khai cho "bag." Bạn khởi tạo thuộc tính này
bằng một ArrayList, và Hibernate bỏ qua chỉ số của các phần tử khi lưu trữ và load các phần tử.

Listing 7.2 Bag of strings, allowing duplicate elements

PATH: /model/src/main/java/org/jpwh/model/collections/bagofstrings/Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    @org.hibernate.annotations.CollectionId(        // Khóa chính thay thế cho phép trùng lặp
        columns = @Column(name = "IMAGE_ID"),       // Cột khóa chính thay thế
        type = @org.hibernate.annotations.Type(type = "long"),      // Hibernate only annotations
        generator = Constants.ID_GENERATOR)         // Configures primary key
    protected Collection<String> images = new ArrayList<String>();      // No BagImpl in JDK
    // ...
}

Điều này trông phức tạp hơn nhiều: bạn không thể tiếp tục với cùng một schema như trước đây.
Bảng IMAGE cần một khóa chính khác để cho phép các giá trị FILENAME trùng lặp cho mỗi ITEM_ID.
Bạn giới thiệu một cột khóa chính thay thế được gọi là IMAGE_ID và bạn sử dụng một chú thích riêng của
Hibernate để cấu hình cách tạo khóa chính. Nếu bạn không nhớ về key generators, hãy đọc phần 4.2.4.

Schema đã được sửa đổi được hiển thị trong hình 7.3.

Đây là một câu hỏi thú vị: nếu bạn chỉ thấy schema này, bạn có thể nói được cách các bảng được ánh xạ trong Java không?
Cả hai bảng ITEM và IMAGE trông giống nhau: mỗi bảng đều có một cột khóa chính thay thế và một số cột được chuẩn hóa khác.
Mỗi bảng có thể được ánh xạ bằng một lớp @Entity. Tuy nhiên, chúng tôi quyết định sử dụng một tính năng của JPA và ánh xạ
một collection vào IMAGE, ngay cả khi có một vòng đời của sự tạo thành.

Điều này, một cách hiệu quả, là một quyết định rằng một số quy tắc truy vấn và xử lý được xác định trước là tất cả
những gì bạn cần cho bảng này, thay vì ánh xạ @Entity chung chung hơn. Khi bạn đưa ra quyết định như vậy, hãy đảm bảo bạn
biết lý do và hậu quả. Cách ánh xạ kỹ thuật tiếp theo giữ nguyên thứ tự của hình ảnh bằng một danh sách.


[7.1.6] Mapping a list
Khi bạn chưa từng sử dụng phần mềm ORM trước đây, một persistent list (persistent list) có vẻ là một khái niệm mạnh mẽ;
hãy tưởng tượng xem làm thế nào để lưu trữ và load một java.util.List<String> bằng JDBC và SQL thuần túy.
Nếu bạn thêm một phần tử vào giữa danh sách, tùy thuộc vào cách thực hiện danh sách, danh sách sẽ di chuyển tất cả các
phần tử sau đó sang bên phải hoặc sắp xếp lại các con trỏ. Nếu bạn loại bỏ một phần tử từ giữa danh sách, điều gì đó khác xảy ra,
và cứ thế.

Nếu phần mềm ORM có thể tự động thực hiện tất cả điều này cho các bản ghi cơ sở dữ liệu, điều này làm cho một persistent list
trông thú vị hơn so với thực tế.

Như chúng tôi đã lưu ý ở phần 3.2.4, phản ứng đầu tiên thường là duy trì thứ tự các phần tử dữ liệu khi người dùng nhập chúng.
Bạn thường phải hiển thị chúng sau này theo cùng một thứ tự. Nhưng nếu có một tiêu chí khác có thể được sử dụng để sắp xếp dữ liệu,
chẳng hạn như thời gian nhập, bạn nên sắp xếp dữ liệu khi truy vấn và không lưu trữ thứ tự hiển thị. Điều gì xảy ra nếu
thứ tự hiển thị thay đổi? Thứ tự dữ liệu được hiển thị có lẽ không phải là một phần tích cực của dữ liệu, mà là một vấn
đề độc lập. Hãy suy nghĩ kỹ trước khi ánh xạ một list persistent; Hibernate không thông minh như bạn có thể nghĩ,
như bạn sẽ thấy trong ví dụ tiếp theo. Đầu tiên, hãy thay đổi thực thể Item và thuộc tính collection của nó.

Listing 7.3 Persistent list, preserving the order of elements in the database
PATH: /model/src/main/java/org/jpwh/model/collections/listofstrings/Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @OrderColumn        // Cho phép duy trì thứ tự
    @Column(name = "FILENAME")
    protected List<String> images = new ArrayList<String>();
    // ...
}

Trong ví dụ này, có một chú thích mới: @OrderColumn. Cột này lưu trữ một index trong persistent list, bắt đầu từ số 0.
Lưu ý rằng Hibernate lưu trữ và mong đợi index này liên tục trong cơ sở dữ liệu. Nếu có khoảng trống, Hibernate sẽ thêm
các phần tử null khi load và xây dựng danh sách. Hãy xem vào mô hình dữ liệu trong hình 7.4. Khóa chính của bảng IMAGE
là sự kết hợp của ITEM_ID và IMAGES_ORDER. Điều này cho phép giá trị FILENAME trùng lặp, điều này phù hợp với ngữ
nghĩa của một danh sách.

Chúng tôi đã nói trước đó rằng Hibernate không thông minh như bạn có thể nghĩ. Hãy xem xét các sửa đổi cho danh sách:
giả sử danh sách có ba phần tử A, B và C, theo thứ tự đó. Điều gì xảy ra nếu bạn loại bỏ A khỏi danh sách? Hibernate
thực thi một lệnh SQL DELETE cho dòng đó. Sau đó, nó thực thi hai lệnh SQL UPDATE, cho B và C, dịch chuyển vị trí
của họ sang bên trái để đóng khoảng trống trong index. Đối với mỗi phần tử bên phải của phần tử đã bị xóa,
Hibernate thực thi một lệnh SQL UPDATE. Nếu bạn tự viết SQL cho điều này, bạn có thể làm điều này với một lệnh
UPDATE duy nhất. Điều tương tự cũng đúng cho việc chèn vào giữa danh sách. Hibernate di chuyển tất cả các phần tử hiện
có sang bên phải một cách từng bước. Ít nhất Hibernate thông minh đủ để thực hiện một lệnh SQL DELETE duy nhất khi
bạn gọi phương thức clear() của danh sách.

Bây giờ, giả sử hình ảnh cho một item có tên do người dùng cung cấp bên cạnh tên tệp. Một cách để mô hình điều này
trong Java là sử dụng một map, sử dụng các cặp key/value.


7.1.7 Mapping a map
Một lần nữa, thực hiện một sự thay đổi nhỏ vào lớp Java để sử dụng một thuộc tính Map.
Listing 7.4 Persistent map storing its key and value pairs
PATH: /model/src/main/java/org/jpwh/model/collections/mapofstrings/Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @MapKeyColumn(name = "FILENAME")    // [1] Maps key
    @Column(name = "IMAGENAME")         // [2] Maps value
    protected Map<String, String> images = new HashMap<String, String>();
    // ...
}

Mỗi mục nhập trong map là một cặp key/value. Ở đây, bạn liên kết khóa với @MapKeyColumn thành `FILENAME` [1]
và giá trị với cột IMAGENAME [2]. Điều này có nghĩa là người dùng chỉ có thể sử dụng một tệp một lần, vì một Map không
cho phép khóa trùng lặp.

Như bạn có thể thấy từ lược đồ trong hình 7.5, khóa chính của bảng collection là một tổ hợp của ITEM_ID và FILENAME.
Ví dụ này sử dụng một chuỗi làm khóa cho map, nhưng Hibernate hỗ trợ bất kỳ kiểu cơ bản nào, chẳng hạn như BigDecimal
và Integer. Nếu khóa là một enum Java, bạn phải sử dụng @MapKeyEnumerated. Với bất kỳ kiểu thời gian nào như java.util.Date,
sử dụng @MapKeyTemporal. Chúng tôi đã thảo luận về những tùy chọn này, mặc dù không phải cho các collection,
trong các phần 5.1.6 và 5.1.7.

Map trong ví dụ trước đó không có thứ tự. Bạn nên làm gì để luôn sắp xếp các mục nhập của map theo tên tệp?


[Hibernate feature]
[7.1.8] Sorted and ordered collections

Trong một sự lạm dụng đáng ngạc nhiên của ngôn ngữ tiếng Anh, các từ "sorted" và "ordered" có nghĩa khác nhau khi
nói về các persistent collection trong Hibernate. Bạn sắp xếp một collection trong bộ nhớ bằng cách sử dụng một comparator Java.
Bạn sắp xếp một collection khi nó được nạp từ cơ sở dữ liệu, bằng cách sử dụng một truy vấn SQL với mệnh đề ORDER BY.

Hãy biến map of images thành một bản đồ đã được sắp xếp. Bạn cần thay đổi thuộc tính Java và ánh xạ tương ứng.

Listing 7.5 Sorting map entries in memory, using a comparator
PATH: /model/src/main/java/org/jpwh/model/collections/sortedmapofstrings/
Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @MapKeyColumn(name = "FILENAME")
    @Column(name = "IMAGENAME")
    @org.hibernate.annotations.SortComparator(ReverseStringComparator.class)
    protected SortedMap<String, String> images =
                                    new TreeMap<String, String>();
    // ...
}

Các collection đã được sắp xếp là một tính năng của Hibernate; do đó, chúng ta có chú thích org.hibernate.annotations.SortComparator
với một triển khai của java.util.Comparator. Chúng tôi sẽ không hiển thị cho bạn lớp này ở đây; nó sắp xếp chuỗi
theo thứ tự ngược lại.

Lược đồ cơ sở dữ liệu không thay đổi, điều này cũng áp dụng cho tất cả các ví dụ sau. Hãy xem các hình minh họa trong
các phần trước nếu bạn cần một lời nhắc nhở.

Bạn có thể ánh xạ một java.util.SortedSet như được hiển thị ở bên dưới.

Listing 7.6 Sorting set elements in memory with String#compareTo()
PATH: /model/src/main/java/org/jpwh/model/collections/sortedsetofstrings/Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    @org.hibernate.annotations.SortNatural
    protected SortedSet<String> images = new TreeSet<String>();
    // ...
}

Ở đây, việc natural sorting được sử dụng, dựa trên phương thức String#compareTo().
Rất tiếc, bạn không thể sắp xếp một bag; không có TreeBag. Các chỉ số của các phần tử trong list xác định trước thứ tự của chúng.

Thay vì chuyển sang giao diện Sorted*, bạn có thể muốn truy xuất các phần tử của một collection theo order (đúng thứ tự) từ
cơ sở dữ liệu và không sắp xếp trong bộ nhớ. Thay vì sử dụng java.util.SortedSet, ví dụ sau sử dụng java.util.LinkedHashSet.
Listing 7.7 LinkedHashSet cung cấp (offers) thứ tự chèn cho lần lặp

PATH: /model/src/main/java/org/jpwh/model/collections/setofstringsorderby/
Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    // @javax.persistence.OrderBy
    @org.hibernate.annotations.OrderBy(clause = "FILENAME desc")
    protected Set<String> images = new LinkedHashSet<String>();
    // ...
}

Lớp LinkedHashSet có một thứ tự lặp ổn định qua các phần tử của nó, và Hibernate sẽ điền chúng theo thứ tự chính xác khi 
load một collection. Để làm điều này, Hibernate áp dụng một mệnh đề ORDER BY vào câu lệnh SQL để load collection.
Bạn phải khai báo mệnh đề SQL này bằng chú thích độc quyền @org.hibernate.annotations.OrderBy.

Bạn thậm chí có thể gọi một hàm SQL, chẳng hạn như @OrderBy("substring(FILENAME, 0, 3) desc"),
sẽ sắp xếp theo ba chữ cái đầu tiên của tên tệp. Hãy cẩn thận kiểm tra xem hệ quản trị cơ sở dữ liệu (DBMS) có hỗ trợ hàm
SQL mà bạn đang gọi hay không. Hơn nữa, bạn có thể sử dụng cú pháp SQL:2003 `ORDER BY ... NULLS FIRST|LAST`, và Hibernate
sẽ tự động chuyển đổi nó dialect được hỗ trợ bởi DBMS của bạn.

Ví dụ tiếp theo cho thấy sắp xếp tương tự khi load dữ liệu với một ánh xạ bag.

Listing 7.8 ArrayList provides stable iteration order (thứ tự lặp ổn định)
PATH: /model/src/main/java/org/jpwh/model/collections/bagofstringsorderby/
Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    @org.hibernate.annotations.CollectionId(
        columns = @Column(name = "IMAGE_ID"),
        type = @org.hibernate.annotations.Type(type = "long"),
        generator = Constants.ID_GENERATOR)
    @org.hibernate.annotations.OrderBy(clause = "FILENAME desc")
    protected Collection<String> images = new ArrayList<String>();
    // ...
}

Cuối cùng, bạn có thể load các cặp khóa/giá trị đã được sắp xếp bằng một LinkedHashMap.

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @MapKeyColumn(name = "FILENAME")
    @Column(name = "IMAGENAME")
    @org.hibernate.annotations.OrderBy(clause = "FILENAME desc")
    protected Map<String, String> images = new LinkedHashMap<String, String>();
    // ...
}

Hãy nhớ rằng các phần tử của các collection đã được sắp xếp chỉ ở trong thứ tự mong muốn khi chúng được load.
Ngay khi bạn thêm và loại bỏ các phần tử, thứ tự lặp lại của các bộ sưu tập có thể khác với "by filename";
chúng hoạt động giống như các tập hợp, bản đồ hoặc danh sách thông thường.

Trong một hệ thống thực tế, có khả năng bạn sẽ cần lưu trữ nhiều thông tin hơn chỉ là tên hình ảnh và tên tệp.
Có thể bạn sẽ cần tạo một lớp Image cho thông tin bổ sung này. Điều này là trường hợp sử dụng hoàn hảo cho một collection
các thành phần.

