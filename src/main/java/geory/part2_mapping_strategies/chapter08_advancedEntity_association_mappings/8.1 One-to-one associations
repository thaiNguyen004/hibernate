Chúng tôi đã tranh luận ở phần 5.2 rằng mối quan hệ giữa User và Address (User có một `billingAddress`, `homeAddress` và
shippingAddress) được biểu diễn tốt nhất bằng cách ánh xạ @Embeddable. Điều này thường là cách đơn giản nhất để biểu diễn
mối quan hệ one-to-one, bởi vì vòng đời thường phụ thuộc vào nhau trong instance như vậy. Đây có thể là một aggregation
(sự tổng hợp) hoặc composition (sự hợp thành) trong UML.

Nhưng còn về việc sử dụng một bảng `Address` riêng biệt và ánh xạ cả `User` và `Address` như các thực thể?

Một lợi ích của mô hình này là khả năng sử dụng các tham chiếu chung - một lớp thực thể khác (hãy nói là Shipment) cũng
có thể có một tham chiếu đến một instance Address cụ thể. Nếu một User cũng có một tham chiếu đến instance này, như
là Address giao hàng của họ, thì instance Address phải hỗ trợ các tham chiếu chung và cần có danh tính riêng.

Trong instance này, các lớp `User` và `Address` có một mối quan hệ one-to-one thực sự. Hãy xem class diagram đã chỉnh sửa
trong hình 8.1.

Có nhiều phương án ánh xạ có thể áp dụng cho mối quan hệ one-to-one. Chiến lược đầu tiên chúng ta xem xét là sử dụng một
giá trị khóa chính chung.

[8.1.1] Sharing a primary key

Các row trong hai bảng liên quan thông qua một liên kết khóa chính chia sẻ các giá trị khóa chính giống nhau.
User có giá trị khóa chính giống như Address của họ (shipping). Vấn đề chính với cách tiếp cận này là đảm bảo rằng các
instance liên quan được gán giá trị khóa chính chung khi các instance được lưu. Trước khi chúng ta xem xét vấn đề này,
hãy tạo ánh xạ cơ bản. Lớp Address hiện nay là một thực thể độc lập; nó không còn là một phần tử.

Listing 8.1 Address class as a standalone entity
PATH: /model/src/main/java/org/jpwh/model/associations/onetoone/
sharedprimarykey/Address.java
@Entity
public class Address {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @NotNull
    protected String street;

    @NotNull
    protected String zipcode;

    @NotNull
    protected String city;
    // ...
}

Lớp User cũng là một thực thể, với thuộc tính liên kết "shippingAddress".

Listing 8.2 User entity and `shippingAddress` association
PATH: /model/src/main/java/org/jpwh/model/associations/onetoone/
sharedprimarykey/User.java

@Entity
@Table(name = "USERS")
public class User {
    @Id
    protected Long id; // [1] Sử dụng id do ứng dụng gán

    @OneToOne(         // [2] Đánh dấu là mối quan hệ one-to-one
        fetch = FetchType.LAZY,     // [3] Default is `EAGER`
        optional = false            // [4] Cần thiết cho lazy loading
    )
    @PrimaryKeyJoinColumn           // [5] Chọn chiến lược khóa chính được chia sẻ (shared primary key)
    protected Address shippingAddress;

    protected User() {
    }

    public User(Long id, String username) {     // [6] Identifier required
        this.id = id;
        this.username = username;
    }
    // ...
}


Đối với lớp User, bạn không khai báo identifier generator [1]. Như đã đề cập trong phần 4.2.4, đây là một trong những
instance hiếm hoi khi bạn sử dụng giá trị khóa được gán bởi ứng dụng. Bạn có thể thấy rằng thiết kế hàm tạo (một cách yếu) 
áp dụng điều này (6): giao diện công khai của lớp yêu cầu một giá trị khóa để tạo một instance.

Có hai Annotatio mới trong ví dụ. @OneToOne (2) là điều bạn mong đợi: nó được yêu cầu để đánh dấu một thuộc tính có 
giá trị thực thể như một mối quan hệ one-to-one. Như thường lệ, bạn nên ưu tiên chiến lược lazy loading, vì vậy bạn ghi đè 
lên chiến lược mặc định FetchType.EAGER bằng LAZY (3). Annotatio mới thứ hai là @PrimaryKeyJoinColumn (5), chọn chiến 
lược shared primary key mà bạn muốn ánh xạ. Đây là một ánh xạ one-to-one chiến lược shared primary key unidirectional,
từ User đến Address.

Switch optional=false (4) xác định rằng một User phải có một shippingAddress. Mô hình cơ sở dữ liệu được tạo ra bởi
Hibernate phản ánh điều này với một ràng buộc khóa ngoại. Khóa chính của bảng USERS cũng có một ràng buộc khóa ngoại
liên quan đến khóa chính của bảng ADDRESS. Xem các bảng trong hình 8.2.

PATH: /examples/src/test/java/org/jpwh/test/associations/
OneToOneSharedPrimaryKey.java

Address someAddress =
            new Address("Some Street 123", "12345", "Some City");

em.persist(someAddress);

User someUser = new User(someAddress.getId(), "johndoe");
someUser.setShippingAddress(someAddress);
em.persist(someUser);

Sau khi lưu trữ Adress, bạn lấy giá trị khóa chính được tạo ra của nó và đặt nó vào User trước khi lưu trữ nó.
Dòng cuối cùng của ví dụ này là tùy chọn: mã của bạn hiện tại mong đợi một giá trị khi gọi someUser.getShippingAddress(),
vì vậy bạn nên đặt nó. Hibernate sẽ không thông báo lỗi nếu bạn quên bước cuối cùng này.
Có ba vấn đề với ánh xạ và mã:

1. Bạn phải nhớ rằng Adress phải được lưu trước và sau đó lấy giá trị khóa chính của nó sau cuộc gọi persist().
Điều này chỉ có thể xảy ra nếu thực thể Adress có một bộ tạo khóa chính tạo ra giá trị trước khi INSERT, như chúng ta đã
thảo luận trong phần 4.2.5. Nếu không, someAddress.getId() sẽ trả về null và bạn không thể thiết lập giá trị khóa chính
của User một cách thủ công.

2. Lazy loading với proxies chỉ hoạt động nếu mối association is non-optional. Điều này thường là một bất ngờ cho các
nhà phát triển mới với JPA. Giá trị mặc định cho @OneToOne là FetchType.EAGER: khi Hibernate tải một User, nó tải
shippingAddress ngay lập tức. Mặt tư duy, Lazy loading với proxies chỉ có ý nghĩa khi Hibernate biết rằng có một
shippingAddress liên quan. Nếu thuộc tính có thể là null, Hibernate sẽ phải kiểm tra trong cơ sở dữ liệu xem giá trị
thuộc tính có NULL không bằng cách truy vấn bảng ADDRESS. Nếu bạn phải kiểm tra cơ sở dữ liệu, bạn có thể tải giá trị
ngay lập tức, vì không có lợi ích nào trong việc sử dụng một proxy.

3. Mối quan hệ one-to-one này là unidirectional; đôi khi bạn cần bidirectional.

Vấn đề đầu tiên không có giải pháp khác, và đó là một trong những lý do bạn nên `luôn` ưu tiên các `bộ tạo khóa chính` 
có khả năng tạo giá trị trước bất kỳ SQL INSERT nào.

Một mối quan hệ @OneToOne(optional=true) không hỗ trợ Lazy loading với proxies. Điều này thích hợp với quy định JPA. 
FetchType.LAZY chỉ là một gợi ý cho cung cấp lưu trữ, không phải là yêu cầu. Bạn có thể có Lazy loading cho @OneToOne 
có thể null bằng cách sử dụng tạo bytecode, như chúng tôi sẽ instance trong phần 12.1.3.

Về vấn đề cuối cùng, nếu bạn làm cho mối quan hệ là bidirectional, bạn cũng có thể sử dụng một bộ tạo khóa chính đặc biệt
của Hibernate để hỗ trợ việc gán giá trị khóa chính.


[8.1.2] The foreign primary key generator

Một ánh xạ bidirectional luôn yêu cầu một phía được gắn với mappedBy.
Ở đây, hãy chọn phía User (đây là vấn đề về sở thích và có lẽ là những yêu cầu thứ yếu khác):

PATH: /model/src/main/java/org/jpwh/model/associations/onetoone/
foreigngenerator/User.java


@Entity
@Table(name = "USERS")
public class User {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @OneToOne(
        mappedBy = "user",
        cascade = CascadeType.PERSIST
    )
    protected Address shippingAddress;
    // ...
}

So sánh với ánh xạ trước đó: bạn thêm tùy chọn `mappedBy`, thông báo cho Hibernate rằng các chi tiết cấp thấp hơn được ánh 
xạ bởi "thuộc tính ở phía bên kia", có tên là user. Như một tiện ích, bạn bật CascadeType.PERSIST; tính chất lan truyền persistence 
sẽ làm cho việc lưu các instance theo đúng thứ tự dễ dàng hơn. Khi bạn làm cho User trở nên persistent, Hibernate sẽ làm
cho shippingAddress persistent và tự động tạo ra identifier for primary key.

Tiếp theo, hãy xem xét "phía bên kia": Address.

Listing 8.3 Address has the special foreign key generator
PATH: /model/src/main/java/org/jpwh/model/associations/onetoone/
foreigngenerator/Address.java

@Entity
public class Address {
    @Id
    @GeneratedValue(generator = "addressKeyGenerator")      // [1] Xác định trình tạo khóa chính
    @org.hibernate.annotations.GenericGenerator(
        name = "addressKeyGenerator",
        strategy = "foreign",
        parameters =
            @org.hibernate.annotations.Parameter(
                name = "property", value = "user"
        )
    )
    protected Long id;

    @OneToOne(optional = false)     // [2] Create foreign key constrants
    @PrimaryKeyJoinColumn           // [3] Address must have a reference to a User
    protected User user;

    protected Address() {
    }

    public Address(User user) {
        this.user = user;
    }

    public Address(User user, String street, String zipcode, String city) {
        this.user = user;
        this.street = street;
        this.zipcode = zipcode;
        this.city = city;
    }
    // ...
}

Đó là khá nhiều mã mới. Hãy bắt đầu với thuộc tính định danh sau đó là mối quan hệ one-to-one.
[Hibernate Feature]

@GenericGenerator trên thuộc tính định danh [1] định nghĩa một trình tạo giá trị khóa chính đặc biệt với chiến lược `foreign` 
chỉ có sẵn trong Hibernate. Chúng ta không đề cập đến trình tạo này trong phần tổng quan ở phần 4.2.5; mối quan hệ one-to-one 
sử dụng chung khóa chính là trường hợp duy nhất của nó. Khi bạn lưu trữ một instance của Address, trình tạo đặc biệt này sẽ 
lấy giá trị của thuộc tính user và sử dụng giá trị định danh của instance của thực thể tham chiếu, User.

Hãy tiếp tục với ánh xạ @OneToOne [2]. Thuộc tính user được đánh dấu là một mối quan hệ thực thể có chung khóa chính bằng 
chú thích @PrimaryKeyJoinColumn [3]. Nó được thiết lập với optional=false, vì vậy một Address phải có một tham chiếu 
đến User. Các public constructor của Address [4] hiện tại yêu cầu một instance User. Ràng buộc khóa ngoại phản ánh
optional=false hiện nay nằm trên cột khóa chính của bảng ADDRESS, như bạn có thể thấy trong lược đồ trong hình 8.3.

Bạn không cần gọi someAddress.getId() hoặc someUser.getId() trong đoạn mã của bạn nữa. Lưu trữ dữ liệu trở nên đơn giản hơn:

PATH: /examples/src/test/java/org/jpwh/test/associations/
OneToOneForeignGenerator.java

User someUser = new User("johndoe");
Address someAddress = new Address(someUser, "Some Street 123", "12345", "Some City");
someUser.setShippingAddress(someAddress);
em.persist(someUser);

Đừng quên rằng bạn phải liên kết cả hai phía của mối quan hệ thực thể hai chiều. Lưu ý rằng với ánh xạ này, bạn sẽ không
có lazy loading cho User#shippingAddress (nó là optional/nullable), nhưng bạn có thể tải Address#user khi cần thông qua
proxy (nó là non-optional).

Mối quan hệ một-một chia sẻ khóa chính chung là khá hiếm gặp. Thay vào đó, bạn thường sẽ ánh xạ một mối quan hệ "one-to-one"
với một cột khóa ngoại và ràng buộc duy nhất (unique constraint).

[8.1.3] Using a foreign key join column

Thay vì sharing a primary key (chia sẻ một khóa chính), hai hàng có thể có một mối quan hệ dựa trên một cột khóa ngoại
bổ sung đơn giản. Một bảng có một cột khóa ngoại tham chiếu đến khóa chính của bảng liên quan.
(Nguồn và đích của ràng buộc khóa ngoại này thậm chí có thể là cùng một bảng: chúng ta gọi đây là một mối quan hệ
tự tham chiếu.)

Hãy thay đổi ánh xạ cho User#shippingAddress. Thay vì sử dụng khóa chính chung, bạn bây giờ thêm một cột SHIPPINGADDRESS_ID
vào bảng USERS. Ngoài ra, cột này có ràng buộc UNIQUE, vì vậy không có hai người dùng nào có thể tham chiếu đến cùng địa chỉ
giao hàng. Hãy xem lược đồ trong hình 8.4.

Address là một lớp thực thể thông thường, tương tự như lớp thực thể đầu tiên mà chúng tôi đã hiển thị trong chương này
trong danh sách 8.1. Lớp thực thể User có thuộc tính shippingAddress, thực hiện mối quan hệ một chiều như sau:

PATH: /model/src/main/java/org/jpwh/model/associations/onetoone/foreignkey/
User.java

@Entity
@Table(name = "USERS")
public class User {
    @Id
    @GeneratedValue(generator = Constants.ID_GENERATOR)
    protected Long id;

    @OneToOne(
        fetch = FetchType.LAZY,
        optional = false,
        cascade = CascadeType.PERSIST
    )
    @JoinColumn(unique = true)      // Defaults to SHIPPINGADDRESS_ID
    protected Address shippingAddress;
    // ...
}

Bạn không cần bất kỳ identifier generator đặc biệt nào hoặc gán khóa chính; thay vì sử dụng @PrimaryKeyJoinColumn, 
bạn áp dụng @JoinColumn thông thường. Nếu bạn quen thuộc hơn với SQL hơn là JPA, việc nghĩ "cột khóa ngoại" mỗi khi bạn 
thấy @JoinColumn trong ánh xạ sẽ giúp bạn.

Bạn nên bật lazy loading cho mối quan hệ này. Khác với việc sử dụng khóa chính chung, bạn không gặp vấn đề với lazy loading 
ở đây: Khi một hàng trong bảng USERS đã được nạp, nó chứa giá trị của cột SHIPPINGADDRESS_ID. Do đó, Hibernate biết liệu 
một hàng trong bảng ADDRESS có tồn tại hay không, và một proxy có thể được sử dụng để nạp instance Address theo yêu cầu.

Tuy nhiên, trong ánh xạ, bạn đặt optional=false, vì vậy người dùng phải có địa chỉ giao hàng. Điều này sẽ không ảnh hưởng 
đến hành vi nạp dữ liệu nhưng là một hậu quả logic của thiết lập unique=true trên @JoinColumn. Thiết lập này thêm ràng 
buộc duy nhất vào lược đồ SQL được tạo ra. Nếu các giá trị của cột SHIPPINGADDRESS_ID phải là duy nhất cho tất cả người dùng, 
chỉ có thể có một người dùng "không có địa chỉ giao hàng". Do đó, các cột duy nhất có thể là null thường không có ý nghĩa. 

Việc tạo, liên kết và lưu trữ các instance là đơn giản:

PATH: /examples/src/test/java/org/jpwh/test/associations/
OneToOneForeignKey.java

User someUser = new User("johndoe");
Address someAddress = new Address("Some Street 123", "12345", "Some City");
someUser.setShippingAddress(someAddress);
em.persist(someUser);

Bạn đã hoàn thành hai ánh xạ mối quan hệ one-to-one cơ bản: cái đầu tiên sử dụng khóa chính chung, cái thứ hai sử dụng 
tham chiếu khóa ngoại và ràng buộc cột duy nhất. Tùy chọn cuối cùng mà chúng tôi muốn thảo luận là một chút kỳ cục hơn: 
ánh xạ mối quan hệ one-to-one với sự trợ giúp của một bảng bổ sung.

8.1.4 Using a join table

Bạn có thể đã nhận ra rằng các cột có thể là null có thể gây ra vấn đề. Đôi khi, một giải pháp tốt hơn cho các giá trị optional
là một bảng trung gian (intermediate table), chứa một hàng nếu có một liên kết hoặc không chứa nếu không có.

Hãy xem xét thực thể Shipment trong ứng dụng CaveatEmptor và thảo luận về mục đích của nó. Trong CaveatEmptor, người bán
và người mua tương tác bằng cách bắt đầu và đấu giá sản phẩm. Vận chuyển hàng hóa dường như nằm ngoài phạm vi của ứng dụng;
người bán và người mua đồng ý về phương thức vận chuyển và thanh toán sau khi phiên đấu giá kết thúc. Họ có thể làm điều này
offline, ngoài CaveatEmptor.

Tuy nhiên, bạn có thể cung cấp dịch vụ escrow trong CaveatEmptor. Người bán sẽ sử dụng dịch vụ này để tạo một lô hàng
có thể theo dõi sau khi phiên đấu giá kết thúc. Người mua sẽ thanh toán giá của mặt hàng đấu giá cho một người quản lý
tài sản (bạn), và bạn sẽ thông báo cho người bán biết rằng tiền đã sẵn sàng. Khi lô hàng đến và người mua chấp nhận nó,
bạn sẽ chuyển tiền cho người bán.

Nếu bạn đã từng tham gia vào một phiên đấu giá trực tuyến có giá trị đáng kể, bạn có thể đã sử dụng dịch vụ escrow như vậy.
Tuy nhiên, trong CaveatEmptor, bạn muốn hơn thế: không chỉ cung cấp dịch vụ tin cậy cho các phiên đấu giá đã hoàn thành,
mà bạn cũng cho phép người dùng tạo lô hàng có thể theo dõi và tin cậy cho bất kỳ giao dịch nào họ thực hiện ngoài phiên
đấu giá, ngoài CaveatEmptor.

Tình huống này đòi hỏi một thực thể Shipment (Lô hàng) với mối quan hệ optional one-to-one đến thực thể Item (Mặt hàng).
Hãy xem class diagram cho mô hình miền này trong hình 8.5.
LƯU Ý: Chúng tôi đã ngắn gọn xem xét việc bỏ ví dụ CaveatEmptor cho phần này, vì chúng tôi không tìm thấy một tình huống
tự nhiên nào đòi hỏi mối quan hệ optional one-to-one. Nếu ví dụ về dịch vụ escrow này dường như được tạo ra, hãy xem xét
vấn đề tương đương của việc phân công nhân viên vào các máy trạm làm việc. Đây cũng là một mối quan hệ optional one-to-one.

Trong lược đồ cơ sở dữ liệu, bạn thêm một bảng liên kết trung gian (intermediate link table) có tên ITEM_SHIPMENT.
Một hàng trong bảng này đại diện cho một lô hàng được tạo ra trong ngữ cảnh của một phiên đấu giá.
Hình 8.6 hiển thị các bảng.

Lưu ý cách lược đồ buộc tính duy nhất và mối quan hệ one-to-one: khóa chính của ITEM_SHIPMENT là cột SHIPMENT_ID,
và cột ITEM_ID là duy nhất. Do đó, một mặt hàng chỉ có thể thuộc về một lô hàng. Tất nhiên, điều đó cũng có nghĩa rằng
một lô hàng chỉ có thể chứa một mặt hàng.

Bạn ánh xạ mô hình này bằng cách sử dụng chú thích @OneToOne trong lớp Shipment entity:

PATH: /model/src/main/java/org/jpwh/model/associations/onetoone/jointable/
Shipment.java

@Entity
public class Shipment {
    @OneToOne(fetch = FetchType.LAZY)
    @JoinTable(
        name = "ITEM_SHIPMENT",             <- Required!
        joinColumns = @JoinColumn(name = "SHIPMENT_ID"),    <- Defaults to ID
        inverseJoinColumns = @JoinColumn(name = "ITEM_ID",  <- Defaults to AUCTION_ID
                                        nullable = false,
                                        unique = true)
    )
    protected Item auction;

    public Shipment() {
    }

    public Shipment(Item auction) {
        this.auction = auction;
    }
    // ...
}

Lazy loading đã được bật, với một điểm khác biệt: khi Hibernate nạp một Shipment, nó truy vấn cả bảng liên kết
SHIPMENT và ITEM_SHIPMENT. Hibernate phải biết liệu có một liên kết đến một Item có sẵn trước khi nó có thể sử dụng một proxy.
Điều đó được thực hiện trong một truy vấn SQL ngoại vi, vì vậy bạn sẽ không thấy bất kỳ câu lệnh SQL nào thêm vào.
Nếu có một hàng trong ITEM_SHIPMENT, Hibernate sử dụng một Item placeholder.

Hibernate sử dụng một Item placeholder đề cập đến việc Hibernate tạo ra một đối tượng proxy để đại diện cho một (Item)
trong trường hợp lazy loading. Điều này xảy ra khi bạn cố gắng truy cập thông tin của một Item từ một đối tượng Shipment
mà bạn đã nạp lười (lazy loaded).

Chú thích @JoinTable là mới; bạn luôn phải chỉ định tên của bảng liên kết trung gian. Ánh xạ này hiệu quả ẩn bảng liên kết;
không có lớp Java tương ứng. Chú thích xác định tên cột của bảng ITEM_SHIPMENT, và Hibernate tạo ra trong lược đồ
ràng buộc UNIQUE trên cột ITEM_ID. Hibernate cũng tạo ra các ràng buộc khóa ngoại thích hợp trên các cột của bảng liên kết.

Ở đây, bạn lưu trữ một Shipment mà không có Items và một Shipment khác được liên kết với một Item duy nhất:

PATH: /examples/src/test/java/org/jpwh/test/associations/OneToOneJoinTable.java

Shipment someShipment = new Shipment();
em.persist(someShipment);
Item someItem = new Item("Some Item");
em.persist(someItem);
Shipment auctionShipment = new Shipment(someItem);
em.persist(auctionShipment);

Đây hoàn thành cuộc thảo luận của chúng ta về ánh xạ mối quan hệ one-to-one. Để tổng kết, hãy sử dụng một mối quan hệ
khóa chính chung nếu một trong hai thực thể luôn được lưu trữ trước thực thể còn lại và có thể hoạt động như nguồn khóa chính.

Sử dụng mối quan hệ khóa ngoại trong tất cả các trường hợp còn lại và một bảng liên kết trung gian ẩn khi mối quan hệ
one-to-one của bạn là tùy chọn.

Bây giờ chúng tôi tập trung vào mối quan hệ số nhiều, hoặc nhiều giá trị, bắt đầu bằng việc khám phá một số tùy chọn nâng cao
cho mối quan hệ one-to-many.

