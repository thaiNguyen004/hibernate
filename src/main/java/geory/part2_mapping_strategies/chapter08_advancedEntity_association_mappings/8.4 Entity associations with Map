Các key và value trong map có thể là tham chiếu đến các thực thể khác, cung cấp một chiến lược khác để ánh xạ các mối quan hệ
many-to-many và ternary association. Trước hết, hãy giả định rằng chỉ có value của mỗi mục trong map là một tham chiếu
đến một thực thể khác.

[8.4.1] One-to-many with a property key

Nếu value của mỗi mục trong map là một tham chiếu đến một thực thể khác, bạn có một mối quan hệ thực thể one-to-many.
Khóa của map là kiểu cơ bản: ví dụ, một value Long. Một ví dụ về cấu trúc này sẽ là thực thể Item với một map các thực thể Bid,
trong đó mỗi mục của map là một cặp gồm Bid identifier và tham chiếu đến một thực thể Bid. Khi bạn lặp qua someItem.getBids(),
bạn đang lặp qua các mục trong map có dạng (1, <tham chiếu đến Bid có khóa chính 1>), (2, <tham chiếu đến Bid có khóa chính 2>),
và cứ thế.

PATH: /examples/src/test/java/org/jpwh/test/associations/MapsMapKey.java

Item item = em.find(Item.class, ITEM_ID);
for (Map.Entry<Long, Bid> entry : item.getBids().entrySet()) {
    assertEquals(entry.getKey(), entry.getValue().getId());
}

Các bảng cơ sở dữ liệu cơ bản cho ánh xạ này không có gì đặc biệt; bạn có một bảng ITEM và một bảng BID, với một cột 
khóa ngoại ITEM_ID trong bảng BID. Đây là cùng một cấu trúc như trong hình 7.14 cho ánh xạ one-to-many/many-to-one 
với một collection thông thường thay vì một Map. Động cơ ở đây là biểu diễn dữ liệu trong ứng dụng một cách khác biệt hơi một chút.
Trong lớp Item, hãy bao gồm một thuộc tính Map có tên là bids.

PATH: /model/src/main/java/org/jpwh/model/associations/maps/mapkey/
Item.java

@Entity
public class Item {
    @MapKey(name = "id")
    @OneToMany(mappedBy = "item")
    protected Map<Long, Bid> bids = new HashMap<>();
    // ...
}

Mới ở đây là chú thích @MapKey. Nó ánh xạ một thuộc tính của thực thể mục tiêu, trong trường hợp này là thực thể Bid, 
làm key của map. Mặc định nếu bạn bỏ qua thuộc tính name là thuộc tính định danh của thực thể mục tiêu, vì vậy tùy chọn
name ở đây là dư thừa.
Bởi vì các khóa của một map tạo thành một Set, bạn nên mong đợi giá trị là duy nhất cho một map cụ thể. Điều này đúng cho
các khóa chính của Bid nhưng có thể không đúng cho bất kỳ thuộc tính nào khác của Bid. Việc đảm bảo rằng thuộc tính được
chọn có giá trị duy nhất là trách nhiệm của bạn - Hibernate sẽ không kiểm tra điều này.
Use case chính và hiếm gặp cho kỹ thuật ánh xạ này là mong muốn lặp qua các mục trong map với một thuộc tính nào đó của
entity value entry như một entry key, có thể vì nó thuận tiện cho cách bạn muốn hiển thị dữ liệu. Một tình huống phổ biến
hơn là một map nằm ở giữa một mối quan hệ ternary.

8.4.2 Key/Value mối quan hệ ternary 
Có thể bạn đã hơi chán ngấy tới lúc này, nhưng chúng tôi hứa rằng đây là lần cuối cùng chúng tôi sẽ giới thiệu một cách khác 
để ánh xạ mối quan hệ giữa Category và Item. Trước đây, trong phần 8.3.3, bạn đã sử dụng một thành phần Embeddable CategorizedItem 
để biểu diễn liên kết. Ở đây, chúng tôi cho thấy một biểu diễn về mối quan hệ bằng một Map, thay vì một lớp Java bổ sung. 
Khóa của mỗi mục trong map là một `Item` và giá trị liên quan là `User` đã thêm Item vào Category, như được hiển thị trong hình 8.18.
Bảng liên kết trong cơ sở dữ liệu, như bạn có thể thấy trong hình 8.19, có ba cột: CATEGORY_ID, ITEM_ID và USER_ID.
map này thuộc sở hữu của thực thể Category:

PATH: /model/src/main/java/org/jpwh/model/associations/maps/ternary/
Category.java

@Entity
public class Category {
    @ManyToMany(cascade = CascadeType.PERSIST)
    @MapKeyJoinColumn(name = "ITEM_ID")
    @JoinTable(
        name = "CATEGORY_ITEM",
        joinColumns = @JoinColumn(name = "CATEGORY_ID"),
        inverseJoinColumns = @JoinColumn(name = "USER_ID")
    )
    protected Map<Item, User> itemAddedBy = new HashMap<>();
    // ...
}
Annotation @MapKeyJoinColumn là optional; Hibernate sẽ mặc định sử dụng tên cột ITEMADDEDBY_KEY cho cột tham chiếu/khóa ngoại 
trỏ đến bảng ITEM.
Để tạo một liên kết giữa tất cả ba thực thể, tất cả các thể hiện phải đã ở trong trạng thái persistent (đã được lưu trong cơ sở dữ liệu)
và sau đó đưa vào trong map:

PATH: /examples/src/test/java/org/jpwh/test/associations/MapsTernary.java

someCategory.getItemAddedBy().put(someItem, someUser);
someCategory.getItemAddedBy().put(otherItem, someUser);
otherCategory.getItemAddedBy().put(someItem, someUser);

Để loại bỏ liên kết, bạn chỉ cần loại bỏ mục khỏi map. Điều này là một API Java tiện lợi để quản lý một mối quan hệ
phức tạp, ẩn đi một bảng liên kết cơ sở dữ liệu có ba cột.
Nhưng hãy nhớ rằng trong thực tế, các bảng liên kết thường có thêm các cột, và việc thay đổi toàn bộ mã ứng dụng Java
sau này sẽ tốn kém nếu bạn phụ thuộc vào một API Map. Trước đây, chúng ta có một cột ADDEDON với một dấu thời gian khi
liên kết được tạo, nhưng chúng ta đã phải loại bỏ nó cho ánh xạ này.

