Trong phần này, bạn sẽ viết ứng dụng Hibernate đầu tiên của mình, lưu trữ một thông điệp "Hello World" trong cơ sở dữ liệu
và sau đó truy xuất nó. Hãy bắt đầu bằng việc cài đặt và cấu hình Hibernate.

Chúng ta sử dụng Apache Maven là công cụ xây dựng dự án, như chúng ta đã làm cho tất cả các ví dụ trong cuốn sách này.
Để khai báo Dependency vào Hibernate:

<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-entitymanager</artifactId>
    <version>5.0.0.Final</version>
</dependency>

Mô-đun `hibernate-entitymanager` bao gồm các sự phụ thuộc chuyển tiếp vào các mô-đun khác mà bạn cần, chẳng hạn như
`hibernate-core` và các đối tượng giao diện Java Persistence (JPA) stubs.

Điểm bắt đầu của bạn trong JPA là persistence unit. Một persistence unit là một sự kết hợp giữa các ánh xạ lớp mô hình
miền của bạn với một kết nối cơ sở dữ liệu, cộng với một số cài đặt cấu hình khác. Mọi ứng dụng ít nhất cần một persistence unit;
một số ứng dụng có thể có nhiều persistence unit nếu chúng tương tác với nhiều cơ sở dữ liệu (logic hoặc thực tế).
Vì vậy, bước đầu tiên của bạn là thiết lập một persistence unit trong cấu hình ứng dụng của bạn.



[2.2.1] Configuration persistence unit
<persistence xmlns="http://java.sun.com/xml/ns/persistence">
    <!--Configure persistence unit-->
    <persistence-unit name="HelloWorldPU"> [1]
        <!--Database connection-->
        <jta-data-source>myDS</jta-data-source> [2]

        <class>org.jpwh.model.helloworld.Message</class> [3]

        <exclude-unlisted-classes>true</exclude-unlisted-classes> [4]

        <properties> [5]
            <!--Database connection-->
            <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/HelloWorld"/>
            <property name="javax.persistence.jdbc.user" value="root"/>
            <property name="javax.persistence.jdbc.password" value="123456"/>

            <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/> [6]
            <property name="hibernate.format_sql" value="true"/> [7]
            <property name="hibernate.use_sql_comments" value="true"/>
        </properties>
    </persistence-unit>
</persistence>

1. Tệp persistence.xml cấu hình ít nhất một persistence unit; mỗi đơn vị phải có một tên duy nhất.

2. Mỗi persistence unit phải có một kết nối cơ sở dữ liệu. Ở đây, bạn giao việc cho một java.sql.DataSource hiện có.
Hibernate sẽ tìm nguồn dữ liệu bằng tên thông qua việc tìm kiếm JNDI khi khởi động.

3. Một persistence unit có các lớp cơ sở dữ liệu liên tục (đã ánh xạ). Bạn liệt kê chúng ở đây.

4. Hibernate có thể quét classpath của bạn để tìm các lớp đã ánh xạ và tự động thêm chúng vào persistence unit của bạn.
Thiết lập này tắt tính năng đó.

5. Các tùy chọn tiêu chuẩn hoặc cụ thể của nhà cung cấp có thể được thiết lập như các thuộc tính trên persistence unit.
Bất kỳ thuộc tính tiêu chuẩn nào sẽ có tiền tố `javax.persistence`, trong khi các cài đặt của Hibernate sử dụng `hibernate`.

6. Bộ máy ảo JPA nên xóa và tái tạo cấu trúc SQL trong cơ sở dữ liệu tự động khi khởi động. Điều này lý tưởng cho việc
kiểm tra tự động, khi bạn muốn làm việc với một cơ sở dữ liệu sạch sẽ cho mỗi lần chạy kiểm tra.

7. Khi in SQL trong các logs, hãy để Hibernate định dạng SQL một cách đẹp và thêm các chú thích vào chuỗi SQL để bạn biết
tại sao Hibernate đã thực thi câu lệnh SQL đó. Hầu hết các ứng dụng cần một bể kết nối cơ sở dữ liệu, với một kích thước
cụ thể và các ngưỡng tối ưu cho môi trường. Bạn cũng muốn cung cấp thông tin về máy chủ DBMS và thông tin đăng nhập cho
các kết nối cơ sở dữ liệu của bạn.

Ghi log các câu lệnh SQL được thực thi bởi Hibernate là một công cụ vô giá trong quá trình tối ưu hóa. Để ghi log SQL,
trong tệp `persistence.xml`, bạn cần thiết lập các thuộc tính `hibernate.format_sql` và `hibernate.use_sql_comments` thành `true`.
Điều này sẽ làm cho Hibernate định dạng các câu lệnh SQL với các chú thích về nguyên nhân. Sau đó, trong cấu hình ghi log
của bạn (tùy thuộc vào triển khai ghi log bạn chọn), hãy thiết lập các danh mục (categories) `org.hibernate.SQL` và
`org.hibernate.type.descriptor.sql.BasicBinder` thành mức debug tốt nhất. Sau đó, bạn sẽ thấy tất cả các câu lệnh SQL được
thực thi bởi Hibernate trong đầu ra log, bao gồm các giá trị tham số đã được gán của các câu lệnh prepared statements.

Đối với ứng dụng "Hello World", bạn giao việc xử lý kết nối cơ sở dữ liệu cho một nhà cung cấp `Java Transaction API (JTA)`,
dự án mã nguồn mở `Bitronix`.

Bitronix cung cấp cơ chế connection pooling thông qua một java.sql.DataSource quản lý và javax.transaction.UserTransaction
tiêu chuẩn trong bất kỳ môi trường Java SE nào.
Bitronix liên kết các đối tượng này vào JNDI, và Hibernate tương tác tự động với Bitronix thông qua các tìm kiếm JNDI.
Thiết lập Bitronix một cách chi tiết nằm ngoài phạm vi của cuốn sách này; bạn có thể tìm configuration cho các ví dụ của
chúng tôi trong org.jpwh.env.TransactionManagerSetup.

Trong ứng dụng "Hello World", bạn muốn lưu trữ các thông điệp trong cơ sở dữ liệu và tải chúng từ cơ sở dữ liệu.
Ứng dụng Hibernate định nghĩa các lớp persistent (persistent classes) được ánh xạ vào các bảng cơ sở dữ liệu.
Bạn định nghĩa các lớp này dựa trên phân tích của bạn về lĩnh vực kinh doanh; do đó, chúng là một
domain model. Ví dụ này bao gồm một lớp và ánh xạ của nó.

Hãy xem xét một class persistent đơn giản trông như thế nào, cách ánh xạ được tạo và một số công việc bạn có thể thực hiện
với các instance của class persistent trong Hibernate.


[2.2.2] Writing a persistent class
Mục tiêu của ví dụ này là lưu trữ các tin nhắn trong cơ sở dữ liệu và truy xuất chúng để hiển thị. Ứng dụng này có một 
persistent class đơn giản, Message:
PATH: /model/src/main/java/org/jpwh/model/helloworld/Message.java

package org.jpwh.model.helloworld;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity // [1] @Entity mapping
public class Message {
    @Id // [2] @Id required
    @GeneratedValue // Enables auto ID generation
    private Long id;

    private String text; // [4] Map attribute
    public String getText() {
        return text;
    }

    public void setText (String text) {
        this.text = text;
    }
}

1. Mọi lớp thực thể có tính persistence (persistent entity class) phải có ít nhất chú thích @Entity. 
Hibernate sẽ ánh xạ lớp này thành một bảng được gọi là "MESSAGE".

2. Mọi lớp thực thể có tính persistence phải có một thuộc tính định danh được chú thích bằng @Id.
Hibernate sẽ ánh xạ thuộc tính này thành một cột có tên là "ID".

3. Người nào đó phải tạo ra giá trị định danh; chú thích này cho phép tự động tạo ra các ID.

4. Thông thường, bạn thực hiện các thuộc tính thông thường của một lớp có tính persistence bằng cách sử dụng các
trường riêng tư hoặc bảo vệ và các cặp phương thức getter/setter công khai. Hibernate sẽ ánh xạ thuộc tính này
thành một cột có tên là "TEXT".

Thuộc tính định danh của một lớp có tính persistence cho phép ứng dụng truy cập vào định danh của cơ sở dữ liệu -
giá trị khóa chính - của một đối tượng có tính persistence. Nếu hai thể hiện của lớp Message có cùng giá trị định danh,
chúng đại diện cho cùng một dòng trong cơ sở dữ liệu.

Ví dụ này sử dụng kiểu dữ liệu Long cho thuộc tính định danh, nhưng điều này không bắt buộc. Hibernate cho phép gần
như bất kỳ kiểu dữ liệu nào cho thuộc tính định danh, như bạn sẽ thấy sau này.

Bạn có thể đã chú ý rằng thuộc tính "text" của lớp Message có các phương thức truy cập thuộc tính kiểu JavaBeans.
Lớp này cũng có một constructor (mặc định) không có tham số. Các lớp có tính persistence mà chúng tôi hiển thị trong
ví dụ thường sẽ trông giống như vậy. Lưu ý rằng bạn không cần phải triển khai bất kỳ giao diện cụ thể nào hoặc mở rộng
bất kỳ lớp cha đặc biệt nào.

Các thể hiện của lớp Message có thể được quản lý (trở nên có tính persistence) bởi Hibernate, nhưng không nhất thiết
phải làm như vậy. Bởi vì đối tượng Message không triển khai bất kỳ giao diện hoặc lớp cụ thể nào liên quan đến tính
persistence, bạn có thể sử dụng nó giống như bất kỳ lớp Java nào khác:

Message msg = new Message();
msg.setText("Hello!");
System.out.println(msg.getText());

Dường như chúng tôi đang cố gắng làm dễ thương ở đây; thực tế, chúng tôi đang thể hiện một tính năng quan trọng
phân biệt Hibernate khỏi một số giải pháp tích hợp dữ liệu khác. Bạn có thể sử dụng lớp có tính persistence trong bất
kỳ ngữ cảnh thực thi nào - không cần container đặc biệt.

Bạn không cần phải sử dụng chú thích để ánh xạ một lớp có tính persistence. Sau này, chúng tôi sẽ chỉ cho bạn các tùy
chọn ánh xạ khác, chẳng hạn như tệp ánh xạ JPA orm.xml và tệp ánh xạ native hbm.xml, và khi nào chúng là một giải pháp
tốt hơn so với các chú thích trong mã nguồn.

Lớp Message đã sẵn sàng. Bạn có thể lưu các thể hiện trong cơ sở dữ liệu của bạn và viết các truy vấn để nạp chúng lại
vào bộ nhớ ứng dụng.


[2.2.3] Storing and loading messages

Điều mà bạn thực sự muốn thấy ở đây là Hibernate, vì vậy hãy lưu một thông điệp mới vào cơ sở dữ liệu.
Đầu tiên, bạn cần một EntityManagerFactory để trò chuyện với cơ sở dữ liệu của bạn.
API này đại diện cho persistent unit của bạn; hầu hết các ứng dụng có một EntityManagerFactory cho một persistence unit
đã được cấu hình:

PATH: /examples/src/est/java/org/jpwh/helloworld/HelloWorldJPA.java
EntityManagerFactory emf =
            Persistence.createEntityManagerFactory("HelloWorldPU");

Khi ứng dụng của bạn bắt đầu, nó nên tạo EntityManagerFactory; factory này là thread-safe, và tất cả mã trong
ứng dụng của bạn mà truy cập vào cơ sở dữ liệu nên chia sẻ nó.

Bây giờ, bạn có thể làm việc với cơ sở dữ liệu trong một unit được xác định -
một transaction - và lưu trữ một Message.

