Trong phần 3.1.1, chúng ta đã giới thiệu việc đóng gói mã persistencce trong một class riêng biệt. Mặc dù JPA đã cung cấp
một mức độ trừu tượng nhất định, nhưng có một số lý do mà bạn nên xem xét việc che giấu các cuộc gọi JPA sau một facade:

- Persistence layer tùy chỉnh có thể cung cấp một mức độ trừu tượng cao hơn cho các hoạt động truy cập dữ liệu.
Thay vì các hoạt động CRUD cơ bản và truy vấn như mà EntityManager tiết lộ, bạn có thể tiết lộ các hoạt động ở mức cao
hơn, như các phương thức như getMaximumBid(Item i) và findItems(User soldBy). Trừu tượng này là lý do chính để tạo một
persistence layer trong các ứng dụng lớn: để hỗ trợ việc sử dụng lại các hoạt động truy cập dữ liệu giống nhau.

- Persistence layer có thể có một interface thông thường mà không tiết lộ chi tiết implementation. Nói cách khác, bạn có thể che
giấu việc bạn đang sử dụng Hibernate (hoặc Java Persistence) để thực hiện các hoạt động truy cập dữ liệu khỏi bất kỳ
client nào của persistence layer. Chúng tôi coi trọng khả năng di động của persistence layer là một vấn đề không quan trọng
vì các giải pháp toàn diện ORM như Hibernate đã cung cấp sự di động của cơ sở dữ liệu. Rất khó có khả năng bạn sẽ viết
lại persistence layer của mình với phần mềm khác trong tương lai mà vẫn không muốn thay đổi mã máy khách nào.
Hơn nữa, Java Persistence là một API tiêu chuẩn và hoàn toàn có thể di động; việc một ít tiết lộ nó đến các máy khách của
persistence layer không gây hại.

- Persistence layer có thể thống nhất các hoạt động truy cập dữ liệu. Mối quan tâm này liên quan đến tính di động, nhưng
từ một góc nhìn khác. Hãy tưởng tượng rằng bạn phải làm việc với mã truy cập dữ liệu kết hợp, chẳng hạn như các hoạt động
JPA và JDBC. Bằng cách thống nhất facade mà máy khách thấy và sử dụng, bạn có thể che giấu chi tiết implementation này khỏi máy khách.
Nếu bạn phải làm việc với các loại lưu trữ dữ liệu khác nhau, đây là một lý do hợp lệ để viết một persistence layer.

Nếu bạn coi xem tính di động và tính thống nhất là các hiệu ứng phụ của việc tạo một persistence layer, động viên chính
là đạt được một mức độ trừu tượng cao hơn và cải thiện tính bảo trì và khả năng sử dụng mã truy cập dữ liệu.
Đây là những lý do tốt, và chúng tôi khuyến khích bạn tạo một persistence layer với một facade thông thường trong tất cả
trừ các ứng dụng đơn giản nhất. Nhưng luôn xem xét việc sử dụng JPA trực tiếp mà không cần thêm bất kỳ lớp nào.
Hãy giữ nó đơn giản nhất có thể, và tạo một persistence layer thanh khiết trên cơ sở JPA khi bạn nhận ra bạn đang trùng lặp
các hoạt động truy vấn và truy cập dữ liệu giống nhau.

Có nhiều công cụ có sẵn tuyên bố giúp đơn giản hóa việc tạo persistence layer cho JPA hoặc Hibernate. Chúng tôi khuyến nghị
bạn thử làm việc mà không cần các công cụ như vậy trước hết, và chỉ đầu tư vào một sản phẩm khi bạn cần một tính năng cụ thể.
Hãy đặc biệt cẩn trọng với các công cụ tạo mã và truy vấn: những tuyên bố thường nghe được về giải pháp toàn diện cho mọi
vấn đề, trong dài hạn, có thể trở thành một hạn chế lớn và gánh nặng bảo trì. Có thể cũng ảnh hưởng lớn đến hiệu suất nếu
quá trình phát triển phụ thuộc vào việc chạy một công cụ tạo mã. Điều này cũng đúng cho các công cụ của Hibernate: ví dụ, nếu
bạn phải tạo mã nguồn của lớp thực thể từ một lược đồ SQL mỗi khi bạn thay đổi. Persistence layer là một phần quan trọng
của ứng dụng của bạn và bạn phải nhận thức về cam kết mà bạn đang thực hiện bằng cách giới thiệu các phụ thuộc thêm.
Bạn sẽ thấy trong chương này và chương tiếp theo cách tránh mã lặp đi lặp lại thường xuyên liên quan đến các thành phần
persistence layer mà không sử dụng bất kỳ công cụ bổ sung nào.

Có nhiều cách để thiết kế một facade persistence layer - một số ứng dụng nhỏ có một class DataAccess duy nhất; những người
khác kết hợp các hoạt động truy cập dữ liệu vào các lớp domain (mô hình Active Record, không được thảo luận trong cuốn sách này) -
nhưng chúng tôi ưa thích mô hình DAO.

18.1.1 A generic data access object pattern

Mô hình thiết kế DAO xuất phát từ Java Blueprints của Sun hơn 15 năm trước; nó đã có một lịch sử dài.
Một lớp DAO định nghĩa một interface cho các hoạt động liên quan đến sự tồn tại của một thực thể cụ thể;
nó khuyên bạn nên nhóm lại mã liên quan đến việc persistence của thực thể đó.
Do tuổi đời của nó, có nhiều biến thể của mô hình DAO. Cấu trúc cơ bản của thiết kế mà chúng tôi đề xuất được hiển
thị trong hình 18.1.

Chúng tôi đã thiết kế persistence layer với hai cấu trúc song song: interface ở một bên và các implementations ở bên kia.
Các hoạt động storage và retrieval thực thể cơ bản được nhóm lại trong một generic super-interfaca và một superclass
thực hiện những hoạt động này bằng một giải pháp lưu trữ cụ thể (sử dụng Hibernate).
Generic interface được extends bởi các interface dành cho các thực thể cụ thể cần các hoạt động truy cập dữ liệu liên quan
đến business. Một lần nữa, bạn có thể có một hoặc nhiều implementations của interface DAO của một thực thể.

Hãy xem nhanh một số interface và phương thức được hiển thị trong hình minh họa này. Có một loạt các phương thức
(tìm kiếm-finder). Thông thường, chúng trả về các thực thể managed(trong trạng thái persistent), nhưng cũng có thể trả
về các đối tượng truyền dữ liệu tùy ý như ItemBidSummary. Phương thức finder là vấn đề trùng lặp mã lớn nhất của bạn;
bạn có thể kết thúc với hàng chục nếu bạn không lập kế hoạch cẩn thận. Bước đầu tiên là cố gắng làm cho chúng càng tổng quát
càng tốt và di chuyển chúng lên trong cấu trúc, lý tưởng là vào interface cấp cao nhất. Hãy xem xét phương thức findByName()
trong ItemDAO: bạn có thể sẽ phải thêm nhiều tùy chọn tìm kiếm item sớm, hoặc bạn có thể muốn kết quả được sắp xếp trước bởi
cơ sở dữ liệu hoặc bạn có thể triển khai một loại tính năng phân trang nào đó. Chúng tôi sẽ giải thích thêm về điều này sau
và chỉ cho bạn một giải pháp tổng quát cho việc sắp xếp và phân trang trong phần 19.2.

Các phương thức được cung cấp bởi API DAO cho thấy rõ đây là một persistence layer quản lý trạng thái. Các phương thức như
makePersistent() và makeTransient() thay đổi trạng thái của một thực thể (hoặc trạng thái của nhiều thực thể cùng một lúc,
với kích hoạt lan truyền). Một máy khách có thể kỳ vọng rằng cập nhật được thực hiện tự động (được flush) bởi bộ động cơ
persistence khi một thực thể được sửa đổi (không có phương thức performUpdate()). Bạn sẽ viết một interface DAO hoàn toàn
khác nếu persistence layer của bạn dựa vào câu lệnh: ví dụ, nếu bạn không sử dụng Hibernate để triển khai nó, mà chỉ
sử dụng JDBC thuần túy.

Facade persistence layer mà chúng tôi giới thiệu ở đây không tiết lộ bất kỳ interface Hibernate hoặc Java Persistence nào
cho máy khách, vì vậy lý thuyết bạn có thể triển khai nó với bất kỳ phần mềm nào mà không cần thay đổi mã máy khách.
Bạn có thể không muốn hoặc cần tính di động persistence layer, như đã giải thích trước đây. Trong trường hợp đó, bạn nên
xem xét việc tiết lộ các interface Hibernate hoặc Java Persistence - ví dụ, bạn có thể cho phép máy khách truy cập JPA
CriteriaBuilder và sau đó có một phương thức generic findBy(CriteriaQuery). Quyết định này thuộc về bạn; bạn có thể quyết
định rằng việc tiết lộ interface Java Persistence là một sự lựa chọn an toàn hơn việc tiết lộ interface Hibernate.
Tuy nhiên, bạn nên biết rằng mặc dù có thể thay đổi implementation của persistence layer từ một nhà cung cấp JPA sang nhà 
cung cấp khác, nhưng gần như không thể viết lại một persistence layer dựa trên trạng thái bằng các câu lệnh JDBC thuần túy.

Tiếp theo, bạn triển khai các interface DAO.

18.1.2 Implementing the generic interface

Hãy tiếp tục với một implementation có thể của GenericDAO interface:

public abstract class GenericDAOImpl <T, ID extends Serializable>
        implements GenericDAO<T, ID>{

    @PersistenceContext
    protected EntityManager em;

    protected final Class<T> entityClass;

    protected GenericDAOImpl(Class<T> entityClass) {
        this.entityClass = entityClass;
    }

    public void setEntityManager(EntityManager em) {
        this.em = em;
    }
    //...
}

Generic implementation này cần hai thứ để hoạt động: một EntityManager và một lớp thực thể. Một lớp con phải cung cấp
lớp thực thể như một đối số của hàm tạo. Tuy nhiên, EntityManager có thể được cung cấp bằng cách sử dụng một container runtime
hiểu được chú thích tiêm @PersistenceContext (ví dụ, bất kỳ bộ chứa chuẩn Java EE nào) hoặc thông qua setEntityManager().

Tiếp theo, hãy xem các phương thức finder:

@Override
    public T findById(ID id) {
        return findById(id, LockModeType.NONE);
    }

    @Override
    public T findById(ID id, LockModeType lockModeType) {
        return em.find(entityClass, id, lockModeType);
    }

    @Override
    public T findReferenceById(ID id) {
        return em.getReference(entityClass, id);
    }

    @Override
    public List<T> findAll() {
        CriteriaQuery<T> c =
                em.getCriteriaBuilder().createQuery(entityClass);
        c.select(c.from(entityClass));
        return em.createQuery(c).getResultList();
    }

    @Override
    public Long getCount() {
        CriteriaQuery<Long> c =
                em.getCriteriaBuilder().createQuery(Long.class);
        c.select(em.getCriteriaBuilder().count(c.from(entityClass)));
        return em.createQuery(c).getSingleResult();
    }

Bạn có thể thấy cách mã sử dụng lớp thực thể để thực hiện các hoạt động truy vấn. Chúng tôi đã viết một số truy vấn
criteria đơn giản, nhưng bạn có thể sử dụng JPQL hoặc SQL.

Cuối cùng, đây là các hoạt động quản lý trạng thái:

@Override
    public T makePersistent(T instance) {
        // merge handles transient AND detached instance instance
        return em.merge(instance);
    }

    @Override
    public void makeTransient(T instance) {
        em.remove(instance);
    }

    @Override
    public void checkVersion(T entity, boolean forceUpdate) {
        em.lock(
                entity,
                forceUpdate
                        ? LockModeType.OPTIMISTIC_FORCE_INCREMENT
                        : LockModeType.OPTIMISTIC
        );
    }

Một quyết định quan trọng là cách bạn triển khai phương thức makePersistent().
Ở đây, chúng tôi đã chọn sử dụng EntityManager#merge() vì nó là phương thức đa dụng nhất.
Nếu đối số được cung cấp là một transient entity instance, việc merge sẽ trả về một persistent instance.
Nếu đối số là một detached entity instance, việc merge cũng sẽ trả về một persistent instance.
Điều này cung cấp cho máy khách một API nhất quán mà không cần lo lắng về trạng thái của một thực thể trước khi gọi
makePersistent(). Tuy nhiên, máy khách cần nhận thức rằng giá trị được trả về của makePersistent() luôn là thực thể hiện tại
và đối số mà nó đã cung cấp bây giờ phải bị loại bỏ (xem phần 10.3.4).

Bây giờ bạn đã hoàn thành việc xây dựng máy móc cơ bản của persistence layer và generic interface mà nó tiết lộ cho lớp
trên cùng của hệ thống. Bước tiếp theo, bạn tạo các interface và implementation DAO liên quan đến thực thể bằng cách
extends interface và generic implementation.


18.1.3 Implementing entity DAOs
Mọi thứ bạn đã tạo cho đến nay đều là abstract và generic (GenericDAO & GenericDAOImpl) bạn thậm chí còn không thể
khởi tạo GenericDAOImpl. Bây giờ, bạn cần implement ItemDAO interface bằng cách mở rộng GenericDAOImpl
với một lớp cụ thể.

Trước hết, bạn cần phải quyết định cách người gọi sẽ truy cập vào DAOs. Bạn cũng cần nghĩ về vòng đời của một
thể hiện DAO. Với thiết kế hiện tại, các lớp DAO là (không có trạng thái-stateless) ngoại trừ thành viên
EntityManager.

Các luồng gọi có thể chia sẻ một thể hiện DAO. Trong môi trường Java EE đa luồng, ví dụ, EntityManager tự động được tiêm
vào một cách hiệu quả là an toàn đối với luồng, bởi vì bên trong nó thường được triển khai dưới dạng một proxy chuyển tiếp
đến một persistence context được gắn với luồng hoặc giao dịch. Tất nhiên, nếu bạn gọi setEntityManager() trên một DAO,
thể hiện đó không thể được chia sẻ và nên chỉ được sử dụng bởi một luồng (ví dụ: luồng integration/unit test).

Một EJB stateless session bean pool là một sự lựa chọn tốt, và thread-safe persistence context injection
có sẵn nếu bạn ghi chú ItemDAOImpl cụ thể như một thành phần EJB không có trạng thái.

PATH: /apps/app-model/src/main/java/org/jpwh/dao/ItemDAOImpl.java

@Stateless
public class ItemDAOImpl extends GenericDAOImpl<Item, Long>
        implements ItemDAO{

    public ItemDAOImpl() {
        super(Item.class);
    }

}

Bạn sẽ thấy trong một phút cách container EJB chọn persistence context "đúng" để tiêm vào.

Thread-safety of an injected EntityManager
Các đặc tả Java EE không mô tả rõ ràng khả năng an toàn đối với luồng của EntityManager được tiêm vào với
@PersistenceContext. Đặc tả JPA cho biết một EntityManager chỉ "có thể truy cập theo cách đơn luồng." Điều này sẽ ngụ ý
rằng nó không thể được tiêm vào các thành phần đa luồng bản chất như EJBs, các bean singleton và servlets,
bởi vì, theo mặc định, chúng không chạy với SingleThreadModel. Tuy nhiên, đặc tả EJB yêu cầu rằng container EJB phải
tuân theo thứ tự của các cuộc gọi tới mỗi instance của session bean có trạng thái và không có trạng thái.
EntityManager được tiêm vào trong các EJB không có trạng thái hoặc có trạng thái nên có khả năng an toàn đối với luồng;
các container thực hiện điều này bằng cách tiêm một EntityManager placeholder.
Ngoài ra, máy chủ ứng dụng của bạn có thể (nhưng không nhất thiết phải) hỗ trợ cách truy cập an toàn đối với luồng vào
EntityManager được tiêm vào trong một bean singleton hoặc servlet đa luồng. Nếu còn nghi ngờ, bạn nên tiêm vào
EntityManagerFactory có khả năng an toàn đối với luồng, sau đó tạo và đóng EntityManager được quản lý trong ứng dụng của
bạn trong các phương thức service của thành phần.

Tiếp theo là các phương thức tìm kiếm được xác định trong ItemDAO:


@Stateless
public class ItemDAOImpl extends GenericDAOImpl<Item, Long>
        implements ItemDAO{

    public ItemDAOImpl() {
        super(Item.class);
    }

    @Override
    public List<Item> findAll(boolean withBids) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Item> criteria = cb.createQuery(Item.class);
        //...
        return em.createQuery(criteria).getResultList();
    }

    @Override
    public List<Item> findByName(String name, boolean substring) {
        // ...
    }

    @Override
    public List<ItemBidSummary> findItemBidSummaries() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<ItemBidSummary> criteria =
                cb.createQuery(ItemBidSummary.class);
        return em.createQuery(criteria).getResultList();
    }

}

Sau khi đọc các chương trước, bạn không nên gặp bất kỳ vấn đề nào khi viết các truy vấn này; chúng là các truy vấn đơn giản:
Bạn có thể sử dụng criteria query APIs hoặc call externalized JPQL queries by name.
Bạn nên xem xét sử dụng metamodel tĩnh cho các truy vấn theo criteria, như đã được giải thích trong phần
"Sử dụng metamodel tĩnh" trong chương 3.

Khi đã hoàn thành ItemDAO, bạn có thể tiếp tục với BidDAO:

PATH: /apps/app-model/src/main/java/org/jpwh/dao/BidDAOImpl.java

@Stateless
public class BidDAOImpl extends GenericDAOImpl<Bid, Long>
    implements BidDAO {

    public BidDAOImpl() {
        super(Bid.class);
    }
}

Như bạn có thể thấy, đây là một triển khai DAO trống rỗng chỉ kế thừa các phương thức tổng quát.
Trong phần tiếp theo, chúng tôi sẽ thảo luận về một số hoạt động mà bạn có thể chuyển vào lớp DAO này.
Chúng tôi cũng chưa hiển thị bất kỳ mã nguồn UserDAO hoặc CategoryDAO nào và giả định rằng bạn sẽ viết các interface và
implementation DAO này theo nhu cầu.

Chủ đề tiếp theo của chúng tôi là kiểm thử persistence layer: này: Liệu bạn nên kiểm thử và nếu có, thì làm như thế nào?
Should you, and if so, how?


18.1.4 Testing the persistence layer

Chúng tôi đã rút hầu hết các ví dụ trong cuốn sách này cho đến nay trực tiếp từ mã kiểm thử thực tế. Chúng tôi sẽ
tiếp tục làm như vậy trong tất cả các ví dụ trong tương lai, nhưng chúng tôi cần hỏi: liệu bạn nên viết các kiểm thử cho
tầng persistence để xác minh tính năng của nó hay không?

Theo kinh nghiệm của chúng tôi, thường không hợp lý để kiểm thử persistence layer một cách riêng lẻ. Bạn có thể khởi tạo
các lớp DAO của miền và cung cấp một EntityManager giả mạo. Một bài unit test như vậy sẽ có giá trị hạn chế và đòi hỏi
một lượng công việc không nhỏ để viết. Thay vào đó, chúng tôi đề xuất rằng bạn nên tạo integration test, kiểm thử một phần lớn
của ngăn xếp ứng dụng và liên quan đến hệ thống cơ sở dữ liệu. Tất cả các ví dụ còn lại trong chương này đều là từ các
integration test như vậy; chúng mô phỏng một khách hàng gọi ứng dụng máy chủ, với một hệ thống cơ sở dữ liệu thực tế ở
phía sau. Do đó, bạn đang kiểm thử điều quan trọng: hành vi chính xác của service của bạn, logic business của domain model
mà chúng dựa vào và truy cập cơ sở dữ liệu thông qua các DAO của bạn, tất cả cùng nhau.

Vấn đề lúc này là chuẩn bị integration test như thế nào. Bạn muốn kiểm thử trong một môi trường Java EE thực tế,
trên máy chủ ứng dụng thực tế. Đối với điều này, chúng tôi sử dụng Arquillian (http://arquillian.org), một công cụ tích hợp
với TestNG. Với Arquillian, bạn chuẩn bị một bản (lưu trữ ảo-virtual archive) trong mã kiểm thử của bạn, sau đó thực thi 
nó trên máy chủ ứng dụng thực tế. Hãy xem ví dụ để biết cách thực hiện điều này.

Vấn đề thú vị hơn là chuẩn bị dữ liệu kiểm thử cho integration test. Hầu hết các kiểm thử có ý nghĩa đòi hỏi rằng có một
số dữ liệu tồn tại trong cơ sở dữ liệu. Bạn muốn nạp dữ liệu kiểm thử đó vào cơ sở dữ liệu trước khi chạy kiểm thử và mỗi
kiểm thử nên hoạt động với một tập dữ liệu sạch và định nghĩa rõ ràng để bạn có thể viết những khẳng định đáng tin cậy.

Dựa trên kinh nghiệm của chúng tôi, dưới đây là ba kỹ thuật phổ biến để nhập dữ liệu kiểm thử:

- Bộ kiểm thử của bạn thực thi một phương thức trước mỗi kiểm thử để lấy một EntityManager. Bạn tự tạo các thực thể dữ liệu
kiểm thử và lưu chúng bằng cách sử dụng API của EntityManager. Ưu điểm lớn nhất của chiến lược này là bạn kiểm tra một số ánh xạ
của bạn theo cách tự nhiên. Một ưu điểm khác là dễ dàng truy cập dữ liệu kiểm thử thông qua mã lập trình.
Ví dụ, nếu bạn cần identifier value của một Item trong mã kiểm thử của bạn, nó đã có sẵn trong Java vì bạn có thể truyền
nó từ phương thức nhập dữ liệu của bạn. Nhược điểm là dữ liệu kiểm thử có thể khó bảo trì, vì mã Java không phải là
định dạng dữ liệu tốt. Bạn có thể clear dữ liệu kiểm thử khỏi cơ sở dữ liệu bằng cách drop và re-create cơ sở dữ liệu sau
mỗi kiểm thử bằng Hibernate’s schema-export feature. Tất cả các integration test trong cuốn sách này cho đến nay đều đã
sử dụng chiến lược này; bạn có thể tìm thấy quy trình nhập dữ liệu kiểm thử bên cạnh mỗi kiểm thử trong mã ví dụ.

- Arquillian có thể thực thi việc nhập dữ liệu kiểm thử từ một tập dữ liệu DbUnit (http://dbunit.sourceforge.net) trước
mỗi lần chạy kiểm thử. DbUnit cung cấp nhiều định dạng để viết tập dữ liệu, bao gồm cú pháp XML phẳng được sử dụng phổ biến.
Đây không phải là định dạng gọn nhất nhưng dễ đọc và bảo trì. Các ví dụ trong chương này sử dụng phương pháp này. Bạn có
thể tìm thấy @UsingDataSet của Arquillian trên các lớp kiểm thử với đường dẫn đến tệp XML để nhập. Hibernate create và drop
bảng SQL, và Arquillian, với sự trợ giúp của DbUnit, nạp dữ liệu kiểm thử vào cơ sở dữ liệu. Nếu bạn muốn giữ dữ liệu kiểm thử
của mình độc lập với kiểm thử, đây có thể là phương pháp phù hợp với bạn. Nếu bạn không sử dụng Arquillian, việc nhập một
tập dữ liệu thủ công cũng khá dễ dàng với DbUnit — hãy xem SampleDataImporter trong mã ví dụ chương này. Chúng tôi triển khai
trình nhập này khi chạy các ứng dụng ví dụ trong quá trình phát triển, để có cùng dữ liệu sẵn có cho việc sử dụng tương tác
như trong các kiểm thử tự động.

- Trong mục 9.1.1, bạn đã thấy cách thực thi các tập lệnh SQL tùy chỉnh khi Hibernate bắt đầu. Lệnh load script được thực hiện
sau khi Hibernate tạo schema; đây là một tiện ích tuyệt vời để nhập dữ liệu kiểm thử bằng các lệnh SQL INSERT đơn giản.
Các ví dụ trong chương tiếp theo sử dụng phương pháp này. Ưu điểm lớn là bạn có thể sao chép/dán các lệnh INSERT từ một
bảng SQL vào bộ kiểm thử của bạn và ngược lại. Hơn nữa, nếu cơ sở dữ liệu của bạn hỗ trợ cú pháp xây dựng giá trị hàng SQL,
bạn có thể viết các lệnh chèn hàng đa hàng gọn như insert into MY_TABLE (MY_COLUMN) values (1), (2), (3), .....

Chúng tôi để quyết định chọn chiến lược cho bạn. Điều này thường là một vấn đề cá nhân và phụ thuộc vào lượng dữ liệu kiểm thử
mà bạn phải bảo trì. Lưu ý rằng chúng tôi đang nói về dữ liệu kiểm thử cho integration test, không phải cho kiểm thử hiệu suất
hoặc tính mở rộng. Nếu bạn cần lượng lớn dữ liệu kiểm thử (phần lớn là ngẫu nhiên) cho kiểm thử load, hãy xem xét các công cụ
tạo dữ liệu như Benerator (http://databene.org/databene-benerator.html).

Điều này hoàn thành vòng lặp đầu tiên của persistence layer. Bây giờ bạn có thể lấy các thể hiện ItemDAO và làm việc với
một mức độ trừu tượng hơn khi truy cập cơ sở dữ liệu. Hãy viết một client gọi tầng persistence này và triển khai phần còn
lại của ứng dụng.
