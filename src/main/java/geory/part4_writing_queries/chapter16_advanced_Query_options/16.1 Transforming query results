[Hibernate Feature]

Bạn có thể áp dụng một (bộ biến đổi kết quả-result transformer) vào kết quả truy vấn để bạn có thể lọc hoặc marshal kết quả
bằng thủ tục riêng của bạn thay vì hành vi mặc định của Hibernate.
Hành vi mặc định của Hibernate cung cấp một set các bộ biến đổi mặc định mà bạn có thể thay thế và/tùy chỉnh.

Kết quả mà bạn sẽ biến đổi là kết quả của một truy vấn đơn giản, nhưng bạn cần truy cập API gốc của Hibernate org.hibernate.Query
thông qua phiên Session, như được hiển thị trong danh sách sau đây.

Listing 16.1 Simple query with several projected elements
PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
TransformResults.java

Session session = em.unwrap(Session.class);
org.hibernate.Query query = session.createQuery(
    "select i.id as itemId, i.name as name, i.auctionEnd as auctionEnd from
    Item i"
);

Mà không có bất kỳ result transformation tùy chỉnh nào, truy vấn này trả về một List các Object[].

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
TransformResults.java

List<Object[]> result = query.list();
for (Object[] tuple : result) {
    Long itemId = (Long) tuple[0];
    String name = (String) tuple[1];
    Date auctionEnd = (Date) tuple[2];
    // ...
}

Mỗi mảng đối tượng là một "row" của kết quả truy vấn. Mỗi phần tử của bộ ba đó có thể được truy cập bằng chỉ số:
ở đây chỉ số 0 là một Long, chỉ số 1 là một chuỗi và chỉ số 2 là một Date. Result transformer đầu tiên mà chúng tôi
giới thiệu thay vào đó trả về một List of Lists.

Tranforming criteria query results

Tất cả các ví dụ trong phần này áp dụng cho các truy vấn viết bằng JPQL được tạo ra bằng API org.hibernate.Query.
Nếu bạn viết một JPA CriteriaQuery bằng cách sử dụng CriteriaBuilder, bạn không thể áp dụng một Hibernate
org.hibernate.transform.ResultTransformer: đây là một giao diện chỉ có sẵn trong Hibernate.
Ngay cả khi bạn có được native API cho criteria query của bạn (thông qua ép kiểu HibernateQuery, như được hiển thị trong
phần 14.1.3), bạn không thể đặt một custom query tranformer. Đối với JPA CriteriaQuery, Hibernate áp dụng một bộ biến đổi
tích hợp để triển khai các hợp đồng JPA; sử dụng một bộ biến đổi tùy chỉnh sẽ ghi đè lên điều này và gây ra vấn đề.
Tuy nhiên, bạn có thể đặt một bộ biến đổi tùy chỉnh cho các truy vấn JPQL được tạo ra bằng javax.persistence.Query,
sau khi có được API native bằng HibernateQuery. Ngoài ra, sau này trong chương này, bạn sẽ thấy API org.hibernate.Criteria gốc,
một cơ sở truy vấn theo tiêu chí thay thế hỗ trợ ghi đè org.hibernate.transform.ResultTransformer.


16.1.1 Returning a list of lists

Hãy giả sử bạn muốn sử dụng truy cập theo chỉ mục nhưng bạn không hài lòng với kết quả Object[]. Thay vì một List các Object[],
mỗi bộ ba cũng có thể được biểu diễn dưới dạng một List sử dụng ToListResultTransformer:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
TransformResults.java

query.setResultTransformer(
    ToListResultTransformer.INSTANCE
);
    List<List> result = query.list();
    for (List list : result) {
    Long itemId = (Long) list.get(0);
    String name = (String) list.get(1);
    Date auctionEnd = (Date) list.get(2);
    // ...
}

Điều này là một sự khác biệt nhỏ nhưng là một sự thay thế thuận tiện nếu mã trong các lớp khác của ứng dụng của bạn đã
hoạt động với List of Lists.

Bộ biến đổi tiếp theo chuyển đổi kết quả truy vấn thành một Map cho mỗi bộ ba, trong đó truy vấn projection gán các
tên bí danh tương ứng với các phần tử projection.


16.1.2 Returning a list of maps
Bộ biến đổi AliasToEntityMapResultTransformer trả về một List của java.util.Map, một map cho mỗi "row."
Các tên bí danh trong truy vấn là itemId, name và auctionEnd:

query.setResultTransformer(
    AliasToEntityMapResultTransformer.INSTANCE
);
List<Map> result = query.list();
assertEquals(
    query.getReturnAliases()
    new String[]{"itemId", "name", "auctionEnd"}
);
for (Map map : result) {
    Long itemId = (Long) map.get("itemId");
    String name = (String) map.get("name");
    Date auctionEnd = (Date) map.get("auctionEnd");
    // ...
}

Nếu bạn không biết các tên bí danh được sử dụng trong truy vấn và cần lấy chúng một cách động,
hãy gọi org.hibernate.Query#getReturnAliases().

Truy vấn ví dụ này trả về các giá trị scalar; bạn cũng có thể muốn biến đổi kết quả chứa các trường hợp thực thể persistent.
Ví dụ này sử dụng các tên bí danh cho các thực thể được projected và một danh sách các Map:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
TransformResults.java

org.hibernate.Query entityQuery = session.createQuery(
    "select i as item, u as seller from Item i join i.seller u"
);
entityQuery.setResultTransformer(
    AliasToEntityMapResultTransformer.INSTANCE
);
List<Map> result = entityQuery.list();
for (Map map : result) {
    Item item = (Item) map.get("item");
    User seller = (User) map.get("seller");
    assertEquals(item.getSeller(), seller);
    // ...
}

Bộ biến đổi tiếp theo hữu ích hơn, ánh xạ kết quả truy vấn vào các thuộc tính của JavaBean thông qua các tên bí danh.

16.1.3 Mapping aliases to bean properties
Ở phần 15.3.2, chúng tôi đã chỉ ra cách một truy vấn có thể trả về các thể hiện của một JavaBean một cách động bằng
cách gọi hàm tạo của ItemSummary. Trong JPQL, bạn có thể thực hiện điều này bằng toán tử new. Đối với các query criteria,
bạn sử dụng phương thức construct(). Lớp ItemSummary phải có một hàm tạo phù hợp với kết quả truy vấn được projected.

Nếu JavaBean của bạn không có hàm tạo phù hợp, bạn vẫn có thể tạo thể hiện và điền vào các giá trị bằng cách sử dụng
setter và/hoặc các trường với AliasToBeanResultTransformer. Ví dụ sau biến đổi kết quả truy vấn được hiển thị trong
danh sách 16.1:

query.setResultTransformer(
 new AliasToBeanResultTransformer(ItemSummary.class)
);
List<ItemSummary> result = query.list();
for (ItemSummary itemSummary : result) {
    Long itemId = itemSummary.getItemId();
    String name = itemSummary.getName();
    Date auctionEnd = itemSummary.getAuctionEnd();
    // ...
}

Bạn tạo bộ biến đổi với lớp JavaBean mà bạn muốn tạo thể hiện, trong trường hợp này là ItemSummary. Hibernate yêu cầu
lớp này phải không có hàm tạo hoặc có một hàm tạo không tham số công khai.

Khi biến đổi kết quả truy vấn, Hibernate tìm các phương thức setter và các trường có tên giống với các tên bí danh
trong truy vấn. Lớp ItemSummary phải có các trường itemId, name và auctionEnd hoặc các phương thức setter setItemId(),
setName(), và setAuctionEnd(). Các trường hoặc tham số của phương thức setter phải có kiểu đúng. Nếu bạn có các
trường tương ứng với một số tên bí danh truy vấn và các phương thức setter cho phần còn lại, cũng được chấp nhận.

Ngoài ra, bạn nên biết cách viết bộ biến đổi kết quả tùy chỉnh của riêng bạn khi không có bất kỳ bộ biến đổi tích hợp
nào phù hợp với bạn.


16.1.4 Writing a ResultTransformer

Các bộ biến đổi tích hợp trong Hibernate không phức tạp lắm; không có sự khác biệt lớn giữa các bộ ba kết quả được biểu
diễn dưới dạng List, Map hoặc mảng đối tượng. Triển khai giao diện ResultTransformer khá dễ dàng, và việc biến đổi
tùy chỉnh của kết quả truy vấn có thể cải thiện tích hợp giữa các lớp mã trong ứng dụng của bạn. Nếu mã giao diện người dùng
của bạn đã biết cách hiển thị một bảng List<ItemSummary>, hãy để Hibernate trả nó trực tiếp từ truy vấn.

Tiếp theo, chúng tôi sẽ chỉ cho bạn cách triển khai một ResultTransformer. Hãy giả sử bạn muốn có một danh sách
List<ItemSummary> được trả về từ truy vấn được hiển thị trong danh sách 16.1, nhưng bạn không thể để Hibernate tạo một
thể hiện của ItemSummary thông qua reflection trên một hàm tạo. Có thể lớp ItemSummary của bạn đã được định nghĩa sẵn
và không có hàm tạo, trường và phương thức setter phù hợp. Thay vào đó, bạn có một ItemSummaryFactory để tạo ra các
thể hiện của ItemSummary.

Giao diện ResultTransformer yêu cầu bạn triển khai các phương thức transformTuple() và transformList():

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
TransformResults.java

query.setResultTransformer(
    new ResultTransformer() {

        @Override           <-- [1] Chuyển đổi các hàng kết quả
        public Object transformTuple(Object[] tuple, String[] aliases) {

            Long itemId = (Long) tuple[0];
            String name = (String) tuple[1];
            Date auctionEnd = (Date) tuple[2];

            return ItemSummaryFactory.newItemSummary(
                itemId, name, auctionEnd
            );
        }

        @Override               [2] Modifies result list
        public List transformList(List collection) {
            return Collections.unmodifiableList(collection);
        }
    }

);

1. Đối với mỗi "hàng" kết quả, một bộ ba Object[] phải được biến đổi thành giá trị kết quả mong muốn cho hàng đó.
Ở đây, bạn truy cập từng phần tử projection bằng chỉ mục trong mảng bộ ba và sau đó gọi ItemSummaryFactory để tạo ra
giá trị kết quả truy vấn. Hibernate truyền vào phương thức các tên bí danh được tìm thấy trong truy vấn, cho mỗi phần tử bộ ba.
Tuy nhiên, bạn không cần tới các tên bí danh trong bộ biến đổi này.

2. Bạn có thể bọc hoặc sửa đổi result list sau khi biến đổi các (bộ ba-tuples). Ở đây, bạn biến đổi List trả về
để trở thành unmodifiable: lý tưởng cho một màn hình báo cáo nơi không gì nên thay đổi dữ liệu.

Như bạn thấy trong ví dụ, bạn biến đổi kết quả truy vấn trong hai bước: trước tiên, bạn tùy chỉnh cách chuyển đổi
mỗi "row" hoặc tuple của kết quả truy vấn thành giá trị mong muốn. Sau đó, bạn làm việc trên toàn bộ danh sách giá trị này,
bọc hoặc chuyển đổi lại.

Tiếp theo, chúng tôi sẽ thảo luận về một tính năng tiện lợi khác của Hibernate (mà JPA không có đối tượng tương tự):
collection filters.



