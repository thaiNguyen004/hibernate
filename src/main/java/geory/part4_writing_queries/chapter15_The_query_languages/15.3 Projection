Một cách đơn giản, việc selection và restriction trong một truy vấn là quá trình xác định các bảng và hàng mà bạn muốn truy vấn.
Trích xuất là việc xác định các "cột" bạn muốn trả về cho ứng dụng: dữ liệu bạn cần.
Mệnh đề SELECT trong JPQL thực hiện việc projection (projection).

15.3.1 Projection of entities and scalar values

Ví dụ, hãy xem xét các truy vấn sau đây:

select i, b from Item i, Bid b
-----------------------------------------
Root<Item> i = criteria.from(Item.class);
Root<Bid> b = criteria.from(Bid.class);
criteria.select(cb.tuple(i, b));

/* Thay thế thuận tiện:
criteria.multiselect(
    criteria.from(Item.class),
    criteria.from(Bid.class)
);
*/

Như đã hứa trước đây, truy vấn tiêu chuẩn này cho thấy cách bạn có thể thêm nhiều Roots bằng cách gọi phương thức from() nhiều lần.
Để thêm nhiều phần tử vào projection của bạn, bạn có thể gọi phương thức tuple() của CriteriaBuilder, hoặc sử dụng biểu thức
ngắn gọn multiselect().

Bạn đang tạo ra một tích của tất cả các trường hợp Item và Bid. Các truy vấn trả về các cặp được sắp xếp của các thực thể
Item và Bid:

List<Object[]> result = query.getResultList();
Set<Item> items = new HashSet();
Set<Bid> bids = new HashSet();

for (Object[] row : result) {
    assertTrue(row[0] instanceof Item);
    items.add((Item) row[0]);

    assertTrue(row[1] instanceof Bid);
    bids.add((Bid)row[1]);
}
assertEquals(items.size(), 3);
assertEquals(bids.size(), 4);
assertEquals(result.size(), 12);

Truy vấn trả về một danh sách (List) của Object[]. Ở chỉ mục 0 là Item và ở chỉ mục 1 là Bid.
Bởi vì đây là một tích (product), kết quả chứa mọi kết hợp có thể của các hàng Item và Bid được tìm thấy trong hai bảng
cơ sở dữ liệu cơ sở. Tất nhiên, truy vấn này không hữu ích, nhưng bạn không nên ngạc nhiên khi nhận được một tập hợp
Object[] là kết quả của truy vấn. Hibernate quản lý tất cả các trường hợp của các thực thể Item và Bid ở trạng thái persistent,
trong ngữ cảnh bền vững. Lưu ý cách HashSet loại bỏ các trường hợp trùng lặp của Item và Bid.

Một cách thay thế, với Tuple API trong các truy vấn tiêu chuẩn, bạn có thể truy cập được kiểu vào danh sách kết quả.
Bắt đầu bằng cách gọi createTupleQuery() để tạo một CriteriaQuery<Tuple>. Sau đó, làm cho định nghĩa truy vấn tốt hơn
bằng cách thêm các bí danh cho các lớp thực thể.

CriteriaQuery<Tuple> criteria = cb.createTupleQuery();
// Or: CriteriaQuery<Tuple> criteria = cb.createQuery(Tuple.class);
criteria.multiselect(
    criteria.from(Item.class).alias("i"),           <-- Aliases optional
    criteria.from(Bid.class).alias("b")
);
TypedQuery<Tuple> query = em.createQuery(criteria);
List<Tuple> result = query.getResultList();

Tuple API cung cấp nhiều cách để truy cập kết quả, thông qua index,
thông qua (bí danh-alias) hoặc thông qua truy cập meta không có kiểu:

for (Tuple tuple : result) {
    Item item = tuple.get(0, Item.class);           <-- Indexed
    Bid bid = tuple.get(1, Bid.class);

    item = tuple.get("i", Item.class);              <-- Alias
    bid = tuple.get("b", Bid.class);

    for (TupleElement<?> element : tuple.getElements()) {   <-- Meta
        Class clazz = element.getJavaType();
        String alias = element.getAlias();
        Object value = tuple.get(element);
    }
}

Trích xuất sau đây cũng trả về một tập hợp Object[]:
select u.id, u.username, u.homeAddress from User u
--------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.multiselect(
    u.get("id"), u.get("username"), u.get("homeAddress")
);

Các Object[] trả về bởi truy vấn này chứa một Long ở chỉ mục 0, một String ở chỉ mục 1 và một Address ở chỉ mục 2.
Hai giá trị đầu tiên là giá trị scala; giá trị thứ ba là một thực thể nhúng (embedded class). Tất cả đều không phải
là các thực thể được quản lý! Do đó, các giá trị này không nằm trong trạng thái bền vững, giống như một thực thể sẽ.
Chúng không nằm trong giao dịch và rõ ràng không được kiểm tra tự động để xác định trạng thái "dirty" (thay đổi).
Chúng ta nói rằng tất cả các giá trị này là transient (tạm thời). Đây là loại truy vấn bạn cần viết cho một màn hình
báo cáo đơn giản, hiển thị tất cả tên người dùng và địa chỉ nhà của họ.

Bạn đã thấy biểu thức đường dẫn (path expressions) nhiều lần: bằng cách sử dụng cú pháp dấu chấm, bạn có thể
tham chiếu đến các thuộc tính của một thực thể, chẳng hạn như User#username với u.username. Đối với một thuộc tính
nhúng lồng, ví dụ, bạn có thể viết biểu thức đường dẫn u.homeAddress.city.zipcode. Đây là các biểu thức đường dẫn
đơn giá trị, vì chúng không kết thúc tại một thuộc tính tập hợp được ánh xạ.

Một lựa chọn thuận tiện hơn là Object[] hoặc Tuple, đặc biệt cho các truy vấn báo cáo, là khởi tạo động trong các projection,
điều này sẽ được đề cập tiếp theo.


15.3.2 Using dynamic instantiation - sự khởi tạo động

Hãy xem xét rằng bạn có một màn hình báo cáo trong ứng dụng của bạn nơi bạn cần hiển thị một số dữ liệu trong danh sách.
Bạn muốn hiển thị tất cả các mục đấu giá và khi mỗi phiên đấu giá kết thúc. Bạn không muốn tải các thực thể Item đã
được quản lý, vì không có dữ liệu nào sẽ bị sửa đổi: bạn chỉ đọc dữ liệu.

Đầu tiên, hãy viết một lớp gọi là ItemSummary với một hàm tạo nhận một Long cho số hiệu của mục, một String cho tên mục,
và một Date cho thời gian kết thúc đấu giá của mục:

public class ItemSummary {
    public ItemSummary(Long itemId, String name, Date auctionEnd) {
        // ...
    }
    // ...
}

Chúng tôi đôi khi gọi những loại lớp này là các đối tượng truyền tải dữ liệu (DTOs), vì mục đích chính của chúng là
chuyển dữ liệu trong ứng dụng. Lớp ItemSummary không được ánh xạ vào cơ sở dữ liệu, và bạn có thể thêm các phương thức tùy ý
(getter, setter, printing dữ liệu) khi cần thiết cho giao diện người dùng báo cáo của bạn.

Hibernate có thể trực tiếp trả về các thực thể của ItemSummary từ một truy vấn với từ khóa new trong JPQL và phương thức
construct() trong tiêu chuẩn truy vấn:

select new org.jpwh.model.querying.ItemSummary(
    i.id, i.name, i.auctionEnd
) from Item i
----------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(
    cb.construct(
        ItemSummary.class,
        i.get("id"), i.get("name"), i.get("auctionEnd")
    )
);

Trong danh sách kết quả của truy vấn này, mỗi phần tử là một thực thể của ItemSummary. Lưu ý rằng trong JPQL, bạn phải
sử dụng tên lớp đầy đủ, có nghĩa là bao gồm tên gói (package name). Hãy cũng lưu ý rằng không hỗ trợ nhúng các cuộc gọi
hàm tạo: bạn không thể viết new ItemSummary(..., new UserSummary(...)).

Khả năng khởi tạo động không bị giới hạn đối với các lớp chuyển tải dữ liệu không bền như ItemSummary. Bạn có thể xây dựng
một thực thể Item hoặc một User mới trong một truy vấn, đó là một lớp thực thể được ánh xạ. Quy tắc quan trọng duy nhất
là lớp phải có một hàm tạo phù hợp cho projection của bạn. Tuy nhiên, nếu bạn xây dựng động các thực thể, chúng sẽ không
ở trong trạng thái bền vững khi trả về từ truy vấn! Chúng sẽ ở trong trạng thái transient hoặc detached, tùy thuộc vào việc
bạn đặt giá trị của số hiệu. Một trường hợp sử dụng cho tính năng này là sao chép dữ liệu đơn giản: Lấy một Item "mới"
tạm thời với một số giá trị được sao chép vào hàm tạo từ cơ sở dữ liệu, thiết lập một số giá trị khác trong ứng dụng,
và sau đó lưu trữ nó trong cơ sở dữ liệu bằng persist().

Nếu lớp DTO của bạn không có hàm tạo thích hợp và bạn muốn điền dữ liệu từ kết quả truy vấn thông qua các phương thức setter
hoặc trường, áp dụng một ResultTransformer, như được thể hiện trong phần 16.1.3. Sau đó, chúng ta sẽ có thêm ví dụ về
tổng hợp và nhóm dữ liệu. Tiếp theo, chúng tôi sẽ xem xét một vấn đề về projection dữ liệu mà thường gây hiểu nhầm đối
với nhiều kỹ sư: xử lý các bản sao.


15.3.3 Getting distinct results
Khi bạn tạo một projection trong một truy vấn, không đảm bảo rằng các phần tử trong kết quả sẽ là duy nhất. Ví dụ,
tên mục không phải lúc nào cũng là duy nhất, vì vậy truy vấn sau có thể trả về cùng một tên nhiều lần:

select i.name from Item i
---------------------------
CriteriaQuery<String> criteria = cb.createQuery(String.class);
criteria.select(
    criteria.from(Item.class).<String>get("name")
);

Khó để thấy được làm thế nào có thể có ý nghĩa khi có hai hàng giống nhau trong kết quả của một truy vấn.
Do đó, nếu bạn nghĩ rằng việc xuất hiện các bản sao là có thể, bạn thường áp dụng từ khóa DISTINCT
hoặc phương thức distinct():

select distinct i.name from Item i
-----------------------------------------
CriteriaQuery<String> criteria = cb.createQuery(String.class);
criteria.select(
    criteria.from(Item.class).<String>get("name")
);
criteria.distinct(true);

Điều này loại bỏ các bản sao từ danh sách mô tả mục trả về và dịch trực tiếp thành toán tử DISTINCT trong SQL.
Việc lọc xảy ra tại mức cơ sở dữ liệu. Sau này trong chương này, chúng tôi sẽ cho bạn thấy rằng điều này không phải
lúc nào cũng đúng.

Trước đó, bạn đã thấy cuộc gọi hàm trong các ràng buộc, trong mệnh đề WHERE. Bạn cũng có thể gọi hàm trong projections,
để chỉnh sửa dữ liệu trả về trong truy vấn.


15.3.4 Calling functions in projections

Các truy vấn sau đây trả về một chuỗi tùy chỉnh với hàm concat() trong phần projection:
select concat(concat(i.name, ': '), i.auctionEnd) from Item i
--------------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(
    cb.concat(
        cb.concat(i.<String>get("name"), ":"),
        i.<String>get("auctionEnd")
    )
);

Truy vấn này trả về một danh sách chuỗi, mỗi chuỗi có dạng "[Tên mục]:[Ngày kết thúc đấu giá]". Ví dụ này cũng cho
thấy bạn có thể viết các cuộc gọi hàm lồng nhau.

Tiếp theo, hàm coalesce() trả về giá trị null nếu tất cả các đối số của nó đều trả về null; nếu không, nó sẽ trả về
giá trị của đối số đầu tiên không phải là null:

select i.name, coalesce(i.buyNowPrice, 0) from Item i
--------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.multiselect(
    i.get("name"),
    cb.coalesce(i.<BigDecimal>get("buyNowPrice"), 0)
);

Nếu một Item không có buyNowPrice, thay vì trả về giá trị null, sẽ trả về một BigDecimal có giá trị bằng không.

Tương tự như coalesce(), nhưng mạnh mẽ hơn, là biểu thức case/when. Trong truy vấn sau, nó trả về tên người dùng của mỗi
User và một chuỗi bổ sung với "Germany", "Switzerland" hoặc "Other", tùy thuộc vào độ dài mã zip của địa chỉ của người dùng:

select
    u.username,
    case when length(u.homeAddress.zipcode) = 5 then 'Germany'
    when length(u.homeAddress.zipcode) = 4 then 'Switzerland'
    else 'Other'
    end
from User u
-----------------------------------------------------------------
// Check String literal support; see Hibernate bug HHH-8124
Root<User> u = criteria.from(User.class);
criteria.multiselect(
    u.get("username"),
    cb.selectCase()
    .when(
        cb.equal(
            cb.length(u.get("homeAddress").<String>get("zipcode")), 5
        )
        ,
        "Germany"
    )
    .when(
        cb.equal(
            cb.length(u.get("homeAddress").<String>get("zipcode")), 4
        )
        ,
        "Switzerland"
    )
    .otherwise("Other")
);


Đối với các (hàm chuẩn tích hợp sẵn- built-in standard functions), xem bảng trong phần trước đó. Khác với cuộc gọi hàm
trong các restrictions,
Hibernate không chuyển tiếp cuộc gọi hàm không xác định trong phần projection thành một cuộc gọi hàm SQL trực tiếp thông
thường trên cơ sở dữ liệu. Bất kỳ hàm nào bạn muốn gọi trong phần projection phải được biết đến bởi Hibernate và/hoặc
được gọi bằng phép toán đặc biệt function() của JPQL.

Trong projection sau, nó trả về tên của mỗi mục đấu giá và số ngày giữa thời điểm tạo mục và thời điểm kết thúc đấu giá,
gọi hàm datediff() của cơ sở dữ liệu H2:

select
    i.name,
    function('DATEDIFF', 'DAY', i.createdOn, i.auctionEnd)
from Item i
--------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.multiselect(
    i.get("name"),
    cb.function(
        "DATEDIFF",
        Integer.class,
        cb.literal("DAY"),
        i.get("createdOn"),
        i.get("auctionEnd")
    )
);
    
Nếu thay vào đó bạn muốn gọi một hàm trực tiếp, bạn cung cấn cho Hibernate kiểu trả về của hàm, để nó có thể phân tích 
câu truy vấn. Bạn thêm các hàm để gọi trong phần projection bằng cách mở rộng lớp org.hibernate.Dialect đã được cấu hình
của bạn. Hàm datediff() đã được đăng ký sẵn cho bạn trong hệ thống dialect của H2. Sau đó, bạn có thể gọi nó như đã thể
hiện với function(), điều này hoạt động trên các nhà cung cấp JPA khác khi truy cập vào H2, hoặc trực tiếp với datediff(),
mà có lẽ chỉ hoạt động trong Hibernate. Kiểm tra mã nguồn của dialect cho cơ sở dữ liệu của bạn; bạn sẽ có thể tìm thấy
nhiều hàm SQL độc quyền khác đã được đăng ký sẵn.

Hơn nữa, bạn có thể thêm các hàm SQL vào Hibernate một cách chương trình trong quá trình khởi động bằng cách gọi phương thức
applySqlFunction() trên Hibernate MetadataBuilder. Ví dụ sau đây thêm hàm SQL lpad() vào Hibernate trước khi nó được khởi động:

...
MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder();
metadataBuilder.applySqlFunction(
    "lpad",
    new org.hibernate.dialect.function.StandardSQLFunction(
        "lpad", org.hibernate.type.StringType.INSTANCE
    )
);

Xem Javadoc của SQLFunction và các lớp con của nó để biết thêm thông tin.
Tiếp theo, chúng tôi sẽ xem xét các hàm tổng hợp, đó là các hàm hữu ích nhất trong các truy vấn báo cáo.


15.3.5 Aggregation functions

Các reporting queries tận dụng khả năng của cơ sở dữ liệu để thực hiện việc nhóm và tổng hợp dữ liệu một cách hiệu quả.
Ví dụ, một truy vấn báo cáo điển hình sẽ truy xuất giá khởi điểm cao nhất trong một danh mục cụ thể.
Phép tính này có thể xảy ra trên cơ sở dữ liệu và bạn không cần phải tải nhiều thực thể Item vào bộ nhớ.

Các hàm tổng hợp được chuẩn hóa trong JPA bao gồm count(), min(), max(), sum() và avg().

Trong truy vấn sau, đếm tất cả các Item:

select count(i) from Item i
-----------------------------------
criteria.select(
    cb.count(criteria.from(Item.class))
);

Truy vấn trả kết quả dưới dạng một giá trị kiểu Long:
Long count = (Long)query.getSingleResult();

Hàm đặc biệt count(distinct) trong JPQL và phương thức countDistinct() bỏ qua các bản sao:
select count(distinct i.name) from Item i
----------------------------------------------------
criteria.select(
    cb.countDistinct(
        criteria.from(Item.class).get("name")
    )
);

Truy vấn sau tính tổng giá trị của tất cả các Bids:

select sum(b.amount) from Bid b
------------------------------------------------------------
CriteriaQuery<Number> criteria = cb.createQuery(Number.class);
criteria.select(
    cb.sum(
        criteria.from(Bid.class).<BigDecimal>get("amount")
    )
);

Truy vấn này trả về một giá trị BigDecimal, vì thuộc tính amount là kiểu BigDecimal. Hàm sum() cũng nhận biết kiểu
thuộc tính BigInteger và trả về Long cho tất cả các kiểu thuộc tính số học khác.

Truy vấn tiếp theo trả về giá trị bid tối thiểu và tối đa cho một mục cụ thể:

select min(b.amount), max(b.amount) from Bid b
    where b.item.id = :itemId
-------------------------------------------------
Root<Bid> b = criteria.from(Bid.class);
criteria.multiselect(
    cb.min(b.<BigDecimal>get("amount")),
    cb.max(b.<BigDecimal>get("amount"))
);
criteria.where(
    cb.equal(
        b.get("item").<Long>get("id"),
        cb.parameter(Long.class, "itemId")
    )
);

Kết quả là một cặp được sắp xếp của các đối tượng BigDecimal (hai ví dụ của BigDecimal, trong một mảng Object[]).

Khi bạn sử dụng một hàm tổng hợp (ví dụ: sum(), min(), max(), avg(), count()) trong mệnh đề SELECT của truy vấn SQL
mà không sử dụng mệnh đề GROUP BY, bạn đang xác định rằng bạn muốn tổng hợp dữ liệu từ tất cả các hàng thành một kết quả duy nhất.
Điều này có nghĩa rằng kết quả của truy vấn sẽ trả về một dòng duy nhất chứa kết quả đã tổng hợp.

Ví dụ, nếu bạn viết một truy vấn để tính tổng tất cả số tiền đã chi tiêu trong một bảng dữ liệu mà không sử dụng mệnh đề
GROUP BY, kết quả sẽ là tổng của tất cả số tiền trong bảng và trả về một con số duy nhất.

Tuy nhiên, nếu bạn sử dụng mệnh đề GROUP BY, bạn có thể tổng hợp dữ liệu theo các nhóm dựa trên các trường dữ liệu
khác nhau, và kết quả sẽ chứa các dòng riêng biệt cho từng nhóm.


15.3.6 Grouping

JPA chuẩn hóa một số tính năng của SQL được sử dụng phổ biến nhất cho báo cáo - mặc dù chúng cũng được sử dụng cho các mục đích khác. 
Trong các truy vấn báo cáo, bạn viết mệnh đề SELECT cho phần projection và mệnh đề GROUP BY và HAVING cho phần tổng hợp.

Tương tự như trong SQL, bất kỳ thuộc tính hoặc định danh nào xuất hiện bên ngoài hàm tổng hợp trong mệnh đề SELECT cũng
phải xuất hiện trong mệnh đề GROUP BY. Xem xét truy vấn tiếp theo, mà đếm số người dùng với mỗi họ:

select u.lastname, count(u) from User u
    group by u.lastname
-------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.multiselect(
    u.get("lastname"),
    cb.count(u)
);
criteria.groupBy(u.get("lastname"));

Trong ví dụ này, thuộc tính u.lastname không nằm bên trong một hàm tổng hợp, vì vậy dữ liệu được projection phải được
"nhóm theo" u.lastname. Bạn cũng không cần phải chỉ định thuộc tính bạn muốn đếm;
biểu thức count(u) tự động được dịch thành count(u.id).

Truy vấn tiếp theo tìm giá trị trung bình của Bid#amount cho mỗi Item:

select i.name, avg(b.amount)
    from Bid b join b.item i
    group by i.name
------------------------------------------
Root<Bid> b = criteria.from(Bid.class);
criteria.multiselect(
    b.get("item").get("name"),
    cb.avg(b.<BigDecimal>get("amount"))
);
criteria.groupBy(b.get("item").get("name"));

[Hibernate Feature]
Khi nhóm dữ liệu, bạn có thể gặp phải một hạn chế của Hibernate. Truy vấn sau tuân theo đúng quy định
nhưng không được xử lý đúng cách trong Hibernate:

select i, avg(b.amount)
    from Bid b join b.item i
    group by i

Quy định JPA cho phép nhóm theo một biểu thức đường dẫn của thực thể, ví dụ như `group by i`. 
Tuy nhiên, Hibernate không tự động mở rộng các thuộc tính của thực thể Item trong mệnh đề GROUP BY SQL được tạo ra, 
điều này dẫn đến không khớp với mệnh đề SELECT. Bạn phải mở rộng thủ công các thuộc tính đã nhóm/trích xuất trong truy
vấn của bạn, cho đến khi vấn đề này được sửa (đây là một trong những vấn đề cũ và phức tạp nhất của Hibernate, HHH-1615).

select i, avg(b.amount)
    from Bid b join b.item i
    group by i.id, i.name, i.createdOn, i.auctionEnd,
    i.auctionType, i.approved, i.buyNowPrice,
    i.seller

---------------------------------------------------------------------
Root<Bid> b = criteria.from(Bid.class);
Join<Bid, Item> i = b.join("item");
criteria.multiselect(
    i,
    cb.avg(b.<BigDecimal>get("amount"))
);
criteria.groupBy(
    i.get("id"), i.get("name"), i.get("createdOn"), i.get("auctionEnd"),
    i.get("auctionType"), i.get("approved"), i.get("buyNowPrice"),
    i.get("seller")
);

Đôi khi bạn muốn hạn chế kết quả một cách cụ thể hơn bằng cách chỉ chọn một số giá trị cụ thể của một nhóm.
Sử dụng mệnh đề WHERE để thực hiện phép toán hạn chế trên các hàng. Mệnh đề HAVING thực hiện phép hạn chế trên các nhóm.

Ví dụ, truy vấn sau đếm số người dùng có mỗi họ bắt đầu bằng "D":
select u.lastname, count(u) from User u
    group by u.lastname
    having u.lastname like 'D%'
---------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.multiselect(
    u.get("lastname"),
    cb.count(u)
);
criteria.groupBy(u.get("lastname"));
criteria.having(cb.like(u.<String>get("lastname"), "D%"));


Các quy tắc giống nhau áp dụng cho mệnh đề SELECT và HAVING: chỉ các thuộc tính đã được nhóm mới có thể xuất hiện bên
ngoài một hàm tổng hợp.

Các phần trước đã giúp bạn bắt đầu với các truy vấn cơ bản. Đến lúc xem xét một số tùy chọn phức tạp hơn.
Đối với nhiều kỹ sư, một trong những lợi ích khó hiểu nhất nhưng cũng mạnh mẽ nhất của mô hình quan hệ
là khả năng kết nối dữ liệu tùy ý.


