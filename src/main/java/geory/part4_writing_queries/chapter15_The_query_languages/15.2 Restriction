15.2 Restriction

Thường thường, bạn không muốn truy xuất tất cả các trường hợp của một lớp từ cơ sở dữ liệu. Bạn phải có khả năng
biểu diễn ràng buộc về dữ liệu được trả về bởi truy vấn. Chúng tôi gọi điều này là "ràng buộc".
Mệnh đề WHERE khai báo các điều kiện ràng buộc trong SQL và JPQL, và phương thức where() là tương đương trong API
truy vấn tiêu chuẩn. Đây là một mệnh đề WHERE điển hình giới hạn kết quả cho tất cả các trường hợp của một Item cụ thể
có tên đã cho:

select i from Item i where i.name = 'Foo'
-----------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.equal(i.get("name"), "Foo")
);

Truy vấn biểu diễn ràng buộc dưới dạng thuộc tính "name" của lớp Item. SQL được tạo ra bởi các truy vấn này là:
select i.ID, i.NAME, ... from ITEM i where i.NAME = 'Foo'

Bạn có thể bao gồm chuỗi thay thế trong các câu lệnh và điều kiện của bạn, bằng cách sử dụng dấu nháy đơn.
Đối với chuỗi ngày, thời gian và timestamp, bạn nên sử dụng cú pháp thoát JDBC: ... where i.auctionEnd = {d '2013-26-06'}.
Hãy lưu ý rằng trình điều khiển JDBC và hệ quản trị cơ sở dữ liệu (DBMS) của bạn định nghĩa cách phân tích chuỗi thay thế
này và các biến thể khác mà họ hỗ trợ. Hãy nhớ lời khuyên từ chương trước: đừng nối dữ liệu người dùng chưa lọc vào
chuỗi truy vấn của bạn - hãy sử dụng ràng buộc tham số. Một số chuỗi thay thế phổ biến khác trong JPQL là true và false:

select u from User u where u.activated = true
----------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.equal(u.get("activated"), true)
);

SQL (JPQL và truy vấn tiêu chuẩn) biểu diễn ràng buộc bằng logic tam phân. Mệnh đề WHERE là một biểu thức logic có
giá trị là true, false hoặc null.

Ternary logic là gì???
Ternary logic (logic tam phân) là một hình thức của logic mà có ba giá trị chính: true, false và null.
Trong truy vấn SQL, một dòng được bao gồm trong kết quả nếu và chỉ nếu mệnh đề WHERE đánh giá là true.
Trong Java, nonNullObject == null đánh giá là false, và null == null đánh giá là true.
Trong SQL, NOT_NULL_COLUMN = null và null = null đều đánh giá là null, không phải true. Do đó, SQL cần các toán tử
đặc biệt, IS NULL và IS NOT NULL, để kiểm tra xem một giá trị có phải là null hay không.
Logic tam phân là cách xử lý các biểu thức mà bạn có thể áp dụng cho các giá trị cột có thể là null.
Xử lý null không phải là một đánh dấu đặc biệt mà là một giá trị thông thường là một phần mở rộng của logic nhị phân quen
thuộc trong mô hình quan hệ. Hibernate cần hỗ trợ logic tam phân này bằng các toán tử tam phân trong JPQL và các truy vấn
tiêu chuẩn.

Hãy cùng đi qua các toán tử so sánh phổ biến nhất trong biểu thức logic, bao gồm cả các toán tử tam phân.

15.2.1 Comparison expressions
JPQL và API tiêu chuẩn hỗ trợ cùng các toán tử so sánh cơ bản như SQL. Dưới đây là một vài ví dụ mà bạn nên thấy
quen thuộc nếu bạn biết SQL.
Truy vấn sau đây trả về tất cả bids có số tiền trong một khoảng cụ thể:

select b from Bid b where b.amount between 99 and 110

Root<Bid> b = criteria.from(Bid.class);
criteria.select(b).where(
    cb.between(
        b.<BigDecimal>get("amount"),
        new BigDecimal("99"), new BigDecimal("110")
    )
);

Truy vấn tiêu chuẩn có thể trông hơi lạ lẫm; bạn có lẽ chưa thấy thường xuyên generics (kiểu thông qua) trong giữa biểu
thức trong Java. Phương thức Root#get() tạo ra một Path<X> của một thuộc tính của thực thể. Để bảo toàn tính an toàn kiểu,
bạn phải xác định kiểu thuộc tính của Path đó, giống như <BigDecimal>get("amount"). Hai đối số khác của phương thức
between() sau đó phải cùng loại, hoặc sự so sánh sẽ không hợp lý hoặc sẽ không biên dịch được.

Truy vấn sau đây trả về tất cả các bids có số tiền lớn hơn giá trị đã cho:

select b from Bid b where b.amount > 100
---------------------------------------
Root<Bid> b = criteria.from(Bid.class);
criteria.select(b).where(
    cb.gt(                  <-- gt() chỉ hoạt động với Number; nếu không sử dụng lớn greaterThan()
        b.<BigDecimal>get("amount"),
        new BigDecimal("100")
    )
);

Phương thức gt() chỉ chấp nhận đối số kiểu Number, như BigDecimal hoặc Integer. Nếu bạn cần so sánh giá trị của các kiểu khác,
ví dụ như Date, hãy sử dụng phương thức greaterThan() thay thế:

Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.greaterThan(
        i.<Date>get("auctionEnd"),
        tomorrowDate
    )
);


Truy vấn sau đây trả về tất cả người dùng có tên người dùng "johndoe" và "janeroe":

select u from User u where u.username in ('johndoe', 'janeroe')
---------------------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.<String>in(u.<String>get("username"))
        .value("johndoe")
        .value("janeroe")
);

Đối với ràng buộc liên quan đến enum, hãy sử dụng literal đầy đủ có tên gọi (fully qualified literal):

select i from Item i
    where i.auctionType = org.jpwh.model.querying.AuctionType.HIGHEST_BID
--------------------------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.equal(
        i.<AuctionType>get("auctionType"),
        AuctionType.HIGHEST_BID
    )
);

Bởi vì SQL dựa trên logic tam phân, kiểm tra giá trị null đòi hỏi sự quan tâm đặc biệt.
Bạn sử dụng các toán tử IS [NOT] NULL trong JPQL
và isNull() và isNotNull() trong API truy vấn tiêu chuẩn.

Dưới đây là cách IS NULL và isNull() hoạt động, để lấy các mặt hàng mà không có giá mua ngay:

select i from Item i where i.buyNowPrice is null
--------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.isNull(i.get("buyNowPrice"))
);

Sử dụng IS NOT NULL và isNotNull(), bạn có thể lấy các mặt hàng có giá mua ngay:

select i from Item i where i.buyNowPrice is not null
--------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.isNotNull(i.get("buyNowPrice"))
);

Toán tử LIKE cho phép tìm kiếm sử dụng ký tự đại diện, với các ký tự đại diện là % và _, giống như trong SQL:

select u from User u where u.username like 'john%'
---------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.like(u.<String>get("username"), "john%")
);

Biểu thức john% giới hạn kết quả cho các người dùng có tên người dùng bắt đầu bằng "john". Bạn cũng có thể phủ định
toán tử LIKE, ví dụ, trong biểu thức tìm kiếm chuỗi con:

select u from User u where u.username not like 'john%'
------------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.like(u.<String>get("username"), "john%").not()
);

Bạn có thể khớp bất kỳ chuỗi con nào bằng cách bao quanh chuỗi tìm kiếm bằng ký tự "%" :

select u from User u where u.username like '%oe%'
------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.select(u).where(
    cb.like(u.<String>get("username"), "%oe%")
);

Ký tự "%" đại diện cho bất kỳ chuỗi ký tự nào; dấu gạch dưới (_) có thể được sử dụng để đại diện cho một ký tự duy nhất.
Bạn có thể thực hiện việc thoát với một ký tự mà bạn chọn nếu bạn muốn sử dụng ký tự "%" hoặc "_" một cách thường lệ:

select i from Item i
    where i.name like 'Name\_with\_underscores' escape :escapeChar
query.setParameter("escapeChar", "\\");
-------------------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.like(i.<String>get("name"), "Name\\_with\\_underscores", '\\')
);

Các truy vấn này trả về tất cả các mục với Name_with_underscores. Trong chuỗi Java, ký tự \ là ký tự thoát, vì vậy bạn
phải thoát nó, đó là lý do vì sao có hai dấu gạch chéo (\) trong ví dụ.

JPA cũng hỗ trợ các biểu thức số học:

select b from Bid b where (b.amount / 2) - 0.5 > 49
-------------------------------------------------------
Root<Bid> b = criteria.from(Bid.class);
criteria.select(b).where(
    cb.gt(
        cb.diff(
            cb.quot(b.<BigDecimal>get("amount"), 2),
                0.5
            ),
        49
    )
);

Các toán tử logic (và cặp ngoặc để nhóm) kết hợp các biểu thức:
select i from Item i
    where (i.name like 'Fo%' and i.buyNowPrice is not null)
        or i.name = 'Bar'/
----------------------------------------------------------------
Root<Item> i = criteria.from(Item.class);
Predicate predicate = cb.and(
    cb.like(i.<String>get("name"), "Fo%"),
    cb.isNotNull(i.get("buyNowPrice"))
);
predicate = cb.or(
    predicate,
    cb.equal(i.<String>get("name"), "Bar")
);

criteria.select(i).where(predicate);

[Hibernate Feature]
Nếu thay vào đó bạn kết hợp tất cả các điều kiện với toán tử logic AND, chúng tôi ưa thích kiểu API truy vấn tiêu chuẩn
linh hoạt như sau:

Root<Item> i = criteria.from(Item.class);
criteria.select(i).where(
    cb.like(i.<String>get("name"), "Fo%"),
    // AND
    cb.isNotNull(i.get("buyNowPrice"))
    // AND ...
);

Chúng ta tóm tắt tất cả các toán tử, bao gồm một số toán tử mà chúng ta chưa thể hiện cho đến bây giờ, và ưu tiên của
chúng từ trên xuống dưới, trong bảng 15.1.

JPQL operator           Criteria query API          Description
.                       N/A                         Toán tử biểu thức đường dẫn điều hướng

+, -                    neg()                       Dấu dương hoặc âm của toán tử một ngôi
                                                    (tất cả các giá trị số không dấu được xem xét là dương).

*, /                    prod(), quot()              Nhân và chia giữa các giá trị số.

+, -                    sum(), diff()               Cộng và trừ giữa các giá trị số.

=, <>, <, >, >=         equal(), notEqual(),        Toán tử so sánh nhị phân với cách thức SQL.
                        lessThan(), lt(),
                        greaterThan(), gt(),
                        greaterThanEqual(),

[NOT] BETWEEN,          between(), like(), in(),    Toán tử so sánh nhị phân với ngữ nghĩa SQL.
[NOT] LIKE,             isNull(), isNotNull()
[NOT] IN,
IS [NOT] NULL,

IS [NOT] EMPTY,         isEmpty(), isNotEmpty(),    Toán tử nhị phân cho các tập hợp cố định (persistent collections).
[NOT] MEMBBER [OF]      isMember(), isNotMember()

NOT, AND, OR            not(), and(), or()          Toán tử logic để xác định thứ tự đánh giá biểu thức.

Bạn đã thấy rằng các biểu thức so sánh nhị phân có cùng ngữ nghĩa với các biểu thức tương ứng trong SQL và cách nhóm
và kết hợp chúng với các toán tử logic. Hãy bàn về việc xử lý tập hợp (collection handling).

15.2.2 Expressions with collections

Tất cả các biểu thức trong các phần trước đều chỉ có biểu thức đường dẫn (path expressions) đơn giá: user.username,
item.buyNowPrice, và vậy. Bạn cũng có thể viết các biểu thức đường dẫn kết thúc trong các tập hợp (collections) và
áp dụng một số toán tử và hàm.

Ví dụ, giả sử bạn muốn giới hạn kết quả truy vấn của mình cho các trường hợp của Category có một phần tử trong
bộ sưu tập items của họ:

select c from Category c
    where c.items is not empty
---------------------------------------------
Root<Category> c = criteria.from(Category.class);
criteria.select(c).where(
    cb.isNotEmpty(c.<Collection>get("items"))
);

Biểu thức đường dẫn c.items trong truy vấn JPQL kết thúc tại một thuộc tính bộ sưu tập: items của một Category.
Lưu ý rằng luôn luôn không hợp pháp để tiếp tục một biểu thức đường dẫn sau một thuộc tính có giá trị bộ sưu tập:
bạn không thể viết c.items.buyNowPrice.

Bạn có thể giới hạn kết quả tùy theo kích thước của bộ sưu tập, bằng cách sử dụng hàm size():

select c from Category c
    where size(c.items) > 1
----------------------------------------
Root<Category> c = criteria.from(Category.class);
criteria.select(c).where(
    cb.gt(
        cb.size(c.<Collection>get("items")),
        1
    )
);

Bạn cũng có thể biểu diễn rằng bạn cần phải có một phần tử cụ thể trong một bộ sưu tập:

select c from Category c
    where :item member of c.items
----------------------------------
Root<Category> c = criteria.from(Category.class);
criteria.select(c).where(
    cb.isMember(
        cb.parameter(Item.class, "item"),
        c.<Collection<Item>>get("items")
    )
);

Đối với persistent maps, các toán tử đặc biệt key(), value(), và entry() có sẵn. Giả sử bạn có một persistent map của
các Image embeddable cho mỗi Item, như được thể hiện trong phần 7.2.4. Tên tệp của mỗi Image là khóa của bản đồ.
Truy vấn sau đây lấy tất cả các trường hợp Image có đuôi .jpg trong tên tệp:

select value(img)
    from Item i join i.images img
    where key(img) like '%.jpg'

Toán tử value() trả về các giá trị của Map, và toán tử key() trả về tập hợp các khóa của Map. Nếu bạn muốn trả về các
trường hợp Map.Entry, hãy sử dụng toán tử entry.

Hãy xem xét các hàm khác có sẵn tiếp theo, không giới hạn đối với các bộ sưu tập.


15.2.3 Calling functions
.... more at the book

15.2.4 Ordering query results

Tất cả các ngôn ngữ truy vấn đều cung cấp một cơ chế để sắp xếp kết quả truy vấn.
JPQL cung cấp một mệnh đề ORDER BY, tương tự như SQL.

Truy vấn sau đây trả về tất cả người dùng, được sắp xếp theo tên người dùng, mặc định là tăng dần:
select u from User u order by u.username

Bạn chỉ định thứ tự tăng hoặc giảm bằng cách sử dụng các từ khóa "asc" và "desc":
select u from User u order by u.username desc

Với API criteria query, bạn phải xác định thứ tự tăng và giảm bằng cách sử dụng asc() hoặc desc():
Root<User> u = criteria.from(User.class);
criteria.select(u).orderBy(
    cb.desc(u.get("username"))
);

Bạn có thể sắp xếp nhiều thuộc tính:

select u from User u order by u.activated desc, u.username asc
----------------------------------------------------------------
Root<User> u = criteria.from(User.class);
criteria.select(u).orderBy(
    cb.desc(u.get("activated")),
    cb.asc(u.get("username"))
);


Order of nulls
Nếu cột mà bạn đang sắp xếp có thể là NULL, các hàng với giá trị NULL có thể nằm đầu hoặc cuối trong kết quả truy vấn.
Hành vi này phụ thuộc vào hệ quản trị cơ sở dữ liệu (DBMS) của bạn, vì vậy đối với các ứng dụng di động, bạn nên xác định
liệu NULL nên nằm đầu hoặc cuối với mệnh đề ORDER BY ... NULLS FIRST|LAST. Hibernate hỗ trợ mệnh đề này trong JPQL,
tuy nhiên, điều này không được tiêu chuẩn hóa trong JPA. Một cách thay thế, bạn có thể đặt một thứ tự mặc định với
thuộc tính cấu hình đơn vị bền vững (persistence unit) hibernate.order_by.default_null_ordering được đặt thành none (mặc định),
first hoặc last.


[Hibernate Feature]

The JPA specification chỉ cho phép sử dụng các thuộc tính/đường dẫn trong mệnh đề ORDER BY nếu mệnh đề SELECT
trình bày các thuộc tính/đường dẫn tương tự. Tuy nhiên, Hibernate có thể cho phép một số truy vấn không tuân theo tiêu chuẩn
và hoạt động theo cách khác:

select i.name from Item i order by i.buyNowPrice asc
select i from Item i order by i.seller.username desc

Trong các ví dụ cung cấp, bạn nên cẩn thận khi sử dụng các kết nối nội tại ngầm trong biểu thức đường dẫn và mệnh đề
ORDER BY. Truy vấn cuối cùng, ví dụ, sẽ trả về chỉ các trường hợp Item có một người bán. Điều này có thể gây bất ngờ,
đặc biệt nếu cùng một truy vấn mà không có mệnh đề ORDER BY sẽ trả về tất cả các trường hợp Item. Vấn đề này có thể
trở nên rõ ràng hơn với các tham chiếu tùy chọn. Một cuộc thảo luận chi tiết hơn về kết nối nội tại và biểu thức đường dẫn
sẽ được đề cập sau trong chương này.

Tính đến thời điểm này, bạn đã biết cách viết các mệnh đề FROM, WHERE và ORDER BY. Bạn đã biết cách chọn các thực thể
bạn muốn truy xuất và áp dụng các biểu thức và hoạt động cần thiết để giới hạn và sắp xếp kết quả. Bước tiếp theo là
khả năng trích xuất dữ liệu từ kết quả này để đáp ứng nhu cầu của ứng dụng của bạn.


