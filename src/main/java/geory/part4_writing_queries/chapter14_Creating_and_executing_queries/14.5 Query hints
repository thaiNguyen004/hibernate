Trong phần này, chúng tôi giới thiệu một số tùy chọn truy vấn bổ sung từ tiêu chuẩn JPA và một số cài đặt độc quyền của Hibernate.
Như tên gọi của nó, bạn có khả năng không cần đến chúng ngay lập tức, vì vậy bạn có thể bỏ qua phần này nếu bạn muốn và
đọc nó sau này như một tài liệu tham khảo.

Tất cả các ví dụ sử dụng cùng một truy vấn, được hiển thị ở đây:

String queryString = "select i from Item i";

Nói chung, bạn có thể đặt một hint trên một Query bằng phương thức setHint(). Tất cả các API truy vấn khác,
chẳng hạn như TypedQuery và StoredProcedureQuery, cũng có phương thức này. Nếu nhà cung cấp bền vững không hỗ trợ Hint,
thì nhà cung cấp sẽ lặng lẽ bỏ qua nó.

JPA chuẩn hóa các hint được hiển thị trong bảng 14.1.

- Name
- Value
- Description


- javax.persistence.query.
timeout
- (Milliseconds)
- Đặt thời gian chờ cho việc thực thi truy vấn. Gợi ý này cũng có sẵn dưới dạng một hằng số trong
org.hibernate.annotations.QueryHints.TIMEOUT_JPA.


- javax.persistence.cache.
  retrieveMode
- USE | BYPASS
- Kiểm soát việc Hibernate cố gắng đọc dữ liệu từ bộ nhớ đệm cấp 2 chia sẻ khi tạo kết quả truy vấn, hoặc bỏ qua bộ
nhớ đệm và chỉ đọc dữ liệu từ kết quả truy vấn.

- javax.persistence.cache.
  storeMode
- USE | BYPASS |REFRESH
- Kiểm soát việc Hibernate lưu trữ dữ liệu trong bộ nhớ đệm cấp 2 chia sẻ khi tạo kết quả truy vấn.

Hibernate có những hint cụ thể của nhà cung cấp cho truy vấn, cũng có sẵn dưới dạng các hằng số trên o
rg.hibernate.annotations.QueryHints; xem bảng 14.2.

- Name
- Value
- Dedscription

- org.hibernate.flushMode
- org.hibernate.FlushMode (Enum)
- Kiểm soát việc liệu và khi nào persistence unit được flush trước khi thực thi truy vấn.

- org.hibernate.readOnly
- true | false
- Kích hoạt hoặc vô hiệu hóa kiểm tra thay đổi (dirty checking) cho các thể hiện thực thể được quản lý được trả về bởi truy vấn.

- org.hibernate.comment
- (SQL comment string)
- Một ghi chú được thêm vào đầu SQL, hữu ích để ghi log (log) dữ liệu vào cơ sở dữ liệu.

Second-level shared caching (đặc biệt là query caching) là một vấn đề phức tạp, vì vậy chúng tôi sẽ dành phần 20.2 để nó.
Bạn nên đọc phần đó trước khi bật bộ nhớ chia sẻ: việc đặt chế độ bộ nhớ đệm thành "kích hoạt" cho một truy vấn sẽ không có tác dụng. Một số hint khác cũng xứng đáng được giải thích chi tiết hơn.


14.5.1 Setting a timeout
Bạn có thể kiểm soát thời gian để cho một truy vấn chạy bằng cách thiết lập một thời gian chờ (timeout):

Query query = em.createQuery(queryString)
        .setHint("javax.persistence.query.timeout", 60000);     // 1 minute

Với Hibernate, phương thức này có cùng ý nghĩa và tác động như phương thức setQueryTimeout() trên API JDBC Statement.
Lưu ý rằng một trình điều khiển JDBC không nhất thiết phải hủy truy vấn ngay lập tức khi thời gian chờ kết thúc.
Đặc tả JDBC nói: "Sau khi nguồn dữ liệu có cơ hội xử lý yêu cầu để kết thúc lệnh đang chạy, một SQLException sẽ được ném
đến máy khách...". Do đó, có sự hiểu biết về việc nguồn dữ liệu có cơ hội chấm dứt lệnh khi nào chính xác.
Điều này có thể chỉ xảy ra sau khi việc thực thi hoàn thành. Bạn có thể muốn thử nghiệm điều này với sản phẩm DBMS và
trình điều khiển của bạn.

Bạn cũng có thể chỉ định hint thời gian chờ này như một thuộc tính mặc định toàn cầu trong persistence.xml như một thuộc tính
khi tạo EntityManagerFactory hoặc như một tùy chọn truy vấn được đặt tên. Phương thức Query#setHint() sau đó ghi đè hint
mặc định toàn cầu này cho một truy vấn cụ thể.


14.5.2 Setting the flush mode
Hãy giả sử rằng bạn thực hiện các sửa đổi cho các thể hiện thực thể bền vững trước khi thực hiện một truy vấn. 
Ví dụ, bạn sửa đổi tên của các thể hiện quản lý Item. Những sửa đổi này chỉ tồn tại trong bộ nhớ, vì vậy Hibernate theo 
mặc định đẩy persistence unit và tất cả các thay đổi vào cơ sở dữ liệu trước khi thực thi truy vấn của bạn.
Điều này đảm bảo rằng truy vấn chạy trên dữ liệu hiện tại và không có xung đột giữa kết quả truy vấn và các thể hiện
trong bộ nhớ có thể xảy ra.

Điều này có thể không thực tế đôi khi, nếu bạn thực thi một chuỗi bao gồm nhiều hoạt động query-modify-query-modify,
và mỗi truy vấn đang truy xuất một tập dữ liệu khác với trước đó. Nói cách khác, đôi khi bạn biết rằng bạn không cần đẩy
các sửa đổi của bạn vào cơ sở dữ liệu trước khi thực hiện một truy vấn, vì kết quả xung đột không phải là vấn đề. Lưu ý rằng persistence unit cung cấp tính năng đọc lặp lại cho các thể hiện thực thể, vì vậy chỉ kết quả thuần túy của một truy vấn là vấn đề thôi.

Bạn có thể vô hiệu hóa việc đẩy persistence unit vào trước một truy vấn với hint org.hibernate.flushMode trên một Query
và giá trị org.hibernate.FlushMode.COMMIT. Rất may, JPA có một phương thức setFlushMode() chuẩn trên EntityManager và API
Query, và FlushModeType.COMMIT cũng được chuẩn hóa. Vì vậy, nếu bạn chỉ muốn vô hiệu hóa việc flush trước một truy vấn cụ thể,
hãy sử dụng API chuẩn:

Query query = em.createQuery(queryString)
    .setFlushMode(FlushModeType.COMMIT);

Khi chế độ đẩy được đặt thành COMMIT, Hibernate sẽ không đẩy ngữ cảnh lưu trữ trước khi thực thi truy vấn.
Chế độ mặc định là AUTO.

14.5.4 Setting a fetch size
Kích thước truy xuất (fetch size) là một hint tối ưu hóa cho trình điều khiển cơ sở dữ liệu:

Query query = em.createQuery(queryString)
    .setHint(
        org.hibernate.annotations.QueryHints.FETCH_SIZE,
        50
);

Gợi ý này có thể không mang lại bất kỳ cải thiện về hiệu suất nếu trình điều khiển không thực hiện chức năng này.
Nếu trình điều khiển thực hiện, nó có thể cải thiện giao tiếp giữa client JDBC và cơ sở dữ liệu bằng cách truy xuất nhiều
hàng dữ liệu trong một lô khi client (Hibernate) hoạt động trên kết quả truy vấn (tức là trên một ResultSet).


14.5.5 Setting an SQL comment
Khi bạn tối ưu hóa một ứng dụng, đôi khi bạn cần đọc các bản ghi SQL phức tạp. Chúng tôi rất khuyến nghị bạn bật thuộc tính
hibernate.use_sql_comments trong cấu hình persistence.xml của bạn. Hibernate sau đó sẽ thêm một ghi chú tự động tạo
cho mỗi câu lệnh SQL mà nó ghi vào các bản ghi.

Bạn có thể đặt một ghi chú tùy chỉnh cho một Query cụ thể bằng một hint:

Query query = em.createQuery(queryString)
    .setHint(
        org.hibernate.annotations.QueryHints.COMMENT,
        "Custom SQL comment"
);

Những hint mà bạn đã đặt cho đến nay đều liên quan đến việc xử lý của Hibernate hoặc JDBC. Rất nhiều nhà phát triển 
(và các DBA) xem xét một query hint là một thứ hoàn toàn khác. Trong SQL, một query hint là một chỉ thị trong câu lệnh SQL 
dành cho trình tối ưu hóa của DBMS. Ví dụ, nếu nhà phát triển hoặc DBA nghĩ rằng kế hoạch thực thi được lựa chọn bởi 
trình tối ưu hóa cơ sở dữ liệu cho một câu lệnh SQL cụ thể không phải là nhanh nhất, họ sử dụng một hint để buộc một kế hoạch thực thi khác. Hibernate và Java Persistence không hỗ trợ các hint SQL tùy ý với một API; bạn sẽ phải sử dụng SQL native và viết câu lệnh SQL của riêng bạn - tất nhiên, bạn có thể thực thi câu lệnh đó bằng các API được cung cấp.

Tuy nhiên, với một số sản phẩm DBMS, bạn có thể kiểm soát trình tối ưu hóa bằng một chú thích SQL ở đầu câu lệnh SQL.
Trong trường hợp đó, hãy sử dụng chú thích hint như trong ví dụ cuối cùng.

Trong tất cả các ví dụ trước đó, bạn đã đặt query hint trực tiếp trên thể hiện Query. Nếu bạn đã tách biệt và đặt tên
các truy vấn, bạn phải đặt hint trong các chú thích hoặc tệp XML.

14.5.6 Named query hints
Tất cả các query hints được đặt trước đó bằng setHint() cũng có thể được đặt trong dữ liệu XML trong phần tử <named-query>
hoặc <named-native-query>.

<entity-mappings
    version="2.1"
    xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
                http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <named-query name="findItems">
        <query><![CDATA[
            select i from Item i
        ]]></query>
        <hint name="javax.persistence.query.timeout" value="60000"/>
        <hint name="org.hibernate.comment" value="Custom SQL comment"/>
    </named-query>

</entity-mappings>

Bạn có thể đặt các hint trên các truy vấn được đặt tên được định nghĩa trong chú thích:
@NamedQueries({
    @NamedQuery(
        name = "findItemByName",
        query = "select i from Item i where i.name like :name",
        hints = {
            @QueryHint(
                name = org.hibernate.annotations.QueryHints.TIMEOUT_JPA,
                value = "60000"),
            @QueryHint(
                name = org.hibernate.annotations.QueryHints.COMMENT,
                value = "Custom SQL comment")
        }
    )
})

[Hibernate Feature]

Hints có thể được đặt trên các truy vấn được đặt tên trong các chú thích Hibernate trong tệp package-info.java:

@org.hibernate.annotations.NamedQueries({
    @org.hibernate.annotations.NamedQuery(
        name = "findItemBuyNowPriceGreaterThan",
        query = "select i from Item i where i.buyNowPrice > :price",
        timeout = 60,
        comment = "Custom SQL comment"
    )
})
package org.jpwh.model.querying;

[Hibernate Feature]

Ngoài ra, dĩ nhiên, hints cũng có thể được đặt trên các truy vấn được đặt tên được tách ra vào một tệp metadata XML của Hibernate:

<?xml version="1.0"?>
<hibernate-mapping xmlns="http://www.hibernate.org/xsd/orm/hbm">
    <query name="findItemsOrderByAuctionEndHibernateWithHints"
        cache-mode="ignore"
        comment="Custom SQL comment"
        fetch-size="50"
        read-only="true"
        timeout="60">
        select i from Item i order by i.auctionEnd asc
    </query>
</hibernate-mapping>


