Hibernate thực thi các câu lệnh SQL SELECT để nạp dữ liệu vào bộ nhớ. Nếu bạn nạp một thể hiện thực thể, một hoặc nhiều
câu SELECT sẽ được thực thi, tùy thuộc vào số lượng bảng được liên quan và chiến lược truy xuất bạn đã áp dụng.
Item tiêu của bạn là làm tối thiểu số lượng câu lệnh SQL và đơn giản hóa các câu lệnh SQL sao cho việc truy vấn có
thể hiệu quả nhất.

Hãy xem xét kế hoạch truy xuất mà chúng tôi đề xuất từ trước trong chương này: mọi mối quan hệ và collection nên được
nạp theo yêu cầu, lười biếng. Kế hoạch truy xuất mặc định này có thể dẫn đến quá nhiều câu lệnh SQL, mỗi câu chỉ nạp
một phần nhỏ dữ liệu. Điều này sẽ dẫn đến vấn đề n+1 selects, và chúng tôi sẽ thảo luận về vấn đề này đầu tiên.
Kế hoạch truy xuất thay thế, sử dụng việc eager load, sẽ dẫn đến ít câu lệnh SQL hơn, vì các phần lớn dữ liệu được nạp vào
bộ nhớ với mỗi truy vấn SQL. Sau đó, bạn có thể thấy vấn đề sản phẩm Descartes, khi bộ kết quả SQL trở nên quá lớn.

Bạn cần tìm ra điểm cân bằng giữa hai mức độ tương phản này: chiến lược truy xuất lý tưởng cho mỗi thủ tục và trường hợp
sử dụng trong ứng dụng của bạn. Tương tự như kế hoạch truy xuất, bạn có thể đặt một chiến lược truy xuất toàn cầu
trong ánh xạ của bạn: thiết lập mặc định luôn hoạt động. Sau đó, đối với một thủ tục cụ thể, bạn có thể ghi đè lên chiến
lược truy xuất mặc định bằng một truy vấn JPQL tùy chỉnh, CriteriaQuery, hoặc thậm chí là SQL tùy chỉnh.

Trước hết, hãy thảo luận về các vấn đề cơ bản bạn thấy, bắt đầu bằng vấn đề n+1 selects.


12.2.1 The n+1 selects problem

Vấn đề này dễ hiểu hơn thông qua một số đoạn mã ví dụ. Hãy giả sử bạn đã ánh xạ một kế hoạch truy xuất lười biếng,
vì vậy mọi thứ được nạp theo yêu cầu. Đoạn mã ví dụ sau kiểm tra xem seller của từng Item có một tên người dùng (username):
PATH: /examples/src/test/java/org/jpwh/test/fetching/NPlusOneSelects.java

List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM
for (Item item : items) {
    assertNotNull(item.getSeller().getUsername());      // Each seller must be loaded with an additional SELECT
    // select * from USERS where ID = ?
}

Bạn thấy một truy vấn SQL SELECT để nạp các thể hiện thực thể `Item`. Sau đó, trong khi bạn lặp qua tất cả các mục,
việc truy xuất từng `User` yêu cầu một SELECT bổ sung. Điều này dẫn đến một truy vấn cho `Item` cộng với n truy vấn,
phụ thuộc vào số lượng các mục bạn có và xem liệu một `User` cụ thể có bán nhiều hơn một `Item` hay không.
Rõ ràng, đây là một chiến lược rất không hiệu quả nếu bạn biết bạn sẽ truy cập người bán của từng `Item`.

Bạn có thể thấy cùng một vấn đề với các collection được nạp theo yêu cầu. Ví dụ dưới đây kiểm tra xem mỗi `Item`
có lượt đặt giá nào không:

PATH: /examples/src/test/java/org/jpwh/test/fetching/NPlusOneSelects.java
List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM
for (Item item : items) {
    assertTrue(item.getBids().size() > 0);
    // select * from BID where ITEM_ID = ?
}

Một lần nữa, nếu bạn biết bạn sẽ truy xuất từng collection bid, việc chỉ nạp một lần cho mỗi collection là không hiệu quả.
Nếu bạn có 100 mục, bạn sẽ thực hiện 101 truy vấn SQL!

Dựa trên những gì bạn biết cho đến nay, bạn có thể cảm thấy có kế hoạch truy xuất mặc định trong ánh xạ của bạn
và đặt `FetchType.EAGER` cho các mối quan hệ seller hoặc bids. Nhưng làm như vậy có thể dẫn đến vấn đề tiếp theo của chúng ta:
vấn đề sản phẩm Descartes (Cartesian product problem).


Vấn đề sản phẩm Descartes, thường được gọi là "Cartesian product problem," xảy ra khi bạn sử dụng chiến lược truy xuất sớm (eager loading)
để nạp các mối quan hệ hoặc collection mà kết quả là một số lượng lớn dữ liệu không mong muốn. Ví dụ:

Giả sử bạn có hai bảng: Order và Product, và có mối quan hệ một-nhiều giữa chúng. Một đơn hàng (Order) có thể chứa nhiều
sản phẩm (Product). Nếu bạn sử dụng chiến lược truy xuất sớm (eager loading) để nạp tất cả các sản phẩm cho mỗi đơn hàng
khi bạn lấy dữ liệu đơn hàng, điều này có thể dẫn đến vấn đề.

12.2.2 The Cartesian product problem

Nếu bạn xem xét mô hình miền và mô hình dữ liệu của bạn và nói, "Mỗi khi cần một đối tượng Item, tôi cũng cần người bán
của đối tượng Item đó," bạn có thể ánh xạ mối quan hệ với `FetchType.EAGER` thay vì một kế hoạch truy xuất lười biếng.
Bạn muốn đảm bảo rằng mỗi khi một đối tượng Item được nạp, người bán sẽ được nạp ngay lập tức - bạn muốn dữ liệu đó sẵn có
khi đối tượng Item được tách ra (detached) và persistence context bị đóng (persistence context is closed):

PATH: /model/src/main/java/org/jpwh/model/fetching/cartesianproduct/Item.java
@Entity
public class Item {
    @ManyToOne(fetch = FetchType.EAGER)
    protected User seller;
    // ...
}

Để thực hiện kế hoạch truy xuất sớm (eager fetch plan) của bạn, Hibernate sử dụng phép JOIN SQL để nạp cùng lúc một đối tượng `Item`
và một đối tượng `User` bằng một câu lệnh SELECT duy nhất:

item = em.find(Item.class, ITEM_ID);
// select i.*, u.*
// from ITEM i
// left outer join USERS u on u.ID = i.SELLER_ID
// where i.ID = ?

Bộ kết quả chứa một dòng dữ liệu từ bảng ITEM được kết hợp với dữ liệu từ bảng USERS, như được hiển thị trong hình 12.4.
Truy xuất sớm (eager fetching) với chiến lược JOIN mặc định không gây vấn đề cho các mối quan hệ `@ManyToOne` và `@OneToOne`. 
Bạn có thể eager load, bằng một câu truy vấn SQL và phép JOIN, một `Item`, người bán của nó, Địa chỉ của User, Thành phố mà họ sống, 
và vân vân. Thậm chí nếu bạn ánh xạ tất cả các mối quan hệ này với `FetchType.EAGER`, bộ kết quả vẫn chỉ có một hàng dữ liệu. 
Bây giờ, Hibernate sẽ phải dừng theo kế hoạch `FetchType.EAGER` của bạn tại một thời điểm nào đó. Số lượng bảng kết nối 
phụ thuộc vào thuộc tính cấu hình toàn cục `hibernate.max_fetch_depth`. Mặc định, không có giới hạn được đặt. Giá trị hợp lý 
thường nhỏ, thường nằm trong khoảng từ 1 đến 5. Bạn cũng có thể tắt FETCH JOIN cho các mối quan hệ `@ManyToOne` và `@OneToOne` 
bằng cách đặt thuộc tính này thành 0. Nếu Hibernate đạt đến giới hạn, nó vẫn sẽ eager load dữ liệu theo kế hoạch truy xuất của bạn, 
nhưng với các câu lệnh SELECT bổ sung. (Lưu ý rằng một số hệ thống cơ sở dữ liệu có thể đặt sẵn thuộc tính này: 
ví dụ, MySQL-Dialect đặt nó thành 2.)

Tuy nhiên, việc eager load các collection bằng cách sử dụng JOIN có thể dẫn đến các vấn đề hiệu suất nghiêm trọng. Nếu bạn 
chuyển sang `FetchType.EAGER` cho các collection bids và images, bạn có thể gặp phải vấn đề sản phẩm Descartes.

Vấn đề này xảy ra khi bạn eager load hai collection với một câu truy vấn SQL và phép JOIN. Trước hết, hãy tạo một kế hoạch
truy xuất như vậy và sau đó xem xét vấn đề SQL:
PATH: /model/src/main/java/org/jpwh/model/fetching/cartesianproduct/Item.java
@Entity
public class Item {
    @OneToMany(mappedBy = "item", fetch = FetchType.EAGER)
    protected Set<Bid> bids = new HashSet<>();

    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "IMAGE")
    @Column(name = "FILENAME")
    protected Set<String> images = new HashSet<String>();
    // ...
}

Không quan trọng liệu cả hai collection đó có phải là `@OneToMany`, `@ManyToMany`, hay `@ElementCollection`.
Việc eager load một collection cùng một lúc bằng toán tử SQL JOIN là vấn đề cơ bản, không quan trọng nội dung của
collection là gì. Nếu bạn nạp một `Item`, Hibernate thực thi câu lệnh SQL gây ra vấn đề:

PATH: /examples/src/test/java/org/jpwh/test/fetching/CartesianProduct.java

Item item = em.find(Item.class, ITEM_ID);
// select i.*, b.*, img.*
// from ITEM i
// left outer join BID b on b.ITEM_ID = i.ID
// left outer join IMAGE img on img.ITEM_ID = i.ID
// where i.ID = ?

em.detach(item);
assertEquals(item.getImages().size(), 3);
assertEquals(item.getBids().size(), 3);

Như bạn có thể thấy, Hibernate đã tuân thủ kế hoạch truy xuất sớm của bạn, và bạn có thể truy cập các collection bids và images
khi đối tượng đã tách ra (detached). Vấn đề ở đây là cách chúng được nạp, với một phép JOIN SQL dẫn đến việc tạo ra một sản phẩm.
Hãy xem bảng kết quả trong hình 12.5.

Bảng kết quả này chứa nhiều mục dữ liệu lặp lại, và chỉ các ô được đánh màu là có liên quan đối với Hibernate.
Đối tượng `Item` có ba lượt đặt giá (bids) và ba hình ảnh (images). Kích thước của sản phẩm phụ thuộc vào kích thước các
collection bạn đang truy xuất: ba lần ba là tám hàng tổng cộng. Bây giờ hãy tưởng tượng bạn có một `Item` với 50 lượt
đặt giá và 5 hình ảnh - bạn sẽ thấy một bảng kết quả có thể có 250 hàng! Bạn có thể tạo ra những sản phẩm SQL lớn hơn
nữa khi viết các truy vấn riêng của mình bằng JPQL hoặc CriteriaQuery: hãy tưởng tượng xem điều gì sẽ xảy ra nếu bạn nạp
500 đối tượng và eager-fetch hàng chục lượt đặt giá và hình ảnh với các phép JOIN.

Để tạo ra những kết quả như vậy, cần phải sử dụng một lượng xử lý và bộ nhớ đáng kể trên máy chủ cơ sở dữ liệu, sau đó phải
chuyển chúng qua mạng. Nếu bạn hy vọng rằng trình điều khiển JDBC sẽ nén dữ liệu trên đường truyền một cách nào đó,
thì có lẽ bạn đang kỳ vọng quá nhiều từ các nhà cung cấp cơ sở dữ liệu. Hibernate ngay lập tức loại bỏ tất cả các bản sao
khi nó chuyển dữ liệu kết quả thành các thể hiện và collection bền vững; thông tin trong các ô không được đánh màu trong hình
12.5 sẽ bị bỏ qua. Rõ ràng, bạn không thể loại bỏ những bản sao này ở mức SQL; toán tử SQL DISTINCT không giúp ở đây.

Thay vì một truy vấn SQL với một kết quả cực kỳ lớn, ba truy vấn riêng biệt sẽ nhanh hơn để lấy một đối tượng thực thể
và hai collection cùng một lúc. Tiếp theo, chúng tôi sẽ tập trung vào loại tối ưu hóa này và cách bạn tìm và triển khai
chiến lược truy xuất tốt nhất. Chúng tôi bắt đầu lại với kế hoạch truy xuất lười biếng mặc định và cố gắng giải quyết
vấn đề n+1 lần truy vấn đầu tiên.

[Hibernate Feature]
12.2.3 Prefetching data in batches
Tìm nạp trước dữ liệu theo lô

Nếu Hibernate chỉ nạp mọi mối quan hệ thực thể và collection khi cần thiết, có thể cần nhiều truy vấn SQL SELECT bổ sung 
để hoàn thành một thủ tục cụ thể. Giống như trước đây, hãy xem xét một thủ tục kiểm tra xem người bán của mỗi item
có username hay không. Với lazy loading, điều này sẽ yêu cầu một SELECT để lấy tất cả các đối tượng Item
và nhiều SELECT nữa để khởi tạo proxy của người bán (seller) của từng Item.

Hibernate cung cấp các thuật toán có thể tải sẵn dữ liệu. Thuật toán đầu tiên chúng ta sẽ thảo luận là batch fetching, 
và nó hoạt động như sau: nếu Hibernate phải khởi tạo một proxy User, hãy tiến hành khởi tạo nhiều proxy khác cùng với 
cùng một SELECT. Nói cách khác, nếu bạn đã biết rằng có một số đối tượng Item trong persistence context và tất cả chúng
đều có một proxy áp dụng cho mối quan hệ seller của họ, bạn có thể khởi tạo một số lượng lớn proxy thay vì chỉ một nếu
bạn thực hiện một chuyến đi đòi hỏi truy xuất đến cơ sở dữ liệu.

Hãy xem cách điều này hoạt động. Trước tiên, bật batch fetching cho các đối tượng User bằng một chú thích Hibernate độc quyền:

PATH: /model/src/main/java/org/jpwh/model/fetching/batch/User.java
@Entity
@org.hibernate.annotations.BatchSize(size = 10)
@Table(name = "USERS")
public class User {
    // ...
}

Cài đặt này cho biết với Hibernate rằng nó có thể tải lên đến 10 proxy User nếu cần tải một proxy, tất cả được tải bằng
cùng một SELECT. Batch fetching thường được gọi là một tối ưu hóa dự đoán mù quáng, vì bạn không biết có bao nhiêu proxy User
chưa được khởi tạo có thể tồn tại trong một ngữ cảnh tích lũy cụ thể. Bạn không thể khẳng định rằng 10 là một giá trị
lý tưởng - đó chỉ là một dự đoán. Bạn biết rằng thay vì n+1 truy vấn SQL, bạn sẽ thấy n+1/10 truy vấn, giảm đáng kể.
Các giá trị hợp lý thường nhỏ, vì bạn cũng không muốn tải quá nhiều dữ liệu vào bộ nhớ, đặc biệt là nếu bạn không
chắc chắn rằng bạn sẽ cần nó.

Dưới đây là thủ tục được tối ưu hóa, kiểm tra tên người dùng của mỗi người bán:

PATH: /examples/src/test/java/org/jpwh/test/fetching/Batch.java
List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM
for (Item item : items) {
    assertNotNull(item.getSeller().getUsername());
    // select * from USERS where ID in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
}

Lưu ý truy vấn SQL mà Hibernate thực thi trong khi bạn lặp qua các item. Khi bạn gọi `item.getSeller().getUserName()` lần đầu tiên,
Hibernate phải khởi tạo proxy User đầu tiên. Thay vì chỉ tải một hàng duy nhất từ bảng USERS, Hibernate truy vấn và lấy nhiều hàng dữ liệu,
và tối đa 10 thể hiện User được nạp. Khi bạn truy cập người bán thứ 11, 10 thể hiện khác được nạp cùng một lúc, và cứ tiếp tục
như vậy cho đến khi ngữ cảnh tích lũy không chứa thêm bất kỳ proxy User chưa được khởi tạo nào nữa.


Câu hỏi thường gặp: Thuật toán batch-fetching thực sự là gì?
Giải thích của chúng tôi về tải dữ liệu theo batch đã được đơn giản hóa một chút và bạn có thể thấy một thuật toán có sự
khác biệt nhỏ trong thực tế. Ví dụ, hãy tưởng tượng một kích thước batch là 32. Vào thời gian khởi đầu, Hibernate tạo
nhiều bộ nạp batch bên trong. Mỗi bộ nạp biết được mình có thể khởi tạo bao nhiêu proxy: 32, 16, 10, 9, 8, 7, ..., 1.
Mục tiêu là làm giảm tiêu thụ bộ nhớ cho việc tạo bộ nạp và tạo đủ nhiều bộ nạp để có thể tạo ra mọi batch fetch có thể xảy ra.
Mục tiêu khác là làm giảm số lượng truy vấn SQL, rõ ràng là vậy.

Để khởi tạo 31 proxy, Hibernate thực hiện 3 batch (bạn có thể mong đợi là 1, vì 32 > 31). Các bộ nạp batch được áp dụng
là 16, 10 và 5, được tự động lựa chọn bởi Hibernate. Bạn có thể tùy chỉnh thuật toán batch-fetching này bằng thuộc tính
`hibernate.batch_fetch_style` trong cấu hình persistence unit của bạn. Giá trị mặc định là `LEGACY`, mà xây dựng và
chọn nhiều bộ nạp batch khi khởi đầu. Các tùy chọn khác bao gồm `PADDED` và `DYNAMIC`. Với `PADDED`, Hibernate chỉ xây
dựng một truy vấn SQL batch loader duy nhất khi khởi đầu với các chỗ giữ chỗ cho 32 đối số trong mệnh đề IN và sau đó
lặp lại các danh tính ràng buộc nếu có ít hơn 32 proxy cần được tải. Với `DYNAMIC`, Hibernate xây dựng truy vấn SQL batch
một cách động vào thời gian chạy, khi nó biết số lượng proxy cần khởi tạo.

Batch fetching cũng có sẵn cho các collection:
PATH: /model/src/main/java/org/jpwh/model/fetching/batch/Item.java

@Entity
public class Item {
    @OneToMany(mappedBy = "item")
    @org.hibernate.annotations.BatchSize(size = 5)
    protected Set<Bid> bids = new HashSet<>();
    // ...
}


Nếu bạn bây giờ buộc khởi tạo một collection bids, lên đến năm collection Item#bids khác, nếu chúng chưa được khởi tạo
trong persistence context hiện tại, sẽ được tải ngay lập tức:

PATH: /examples/src/test/java/org/jpwh/test/fetching/Batch.java

List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM
for (Item item : items) {
    assertTrue(item.getBids().size() > 0);
    // select * from BID where ITEM_ID in (?, ?, ?, ?, ?)
}

Khi bạn gọi `item.getBids().size()` lần đầu trong quá trình lặp, một lô hoàn chỉnh các collection Bid được tải trước cho
các instance Item khác.
Batch fetching là một tối ưu hóa đơn giản và thường là một cách tối ưu để giảm đáng kể số lượng câu lệnh SQL mà nếu
không bạn phải thực hiện để khởi tạo tất cả các proxy và collection. Mặc dù bạn có thể tải trước dữ liệu mà bạn sẽ không
cần ở cuối cùng và tiêu thụ nhiều bộ nhớ hơn, sự giảm thiểu về số lượt truy vấn cơ sở dữ liệu có thể tạo ra sự khác biệt lớn.
Bộ nhớ rẻ, nhưng việc mở rộng máy chủ cơ sở dữ liệu không rẻ.

Một thuật toán prefetching khác không phải là một đoán mù mà sử dụng subselects để khởi tạo nhiều collection bằng một
câu lệnh đơn.


[Hibernate Feature]
12.2.4 Prefetching collections with subselects

Một chiến lược có thể tốt hơn để tải tất cả các lượt đặt giá của nhiều mục là sử dụng prefetching với một subselect.
Để kích hoạt tối ưu hóa này, thêm một Hibernate annotation vào ánh xạ của collection của bạn:

PATH: /model/src/main/java/org/jpwh/model/fetching/subselect/Item.java

public class Item {
    @OneToMany(mappedBy = "item")
    @org.hibernate.annotations.Fetch(
        org.hibernate.annotations.FetchMode.SUBSELECT
    )
    protected Set<Bid> bids = new HashSet<>();
    // ...
}

Bây giờ, Hibernate sẽ khởi tạo tất cả các collection bids cho tất cả các mục đã tải ngay khi bạn buộc việc khởi tạo một
collection bids:

PATH: /examples/src/test/java/org/jpwh/test/fetching/Subselect.java

List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM
for (Item item : items) {
    assertTrue(item.getBids().size() > 0);
    // select * from BID where ITEM_ID in (
    //      select ID from ITEM
    // )
}

Hibernate ghi nhớ câu truy vấn gốc được sử dụng để tải các item. Sau đó, nó nhúng câu truy vấn gốc này (được điều chỉnh một chút) 
vào một subselect, để lấy collection bids cho mỗi item.

Prefetching sử dụng subselect là một tối ưu hóa mạnh mẽ, nhưng vào thời điểm viết, nó chỉ có sẵn cho các collection lazy,
không áp dụng cho entity proxies. Hãy lưu ý rằng câu truy vấn gốc được chạy lại dưới dạng subselect chỉ được Hibernate ghi nhớ
cho một context persistence cụ thể. Nếu bạn detach một instance Item mà không khởi tạo collection bids, và sau đó ghép nó
vào một context persistence mới và bắt đầu duyệt qua collection, không có prefetching nào cho các collection khác xảy ra.
Prefetching sử dụng batch và subselect giúp giảm số lượng truy vấn cần thiết cho một thủ tục cụ thể nếu bạn duy trì một
kế hoạch fetch lazy toàn cầu trong ánh xạ của bạn, giúp giảm đi vấn đề n+1 selects. Tuy nhiên, nếu kế hoạch fetch toàn cầu
của bạn có các association và collection đã được eager loaded, bạn phải tránh vấn đề Cartesian product, ví dụ, bằng cách chia
câu truy vấn JOIN thành nhiều SELECT riêng lẻ.

[Hibernate Feature]

12.2.5 Eager fetching with multiple SELECTs
Khi bạn cố gắng tải nhiều collection bằng một câu truy vấn SQL và JOINs, bạn sẽ gặp phải vấn đề Descartes product,
như đã giải thích trước đây. Thay vì sử dụng phép JOIN, bạn có thể cho Hibernate biết để tải dữ liệu một cách nhanh chóng bằng
các truy vấn SELECT bổ sung và do đó tránh kết quả lớn và sản phẩm SQL với các bản ghi trùng lặp.

PATH: /model/src/main/java/org/jpwh/model/fetching/eagerselect/Item.java

@Entity
public class Item {
    @ManyToOne(fetch = FetchType.EAGER)
    @org.hibernate.annotations.Fetch(
        org.hibernate.annotations.FetchMode.SELECT
    )
    protected User seller;

    @OneToMany(mappedBy = "item", fetch = FetchType.EAGER)
    @org.hibernate.annotations.Fetch(
        org.hibernate.annotations.FetchMode.SELECT
    )
    protected Set<Bid> bids = new HashSet<>();
    // ...
}
Bây giờ, khi một Item được tải, seller và các bids cũng phải được tải theo:

PATH: /examples/src/test/java/org/jpwh/test/fetching/EagerSelect.java

Item item = em.find(Item.class, ITEM_ID);
// select * from ITEM where ID = ?
// select * from USERS where ID = ?
// select * from BID where ITEM_ID = ?
em.detach(item);

assertEquals(item.getBids().size(), 3);
assertNotNull(item.getBids().iterator().next().getAmount());
assertEquals(item.getSeller().getUsername(), "johndoe");

Hibernate sử dụng một câu truy vấn SELECT để tải một hàng từ bảng ITEM. Sau đó, nó ngay lập tức thực hiện thêm hai câu 
truy vấn SELECT: một câu tải một hàng từ bảng USERS (người bán) và câu truy vấn khác tải một số hàng từ bảng BID (các lượt đặt giá).

Các truy vấn SELECT bổ sung không được thực hiện một cách lười biếng; phương thức find() tạo ra nhiều câu truy vấn SQL. 
Bạn có thể thấy là Hibernate đã tuân thủ kế hoạch fetch eager: tất cả dữ liệu có sẵn ở trạng thái detached.

Tuy nhiên, tất cả các thiết lập này là toàn cục; chúng luôn hoạt động. Nguy cơ là việc điều chỉnh một thiết lập cho 
một trường hợp gây phiền phức trong ứng dụng của bạn có thể có tác động tiêu cực đối với một số thủ tục khác. Việc duy trì 
sự cân bằng này có thể khó khăn, vì vậy khuyến nghị của chúng tôi là ánh xạ mọi association và collection thực thể dưới dạng
FetchType.LAZY, như đã đề cập trước đó.

Một cách tiếp cận tốt hơn là sử dụng eager fetching và các phép JOIN một cách động chỉ khi cần thiết, cho một thủ tục cụ thể.

12.2.6 Dynamic eager fetching

Như trong các phần trước, hãy giả sử bạn cần kiểm tra username của mỗi Item#seller. Với kế hoạch fetch global là lazy,
hãy tải dữ liệu cần thiết cho thủ tục này và áp dụng một chiến lược eager fetch động trong một truy vấn.

PATH: /examples/src/test/java/org/jpwh/test/fetching/EagerQuery.java

List<Item> items =
        em.createQuery("select i from Item i join fetch i.seller")
                .getResultList();
// select i.*, u.*
// from ITEM i
// inner join USERS u on u.ID = i.SELLER_ID
// where i.ID = ?
em.close();     // Detach all
for (Item item : items) {
    assertNotNull(item.getSeller().getUsername());
}

Những từ khóa quan trọng trong truy vấn JPQL này là "join fetch," cho biết Hibernate sử dụng một SQL JOIN (thực tế là INNER JOIN)
để lấy seller của mỗi item trong cùng một truy vấn. Cùng một truy vấn có thể được biểu thị bằng API CriteriaQuery thay vì một chuỗi JPQL.

PATH: /examples/src/test/java/org/jpwh/test/fetching/EagerQuery.java

CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery criteria = cb.createQuery();

Root<Item> i = criteria.from(Item.class);
i.fetch("seller");
criteria.select(i);
List<Item> items = em.createQuery(criteria).getResultList();
em.close();
for (Item item : items) {
    assertNotNull(item.getSeller().getUsername());
}

Eager join fetching động cũng hoạt động cho các collection. Ở đây, bạn tải tất cả bids của mỗi item.

PATH: /examples/src/test/java/org/jpwh/test/fetching/EagerQuery.java

List<Item> items =
            em.createQuery("select i from Item i left join fetch i.bids")
                    .getResultList();
// select i.*, b.*
// from ITEM i
// left outer join BID b on b.ITEM_ID = i.ID
// where i.ID = ?
em.close();
for (Item item : items) {
    assertTrue(item.getBids().size() > 0);
}

Now the same with the CriteriaQuery API:
PATH: /examples/src/test/java/org/jpwh/test/fetching/EagerQuery.java

CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery criteria = cb.createQuery();
Root<Item> i = criteria.from(Item.class);
i.fetch("bids", JoinType.LEFT);
criteria.select(i);
List<Item> items = em.createQuery(criteria).getResultList();
em.close();
for (Item item : items) {
    assertTrue(item.getBids().size() > 0);
}

Lưu ý rằng đối với việc tải collection, LEFT OUTER JOIN là cần thiết, vì bạn cũng muốn các hàng từ bảng ITEM nếu không
có bids nao. Chúng tôi sẽ có nhiều điều để nói về việc tải với JPQL và CriteriaQuery sau trong cuốn sách này, trong chương 15.
Bạn sẽ thấy nhiều ví dụ hơn về inner, outer, left và right joins, vì vậy đừng lo lắng quá về các chi tiết này bây giờ.

Viết truy vấn thủ công không phải là lựa chọn duy nhất nếu bạn muốn ghi đè kế hoạch tải toàn cầu của mô hình miền động của bạn.
Bạn có thể viết các profile tải một cách khai báo.

