Trường hợp sử dụng đầu tiên cho việc (lọc dữ liệu động-dynamic data filtering) liên quan đến bảo mật dữ liệu.
Một Người dùng trong Caveat-Emptor có thể có thuộc tính xếp hạng, đó là một số nguyên đơn giản:

PATH: /model/src/main/java/org/jpwh/model/filtering/dynamic/User.java

@Entity
@Table(name = "USERS")
public class User {
    @NotNull
    protected int rank = 0;
    // ...
}

Giả sử rằng người dùng chỉ có thể đặt thầu cho các mặt hàng mà người dùng khác đã đề xuất với xếp hạng bằng hoặc thấp hơn.
Trong kinh doanh, bạn có một số nhóm người dùng được xác định bằng một xếp hạng tùy ý (một con số), và người dùng chỉ có
thể giao dịch với những người có cùng hoặc xếp hạng thấp hơn.

Để triển khai yêu cầu này, bạn sẽ phải tùy chỉnh tất cả các truy vấn mà bạn sử dụng để nạp các mục hàng từ cơ sở dữ liệu.
Bạn sẽ kiểm tra xem Item#seller bạn muốn nạp có xếp hạng bằng hoặc thấp hơn so với người dùng đang đăng nhập hiện tại.
Hibernate có thể thực hiện công việc này cho bạn bằng cách sử dụng một bộ lọc động (dynamic filter).

13.4.1 Defining dynamic filters

Đầu tiên, bạn xác định bộ lọc của mình với tên và các tham số thời gian chạy động mà nó chấp nhận.
Bạn có thể đặt chú thích Hibernate cho định nghĩa này trên bất kỳ lớp thực thể nào của mô hình miền của bạn hoặc
trong tệp metadata package-info.java:

PATH: /model/src/main/java/org/jpwh/model/filtering/dynamic/package-info.java

@org.hibernate.annotations.FilterDef(
    name = "limitByUserRank",
    parameters = {
        @org.hibernate.annotations.ParamDef(
            name = "currentUserRank", type = "int"
        )
    }
)

Ví dụ này đặt tên cho bộ lọc này là "limitByUserRank"; lưu ý rằng tên bộ lọc phải là duy nhất trong một persistence unit.
Nó chấp nhận một đối số thời gian chạy kiểu int. Nếu bạn có nhiều định nghĩa bộ lọc, hãy khai báo chúng trong phạm vi
"@org.hibernate.annotations.FilterDefs".

Bộ lọc hiện đang không hoạt động; không có gì cho biết rằng nó nên được áp dụng cho các trường hợp của lớp Item.
Bạn phải áp dụng và thực hiện bộ lọc trên các lớp hoặc bộ sưu tập mà bạn muốn lọc.

13.4.2 Applying the filter
Bạn muốn áp dụng bộ lọc đã được xác định trên lớp Item để đảm bảo rằng không có mục hàng nào được hiển thị nếu người dùng
đăng nhập không có xếp hạng cần thiết.

PATH: /model/src/main/java/org/jpwh/model/filtering/dynamic/Item.java

@Entity
@org.hibernate.annotations.Filter(
    name = "limitByUserRank",
    condition =
        ":currentUserRank >= (" +
            "select u.RANK from USERS u " +
            "where u.ID = SELLER_ID" +
        ")"
)
public class Item {
    // ...
}

Điều kiện là một biểu thức SQL được truyền trực tiếp đến hệ thống cơ sở dữ liệu, vì vậy bạn có thể sử dụng bất kỳ toán tử
hoặc hàm SQL nào. Nó phải đánh giá là true nếu một bản ghi nên được đi qua bộ lọc. Trong ví dụ này, bạn sử dụng một con
truy vấn con để lấy xếp hạng của người bán của mặt hàng. Các cột không được định rõ, chẳng hạn như SELLER_ID, tham chiếu đến
bảng được ánh xạ thành lớp thực thể.

Nếu xếp hạng của người dùng đăng nhập hiện tại không lớn hơn hoặc bằng xếp hạng được trả về bởi con truy vấn con, thì trường hợp
Item sẽ bị loại bỏ. Bạn có thể áp dụng nhiều bộ lọc bằng cách nhóm chúng trong "@org.hibernate.annotations.Filters".

Một bộ lọc đã được xác định và áp dụng, nếu được bật cho một đơn vị công việc cụ thể, sẽ lọc bỏ bất kỳ trường hợp Item nào
không vượt qua điều kiện. Bây giờ, chúng ta hãy bật nó.

13.4.3 Enabling the filter
Bạn đã xác định một bộ lọc dữ liệu và áp dụng nó cho một lớp thực thể lưu trữ. Tuy nhiên, hiện tại nó vẫn chưa áp dụng
bộ lọc cho bất kỳ điều gì - để làm điều này, bạn cần bật và thiết lập tham số cho bộ lọc trong ứng dụng cho một
đơn vị công việc cụ thể, sử dụng API Session:

PATH: /examples/src/test/java/org/jpwh/test/filtering/DynamicFilter.java
org.hibernate.Filter filter = em.unwrap(Session.class)
        .enableFilter("limitByUserRank");
filter.setParameter("currentUserRank", 0);

Bạn bật bộ lọc bằng tên; phương thức sẽ trả về một đối tượng Filter, trên đó bạn có thể đặt các đối số thời gian chạy động.
Bạn phải đặt các tham số bạn đã xác định; ở đây nó được đặt thành xếp hạng 0. Ví dụ này sau đó sẽ lọc ra các item được bán bởi
một User có xếp hạng cao hơn trong phiên làm việc này.

Các phương thức hữu ích khác của Filter bao gồm getFilterDefinition() (cho phép bạn lặp qua tên và kiểu của các tham số)
và validate() (ném một HibernateException nếu bạn quên đặt một tham số). Bạn cũng có thể đặt một danh sách các đối số bằng
cách sử dụng setParameterList(); điều này thường hữu ích nếu ràng buộc SQL của bạn chứa một biểu thức với toán tử số lượng
(ví dụ: toán tử IN).

Bây giờ, mọi truy vấn JPQL hoặc truy vấn criteria mà bạn thực hiện trên persistence context đã được lọc sẽ hạn chế các
trường hợp Item được trả về:

PATH: /examples/src/test/java/org/jpwh/test/filtering/DynamicFilter.java

List<Item> items = em.createQuery("select i from Item i").getResultList();
// select * from ITEM where 0 >=
// (select u.RANK from USERS u where u.ID = SELLER_ID)

PATH: /examples/src/test/java/org/jpwh/test/filtering/DynamicFilter.java

CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery criteria = cb.createQuery();
criteria.select(criteria.from(Item.class));
List<Item> items = em.createQuery(criteria).getResultList();
// select * from ITEM where 0 >=
// (select u.RANK from USERS u where u.ID = SELLER_ID)


Lưu ý cách Hibernate một cách linh hoạt thêm điều kiện ràng buộc SQL vào câu lệnh được tạo ra.

Khi bạn lần đầu tiên thử nghiệm với các bộ lọc động, bạn có thể gặp vấn đề liên quan đến việc truy xuất dựa trên thông
tin định danh. Bạn có thể mong đợi rằng em.find(Item.class, ITEM_ID) cũng sẽ được lọc. Tuy nhiên, điều này không phải
là trường hợp đó:

Hibernate không áp dụng bộ lọc cho các hoạt động truy xuất dựa trên thông tin định danh. Một trong những lý do là các
điều kiện bộ lọc dữ liệu là các đoạn SQL, và việc tìm kiếm dựa trên thông tin định danh có thể được giải quyết hoàn toàn
trong bộ nhớ, trong first-level persistence context cache.

Nguyên tắc tương tự cũng áp dụng cho việc lọc các mối quan hệ many-to-one hoặc mối quan hệ one-to-one.
Nếu một mối quan hệ many-to-one được lọc (ví dụ: bằng cách trả về null nếu bạn gọi anItem.getSeller()), thì số lượng của
mối quan hệ sẽ thay đổi! Bạn sẽ không biết liệu món hàng có người bán hay không hoặc liệu bạn được phép thấy nó hay không.
Tuy nhiên, bạn có thể dynamically filter truy cập các bộ sưu tập. Hãy nhớ rằng các persistent collections cố định là
một viết tắt cho một truy vấn.


13.4.4 Filtering collection access
Cho đến nay, việc gọi someCategory.getItems() đã trả về tất cả các trường hợp Item được tham chiếu bởi Category đó.
Điều này có thể bị hạn chế bằng cách áp dụng một bộ lọc cho một bộ sưu tập:

PATH: /model/src/main/java/org/jpwh/model/filtering/dynamic/Category.java

@Entity
public class Category {

    @OneToMany(mappedBy = "category")
    @Filter(
        name = "limitByUserRank",
        condition =
            ":currentUserRank >= (" +
            "select u.RANK from USERS u " +
            "where u.ID = SELLER_ID" +
        ")"
    )
    protected Set<Item> items = new HashSet<Item>();
    // ...
}

Nếu bạn bây giờ kích hoạt bộ lọc trong một Session, tất cả các lần lặp qua một bộ sưu tập của Category#items đều được lọc:

PATH: /examples/src/test/java/org/jpwh/test/filtering/DynamicFilter.java

filter.setParameter("currentUserRank", 0);
Category category = em.find(Category.class, CATEGORY_ID);
assertEquals(category.getItems().size(), 1);

Nếu xếp hạng hiện tại của người dùng là 0, khi bạn truy cập vào bộ sưu tập, chỉ có một mục hàng được tải.
Tuy nhiên, nếu xếp hạng là 100, bạn sẽ thấy nhiều dữ liệu hơn.

filter.setParameter("currentUserRank", 100);
category = em.find(Category.class, CATEGORY_ID);
assertEquals(category.getItems().size(), 2);

Bạn có thể đã nhận thấy rằng điều kiện SQL cho cả hai ứng dụng bộ lọc là giống nhau. Nếu ràng buộc SQL là giống nhau cho
tất cả các ứng dụng bộ lọc, bạn có thể đặt nó làm điều kiện mặc định khi bạn định nghĩa bộ lọc,
để bạn không cần phải lặp lại nó:

PATH: /model/src/main/java/org/jpwh/model/filtering/dynamic/package-info.java

@org.hibernate.annotations.FilterDef(
    name = "limitByUserRankDefault",
    defaultCondition=
        ":currentUserRank >= (" +
            "select u.RANK from USERS u " +
            "where u.ID = SELLER_ID" +
        ")",
    parameters = {
        @org.hibernate.annotations.ParamDef(
            name = "currentUserRank", type = "int"
        )
    }
)

Có rất nhiều trường hợp sử dụng tuyệt vời khác cho các bộ lọc dữ liệu động. Bạn đã thấy một hạn chế về quyền truy cập
dữ liệu dựa trên một điều kiện liên quan đến bảo mật tùy ý. Điều này có thể liên quan đến xếp hạng của người dùng,
một nhóm cụ thể mà người dùng phải thuộc về, hoặc một vai trò mà người dùng đã được giao. Dữ liệu có thể được lưu trữ
với mã vùng (ví dụ: tất cả các liên hệ kinh doanh của một nhóm bán hàng). Hoặc có thể mỗi nhân viên bán hàng chỉ
làm việc trên dữ liệu mà bao gồm khu vực của họ.

