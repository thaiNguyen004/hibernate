In this chapter
- Cascading state transitions
- Listening to and intercepting events
- Auditing and versioning with Hibernate Envers
- Filtering data dynamically

Trong chương này, bạn sẽ thấy nhiều chiến lược khác nhau để lọc dữ liệu khi nó đi qua máy chủ Hibernate.
Khi Hibernate tải dữ liệu từ cơ sở dữ liệu,
bạn có thể hạn chế dữ liệu mà ứng dụng thấy một cách trong suốt thông qua một bộ lọc.
Khi Hibernate lưu dữ liệu vào cơ sở dữ liệu, bạn có thể lắng nghe sự kiện đó và thực thi một số tác vụ phụ:
ví dụ, ghi nhật ký kiểm toán hoặc gán một định danh khách hàng cho bản ghi.

Chúng ta sẽ khám phá các tính năng data-filtering và APIs:
- Trong phần 13.1, bạn sẽ học cách phản ứng với các thay đổi trạng thái của một đối tượng thực thể và
(truyền trạng thái thay-cascade the state change) đổi đó đến các đối tượng liên quan. Ví dụ, khi một User được lưu trữ,
Hibernate có thể tự động lưu tất cả các Billing Details liên quan một cách dọc theo và tự động. Khi một Item bị xóa,
Hibernate có thể xóa tất cả các Bid instances liên quan đến Item đó. Bạn có thể bật tính năng JPA tiêu chuẩn này bằng các
thuộc tính đặc biệt trong các ánh xạ quan hệ và bộ sưu tập của đối tượng thực thể của bạn.

- Tiêu chuẩn Java Persistence bao gồm life cycle `callbacks` và `event listeners`. Một event listener là một lớp bạn
viết với các phương thức đặc biệt, được gọi bởi Hibernate khi một đối tượng thực thể thay đổi trạng thái: ví dụ, sau khi
Hibernate tải nó hoặc trước khi xóa nó khỏi cơ sở dữ liệu. Các callback method này cũng có thể nằm trên các lớp thực thể
của bạn và được đánh dấu bằng các chú thích đặc biệt. Điều này cho phép bạn thực hiện các hiệu ứng phụ tùy chỉnh khi
một chuyển đổi xảy ra. Hibernate cũng có một số điểm mở rộng độc quyền cho phép chặn các sự kiện vòng đời ở mức thấp hơn
bên trong máy chủ của nó, mà chúng ta sẽ thảo luận trong phần 13.2.

- Một hiệu ứng phụ phổ biến là viết một bản ghi kiểm toán - `audit log`; một bản nhật ký kiểm toán thường chứa thông tin
về dữ liệu đã được thay đổi, khi thay đổi được thực hiện và người thực hiện sự thay đổi. Một hệ thống kiểm toán phức tạp
hơn có thể yêu cầu lưu trữ nhiều phiên bản dữ liệu và `temporal views`; bạn có thể muốn yêu cầu Hibernate tải dữ liệu
"như nó đã được tuần trước." Bởi vì đây là một vấn đề phức tạp, chúng tôi giới thiệu `Hibernate Envers` trong phần 13.3,
một dự án con dành riêng cho versionning và auditing trong ứng dụng JPA.

- Trong phần 13.4, bạn sẽ thấy rằng data filters cũng có sẵn như một API độc quyền của Hibernate. Các bộ lọc này thêm các
hạn chế tùy chỉnh vào các câu lệnh SQL SELECT được thực thi bởi Hibernate. Do đó, bạn có thể hiệu quả xác định một chế độ
xem giới hạn tùy chỉnh của dữ liệu ở tầng ứng dụng. Ví dụ, bạn có thể áp dụng một bộ lọc giới hạn dữ liệu được tải theo
vùng bán hàng hoặc bất kỳ tiêu chuẩn ủy quyền nào khác. Chúng ta bắt đầu với các tùy chọn lan truyền cho các thay đổi
trạng thái dọc theo các đối tượng thực thể.

Tính năng chính mới trong JPA 2
- (Sự tiêm phụ thuộc - injection of dependencies) thông qua CDI hiện đã được hỗ trợ trong các lớp entity even listener JPA.

