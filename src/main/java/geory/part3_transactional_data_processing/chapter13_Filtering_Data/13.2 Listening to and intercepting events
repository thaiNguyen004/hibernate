Trong phần này, chúng tôi sẽ thảo luận về ba API khác nhau cho custom eent listener và persistence life cycle interceptors
có sẵn trong JPA và Hibernate. Bạn có thể:

- Sử dụng các phương thức callback life cycle tiêu chuẩn của JPA và entity listener.

- Viết một org.hibernate.Interceptor độc quyền và kích hoạt nó trên một Session.

- Sử dụng các điểm mở rộng của engine core của Hibernate với org.hibernate.event SPI.

Hãy bắt đầu với standard JPA callbacks. Chúng cung cấp cách dễ dàng để truy cập các sự kiện vòng đời của persist, load và remove.

13.2.1 JPA event listeners and callbacks

Giả sử bạn muốn gửi một email thông báo đến một quản trị hệ thống mỗi khi một entity instance mới được lưu trữ.
Trước hết, hãy viết một entity listener vòng đời với một callback method, được đánh dấu bằng @PostPersist,
như được hiển thị trong đoạn mã sau:

Listing 13.1 Notifying an admin when an entity instance was stored
PATH: /model/src/main/java/org/jpwh/model/filtering/callback/
PersistEntityListener.java

public class PersistEntityListener {            [1] Entity listener constructor

    @PostPersist                                [2] Makes notfyAdmin() a callback method
    public void notifyAdmin(Object entityInstance) {
        User currentUser = CurrentUser.INSTANCE.get();      [3] Gets user info and email assces
        Mail mail = Mail.INSTANCE;
        mail.send(
            "Entity instance persisted by "
            + currentUser.getUsername()
            + ": "
            + entityInstance
        );
    }
}

1 Một lớp `entity listener` phải có hoặc không có hàm tạo hoặc một hàm tạo không đối số công cộng. Nó không cần phải triển khai
bất kỳ giao diện đặc biệt nào. Một entity listener không có trạng thái; bộ máy JPA tự động tạo và hủy nó.

2 Bạn có thể đánh dấu bất kỳ phương thức nào của một lớp entity listener là một phương thức callback cho các sự kiện vòng đời
lưu trữ. Phương thức notifyAdmin() được gọi sau khi một entity instance mới được lưu trữ trong cơ sở dữ liệu.

3 Bởi vì các lớp entity listener không có trạng thái, nên khó khăn để có được thông tin ngữ cảnh khi bạn cần.
Ở đây, bạn muốn có thông tin về người dùng hiện đang đăng nhập và truy cập hệ thống email để gửi thông báo. Một giải pháp
nguyên thủy là sử dụng biến cục bộ theo luồng (thread-local variables) và singleton; bạn có thể tìm mã nguồn cho CurrentUser
và Mail trong mã ví dụ.

Một phương thức callback của một lớp entity listener có một tham số duy nhất là Object: entity instance liên quan đến
thay đổi trạng thái. Nếu bạn chỉ bật callback cho một loại thực thể cụ thể, bạn có thể khai báo đối số là kiểu cụ thể đó.
Phương thức callback có thể có bất kỳ quyền truy cập nào; nó không cần phải là công cộng. Nó không được phép là static
hoặc final và không trả về bất cứ thứ gì. Nếu một phương thức callback ném một RuntimeException unchecked,
Hibernate sẽ hủy bỏ thao tác và đánh dấu giao dịch hiện tại để rollback. Nếu một phương thức callback khai báo và ném một
Exception checked, Hibernate sẽ bọc và xử lý nó như là một RuntimeException.

Sự tiêm (injection) trong các lớp entity listener
Thường khi triển khai một entity listener, bạn cần truy cập thông tin ngữ cảnh và các API. Ví dụ trước đó cần thông tin 
về người dùng đang đăng nhập và một API email. Một giải pháp đơn giản dựa trên biến cục bộ theo luồng (thread-locals) 
và singletons có thể không đủ trong các ứng dụng lớn và phức tạp hơn. JPA cũng tiêu chuẩn hóa tích hợp với CDI 
(Contexts and Dependency Injection), vì vậy một lớp entity listener có thể phụ thuộc vào sự tiêm và chú thích @Inject
để truy cập các phụ thuộc. Bộ chứa CDI cung cấp thông tin ngữ cảnh khi lớp listener được gọi. Lưu ý rằng ngay cả với CDI,
bạn không thể tiêm EntityManager hiện tại để truy cập cơ sở dữ liệu trong một entity listener. Chúng tôi sẽ thảo luận
về một giải pháp khác để truy cập cơ sở dữ liệu trong một entity listener (Hibernate) sau trong chương này.

Bạn chỉ được sử dụng mỗi chú thích callback (callback annotation) một lần trong một lớp entity listener;
nghĩa là chỉ có một phương thức được đánh dấu bằng @PostPersist.

Xem bảng 13.2 để biết tóm tắt về tất cả các chú thích callback có sẵn.

- `@PostLoad`: 
Kích hoạt sau khi một entity instance được tải vào persistence context, bất kể thông qua tìm kiếm bằng khóa chính, thông qua
điều hướng và khởi tạo proxy/collection, hoặc thông qua một truy vấn. Cũng được gọi sau khi làm mới một thể hiện đã bền vững.

- `@PrePersist`:
Được gọi ngay sau khi gọi persist() trên một entity instance. Cũng được gọi cho merge() khi một entity instance được xem như
transient, sau khi trạng thái transient được sao chép vào một thể hiện đã bền vững. Cũng được gọi cho các thực thể liên quan
nếu bạn kích hoạt CascadeType.PERSIST.

- `@PostPersist`: Được gọi sau khi hoạt động cơ sở dữ liệu để làm cho một entity instance bền vững được thực hiện và
một giá trị khóa được gán. Điều này có thể xảy ra tại thời điểm gọi persist() hoặc merge(), hoặc sau đó khi persistence context
được đẩy nếu trình tạo khóa của bạn là pre-insert. Cũng được gọi cho các thực thể liên quan nếu bạn kích hoạt CascadeType.PERSIST.

- `@PreUpdate`, `@PostUpdate`: Thực thi trước và sau khi persistence context được đồng bộ hóa với cơ sở dữ liệu, tức là trước
và sau khi thực hiện lệnh flush. Kích hoạt chỉ khi trạng thái của thực thể cần đồng bộ hóa (ví dụ: vì nó được xem xét là dirty).

- `@PreRemove`, `@PostRemove`: Được kích hoạt khi phương thức remove() được gọi hoặc thể hiện thực thể bị xóa theo cách lan tỏa, và sau khi
bản ghi trong cơ sở dữ liệu bị xóa khi persistence context được đẩy.

Một lớp entity listener phải được kích hoạt cho bất kỳ thực thể nào bạn muốn can thiệp vào, chẳng hạn như thực thể Item trong ví dụ.

PATH: /model/src/main/java/org/jpwh/model/filtering/callback/Item.java

@Entity
@EntityListeners(
    PersistEntityListener.class
)
public class Item {
    // ...
}

Chú thích @EntityListeners chấp nhận một mảng các lớp listener, nếu bạn có nhiều listener. Nếu nhiều listener định nghĩa 
phương thức callback cho cùng một sự kiện, Hibernate sẽ gọi các listener theo thứ tự được khai báo.
Một cách khác, bạn có thể liên kết các lớp listener với một thực thể trong metadata XML bằng phần con <entity-listener> của <entity>.

Bạn không cần viết một lớp entity listener riêng biệt để can thiệp vào các sự kiện vòng đời. Bạn có thể, ví dụ, triển khai
phương thức notifyAdmin() trên lớp thực thể User:

PATH: /model/src/main/java/org/jpwh/model/filtering/callback/User.java

@Entity
@Table(name = "USERS")
public class User {

    @PostPersist
    public void notifyAdmin(){
        User currentUser = CurrentUser.INSTANCE.get();
        Mail mail = Mail.INSTANCE;
        mail.send(
            "Entity instance persisted by "
            + currentUser.getUsername()
            + ": "
            + this
        );
    }
    // ...
}

Lưu ý rằng các phương thức callback trên một lớp thực thể không có bất kỳ đối số nào: thực thể "hiện tại" tham gia vào 
các thay đổi trạng thái là "this". Không cho phép các phương thức callback trùng lặp cho cùng một sự kiện trong một lớp 
duy nhất. Tuy nhiên, bạn có thể can thiệp vào cùng một sự kiện với các phương thức callback trong nhiều lớp listener
hoặc trong một lớp listener và một lớp thực thể.

Bạn cũng có thể thêm các phương thức callback vào một lớp thực thể cha cho toàn bộ cấu trúc thừa kế. Nếu, đối với một lớp thực thể
con cụ thể, bạn muốn tắt các phương thức callback của lớp cha, hãy đánh dấu lớp con bằng @ExcludeSuperclassListeners
hoặc ánh xạ nó trong metadata XML bằng <exclude-superclass-listeners>.

Bạn cũng có thể khai báo các lớp entity listener mặc định, được kích hoạt cho tất cả các thực thể trong persistence unit
của bạn, trong metadata XML.

PATH: /model/src/main/resources/filtering/EventListeners.xml

<persistence-unit-metadata>
    <persistence-unit-defaults>
        <entity-listeners>
            <entity-listener class="org.jpwh.model.filtering.callback.PersistEntityListener"/>
        </entity-listeners>
    </persistence-unit-defaults>
</persistence-unit-metadata>


Nếu bạn muốn tắt entity listener mặc định cho một thực thể cụ thể, bạn có thể ánh xạ nó với thuộc tính <exclude-default-listeners>
trong siêu dữ liệu XML hoặc đánh dấu nó bằng chú thích @Exclude-DefaultListeners :

PATH: /model/src/main/java/org/jpwh/model/filtering/callback/User.java

@Entity
@Table(name = "USERS")
@ExcludeDefaultListeners
public class User {
     // ...
}

Hãy nhớ rằng việc bật các entity listener là cộng dồn. Nếu bạn bật và/hoặc liên kết entity listener trong siêu dữ liệu XML
và các chú thích, Hibernate sẽ gọi tất cả chúng theo thứ tự sau đây:

1. Bộ lắng nghe mặc định cho đơn vị lưu trữ, theo thứ tự được khai báo trong siêu dữ liệu XML.
2. Các bộ lắng nghe được khai báo trên một thực thể bằng cách sử dụng @EntityListeners, theo thứ tự đã cho.
3. Các phương thức callback được khai báo trong các lớp cha của thực thể được gọi đầu tiên, bắt đầu bằng lớp cha phổ quát nhất.
Các phương thức gọi lại trên lớp thực thể được gọi cuối cùng.
Bộ lắng nghe sự kiện JPA và các phương thức callback cung cấp một khung cơ bản để phản ứng với các sự kiện vòng đời bằng
các thủ tục riêng của bạn. Hibernate cũng có một API thay thế mạnh mẽ hơn và chi tiết hơn: org.hibernate.Interceptor.


13.2.2 Implementing Hibernate interceptors
Hãy giả định bạn muốn viết một bản ghi kiểm toán (audit log) về các thay đổi dữ liệu trong một bảng cơ sở dữ liệu riêng biệt.
Ví dụ, bạn có thể ghi thông tin về các sự kiện tạo mới và cập nhật cho mỗi mục (Item). Bản ghi kiểm toán bao gồm thông tin
về người dùng, ngày và giờ của sự kiện, loại sự kiện đã xảy ra và identifier của Mục (Item) đã được thay đổi.
Bản ghi kiểm toán thường được xử lý bằng các kích hoạt (triggers) của cơ sở dữ liệu. Tuy nhiên, đôi khi việc ứng dụng
đảm bảo trách nhiệm này là tốt hơn, đặc biệt nếu yêu cầu tính di động giữa các cơ sở dữ liệu khác nhau.

Để triển khai ghi nhật ký kiểm toán, bạn cần một số thành phần. Trước hết, bạn phải đánh dấu các lớp thực thể mà bạn muốn
kích hoạt ghi kiểm toán. Tiếp theo, bạn xác định thông tin nào cần ghi như người dùng, ngày, giờ và loại sửa đổi.
Cuối cùng, bạn kết nối tất cả với một org.hibernate.Interceptor mà tự động tạo ra dấu vết kiểm toán.

Trước hết, hãy tạo một giao diện đánh dấu, Auditable:

PATH: /model/src/main/java/org/jpwh/model/filtering/interceptor/Auditable.java

public interface Auditable {
    public Long getId();
}

Interface này yêu cầu một lớp entity persistent phải tiết lộ identifier của nó thông qua một phương thức getter;
bạn cần tính năng này để ghi nhật ký kiểm toán. Kích hoạt ghi nhật ký kiểm toán cho một lớp persistent cụ thể sau
đó trở nên đơn giản. Bạn thêm nó vào khai báo của lớp, ví dụ như cho lớp Item:

PATH: /model/src/main/java/org/jpwh/model/filtering/interceptor/Item.java

@Entity
public class Item implements Auditable {
    // ...
}

Bây giờ, hãy tạo một lớp thực thể persistent mới có tên là AuditLogRecord, với các thông tin bạn muốn ghi nhật ký trong
bảng cơ sở dữ liệu kiểm toán của bạn:

PATH: /model/src/main/java/org/jpwh/model/filtering/interceptor/
AuditLogRecord.java

@Entity
public class AuditLogRecord {

    @Id
    @GeneratedValue(generator = "ID_GENERATOR")
    protected Long id;

    @NotNull
    protected String message;

    @NotNull
    protected Long entityId;

    @NotNull
    protected Class entityClass;

    @NotNull
    protected Long userId;

    @NotNull
    @Temporal(TemporalType.TIMESTAMP)

    protected Date createdOn = new Date();
    // ...
}

Bạn muốn lưu trữ một phiên bản của AuditLogRecord mỗi khi Hibernate thực hiện việc chèn (insert) hoặc cập nhật (update)
một Item trong cơ sở dữ liệu. Một bộ giao thức Hibernate (Hibernate interceptor) có thể xử lý điều này một cách tự động.
Thay vì triển khai tất cả các phương thức trong org.hibernate.Interceptor, bạn có thể mở rộng EmptyInterceptor và ghi đè
chỉ các phương thức bạn cần, như được thể hiện bên dưới:

Listing 13.2 Hibernate interceptor logging modification events
PATH: /examples/src/test/java/org/jpwh/test/filtering/AuditLogInterceptor.java

public class AuditLogInterceptor extends EmptyInterceptor {

    protected Session currentSession;           [1] Accessses database
    protected Long currentUserId;
    protected Set<Auditable> inserts = new HashSet<Auditable>();
    protected Set<Auditable> updates = new HashSet<Auditable>();

    public void setCurrentSession(Session session) {
        this.currentSession = session;
    }

    public void setCurrentUserId(Long currentUserId) {
        this.currentUserId = currentUserId;
    }

    public boolean onSave(Object entity, Serializable id,       [2] Called when instance is made persistent
                            Object[] state, String[] propertyNames,
                            Type[] types)
        throws CallbackException {

        if (entity instanceof Auditable)
            inserts.add((Auditable)entity);
        return false;           // You didn't modify the state
    }

    public boolean onFlushDirty(Object entity, Serializable id,     [3] Called if instance is dirty
                                    Object[] currentState,
                                    Object[] previousState,
                                    String[] propertyNames, Type[] types)
        throws CallbackException {

        if (entity instanceof Auditable)
            updates.add((Auditable)entity);
        return false;               // You didn't modify the currentState
    }

    // ...
}

1: Bạn cần truy cập cơ sở dữ liệu để ghi nhật ký kiểm toán, vì vậy interceptor này cần một Hibernate Session.
Bạn cũng muốn lưu trữ identifier của User đang đăng nhập hiện tại trong mỗi bản ghi kiểm toán. Các biến instance inserts
và updates là các bộ sưu tập mà interceptor này sẽ giữ trạng thái nội bộ của nó.

2: Phương thức này được gọi khi một instance entity được làm cho trạng thái persistent (tức là được thêm vào cơ sở dữ liệu).

3: Phương thức này được gọi khi một instance entity được xác định là bị thay đổi (dirty) trong quá trình xảy ra flushing
của persistence context (persistence context). Interceptor thu thập các phiên bản Auditable đã bị sửa đổi trong các biến inserts và updates.

Lưu ý rằng trong onSave(), có thể không có giá trị identifier được gán cho instance entity đã cho. Hibernate đảm bảo
sẽ thiết lập identifier thực thể trong quá trình xảy ra flushing, do đó dấu vết kiểm toán thực tế được ghi trong phần callback
postFlush(), nhưng không được hiển thị trong danh sách listing 13.2.

PATH: /examples/src/test/java/org/jpwh/test/filtering/AuditLogInterceptor.java

public class AuditLogInterceptor extends EmptyInterceptor {
    // ...

    public void postFlush(Iterator iterator) throws CallbackException {  [1] Writes audit log records

        Session tempSession =                   [2] Creates temporaty Session
                currentSession.sessionWithOptions()
                    .transactionContext()
                    .connection()
                    .openSession();

        try {
            for (Auditable entity : inserts) {          [3] Stores AuditLogRecord
                tempSession.persist(
                    new AuditLogRecord("insert", entity, currentUserId)
                );
            }

            for (Auditable entity : updates) {
                tempSession.persist(
                    new AuditLogRecord("update", entity, currentUserId)
                );
            }
            tempSession.flush();            [4] Closes temporaty Session
        } finally {
            tempSession.close();
            inserts.clear();
            updates.clear();
        }
    }
}

1: Phương thức này được gọi sau khi quá trình xảy ra flushing của persistence context đã hoàn tất.
Tại đây, bạn viết các audit log records cho tất cả các lần chèn (insertions) và cập nhật (updates) bạn đã thu thập trước đó.

2: Bạn không thể truy cập persistence context ban đầu (original persistence context): Session đang thực hiện interceptor hiện tại. 
Session đang trong trạng thái mong manh trong quá trình gọi interceptor. Hibernate cho phép bạn tạo một session tạm thời 
mới mà kế thừa một số thông tin từ phiên ban đầu bằng phương thức sessionWithOptions(). Session tạm thời mới này hoạt động 
với cùng một giao dịch và kết nối cơ sở dữ liệu như phiên ban đầu.

3: Bạn lưu trữ một bản ghi AuditLogRecord mới cho mỗi lần chèn (insertion) và cập nhật (update) bằng cách sử dụng temporary Session 
(temporary Session).

4: Bạn thực hiện flushing và đóng temporary Session mà không phụ thuộc vào original Session.

Bây giờ, bạn đã sẵn sàng kích hoạt interceptor này với một thuộc tính Hibernate khi tạo một EntityManager.

PATH: /examples/src/test/java/org/jpwh/test/filtering/AuditLogging.java

EntityManagerFactory emf = JPA.getEntityManagerFactory();

Map<String, String> properties = new HashMap<String, String>();
properties.put(
    org.hibernate.jpa.AvailableSettings.SESSION_INTERCEPTOR,
    AuditLogInterceptor.class.getName()
);
EntityManager em = emf.createEntityManager(properties);


Kích hoạt các interceptor mặc định
Nếu bạn muốn kích hoạt một interceptor mặc định cho bất kỳ EntityManager nào, bạn có thể thiết lập thuộc tính
hibernate.ejb.interceptor trong tệp persistence.xml của bạn thành một lớp thực hiện giao thức org.hibernate.Interceptor.
Lưu ý rằng, khác với interceptor có phạm vi phiên (session-scoped interceptor), Hibernate chia sẻ interceptor mặc định này,
vì vậy nó phải đảm bảo an toàn đối với luồng (thread-safe)! Ví dụ về AuditLogInterceptor không an toàn đối với luồng.

EntityManager này bây giờ đã có một AuditLogInterceptor được kích hoạt, nhưng interceptor cũng phải được cấu hình với
(phiên hiện tại-current Session) và (số nhận dạng của người dùng đang đăng nhập-logged-in user identifier).
Điều này liên quan đến việc thực hiện một số typecast để truy cập vào API của Hibernate:

PATH: /examples/src/test/java/org/jpwh/test/filtering/AuditLogging.java

Session session = em.unwrap(Session.class);
AuditLogInterceptor interceptor =
     (AuditLogInterceptor) ((SessionImplementor) session).getInterceptor();
interceptor.setCurrentSession(session);
interceptor.setCurrentUserId(CURRENT_USER_ID);

EntityManager hiện đã sẵn sàng sử dụng, và một dấu vết kiểm toán sẽ được ghi mỗi khi bạn lưu trữ hoặc sửa đổi một
phiên bản Item.

Các interceptor của Hibernate linh hoạt hơn, và khác với các event listener JPA và các phương thức callback,
bạn có quyền truy cập nhiều thông tin bối cảnh hơn khi một sự kiện xảy ra. Tuy nhiên, Hibernate cho phép bạn kết nối
sâu hơn vào lõi của nó với hệ thống extensible event mà nó dựa trên.

13.2.3 The core event system

Hệ thống lõi của Hibernate được dựa trên mô hình của các event và listener. Ví dụ, nếu Hibernate cần lưu trạng thái 
của một instance entity, nó sẽ kích hoạt một sự kiện. Bất kỳ ai lắng nghe sự kiện này có thể bắt nó và xử lý việc lưu trạng
thái dữ liệu. Do đó, Hibernate đã thực hiện tất cả các chức năng lõi của mình dưới dạng một tập hợp các trình nghe mặc định,
có thể xử lý tất cả các sự kiện Hibernate.

Hibernate được thiết kế mở rộng: bạn có thể viết và kích hoạt các trình nghe riêng cho các sự kiện Hibernate.
Bạn có thể thay thế các trình nghe mặc định hiện có hoặc mở rộng chúng và thực hiện hiệu ứng phụ hoặc thủ tục bổ sung.
Thay thế các trình nghe sự kiện là điều hiếm gặp; làm như vậy đề xuất rằng việc thực hiện trình nghe của riêng bạn có
thể quản lý một phần chức năng lõi của Hibernate.

Về cơ bản, tất cả các phương thức của giao diện Session (và phiên bản hẹp hơn của nó, EntityManager) tương ứng với một sự kiện.
Các phương thức find() và load() kích hoạt một LoadEvent, và theo mặc định, sự kiện này được xử lý bởi DefaultLoadEventListener.

Một trình nghe tùy chỉnh nên triển khai giao diện phù hợp cho sự kiện mà nó muốn xử lý và/hoặc mở rộng một trong các lớp
cơ sở tiện ích được cung cấp bởi Hibernate, hoặc bất kỳ trình nghe sự kiện mặc định nào. Dưới đây là ví dụ về một trình nghe
sự kiện tùy chỉnh cho sự kiện load.

Listing 13.3 Custom load event listener
PATH: /examples/src/test/java/org/jpwh/test/filtering/SecurityLoadListener.java

public class SecurityLoadListener extends DefaultLoadEventListener {

    public void onLoad(LoadEvent event, LoadEventListener.LoadType loadType)
        throws HibernateException {

        boolean authorized =
        MySecurity.isAuthorized(
            event.getEntityClassName(), event.getEntityId()
        );
        if (!authorized)
            throw new MySecurityException("Unauthorized access");
        super.onLoad(event, loadType);
    }
}

Trình nghe này thực hiện (mã xác thực-authorization code) tùy chỉnh. Một trình nghe nên được coi là một singleton hiệu quả, 
có nghĩa rằng nó được chia sẻ giữa các persistence context và do đó không nên lưu trạng thái liên quan đến giao dịch
dưới dạng biến instance. Để biết danh sách tất cả các sự kiện và interface listeners trong Hibernate gốc, bạn có thể xem
API Javadoc của gói org.hibernate.event.

Bạn kích hoạt listeners cho mỗi sự kiện lõi trong tệp persistence.xml của bạn, trong một `<persistence-unit>`:

PATH: /model/src/main/resources/META-INF/persistence.xml

<properties>
    <property name="hibernate.ejb.event.load"
        value="org.jpwh.test.filtering.SecurityLoadListener"/>
</properties>

Property name của cài đặt cấu hình luôn bắt đầu bằng hibernate.ejb.event, tiếp theo là loại sự kiện mà bạn muốn lắng nghe.
Bạn có thể tìm danh sách tất cả các loại sự kiện trong org.hibernate.event.spi.EventType. Giá trị của thuộc tính có thể là
một danh sách các tên lớp listener được phân tách bằng dấu phẩy; Hibernate sẽ gọi mỗi trình nghe theo thứ tự được chỉ định.

Bạn hiếm khi cần mở rộng hệ thống sự kiện lõi của Hibernate bằng chức năng riêng của bạn. Hầu hết thời gian, một org.hibernate.Interceptor
linh hoạt đủ. Nó giúp bạn có nhiều tùy chọn hơn và có khả năng thay thế bất kỳ phần nào của lõi của Hibernate một cách mô-đun.

Triển khai ghi nhật ký kiểm toán mà bạn thấy trong phần trước rất đơn giản. Nếu bạn cần ghi nhật ký thêm thông tin cho mục đích
kiểm toán, như giá trị thay đổi thực tế của các thuộc tính của một thực thể, hãy xem xét sử dụng `Hibernate Envers`.



13.2.3 The core event system
