Đối với bất kỳ ứng dụng J2SE nào dựa trên Atomikos TransactionsEssentials, chúng ta có thể phân biệt ba phong cách
lập trình chính sau đây. Phong cách nào là tốt nhất cho bạn phụ thuộc vào cách bạn muốn sử dụng Atomikos TransactionsEssentials
và đặc điểm cụ thể của ứng dụng của bạn. Mỗi tùy chọn sẽ được thảo luận cụ thể hơn trong phần còn lại của chương này.

1. Ứng dụng Thường: Atomikos JDBC/JMS và UserTransaction
   Sử dụng phương pháp này nếu bạn muốn sử dụng các bộ điều khiển Adapter JDBC hoặc JMS QueueConnectionFactory của
   chúng tôi để thực hiện JDBC hoặc JMS trong phạm vi của một giao dịch.

2. Cho tích hợp Cấp độ XA: TransactionManager JTA
   Sử dụng phương pháp này nếu bạn không muốn sử dụng các bộ điều khiển JDBC hoặc JMS của chúng tôi và vẫn muốn
   thực hiện các giao dịch JTA/XA một cách tối thiểu.

3. Cho Những Nhu cầu Phức tạp: UserTransactionService Atomikos
   Phương pháp này cho phép bạn khởi động và tắt dịch vụ giao dịch, và đưa cho bạn toàn quyền kiểm soát hoàn toàn cách
   tài nguyên được cấu hình. Bạn cũng cần phải sử dụng phương pháp này nếu bạn muốn mở rộng các giao dịch qua các
   liên kết truyền thông RMI hoặc JMS.

4.1. Regular Applications: Atomikos JDBC/JMS
and the UserTransaction

• Getting the UserTransaction
• JDBC: Using an Atomikos DataSource
• JDBC: Using an Atomikos Non-XA DataSource
• JMS: Using an Atomikos QueueConnectionFactory
• JMS: Message-Driven Functionality
• JMS: Pooled Receiver Sessions
• JMS: Pooled Sender Sessions
• JMS: Bridging Different JMS Domains

4.1.1. Getting the UserTransaction
Chúng tôi có một triển khai tích hợp của javax.transaction.UserTransaction mà bạn có thể sử dụng cho giao dịch của ứng dụng của bạn.
Để làm điều này, bạn chỉ cần tạo một thể hiện của lớp com.atomikos.icatch.jta.UserTransactionImp (sử dụng constructor mặc định,
không có đối số):

com.atomikos.icatch.jta.UserTransactionImp utx =
                new com.atomikos.icatch.jta.UserTransactionImp();

/Bây giờ chúng ta đã sẵn sàng thực hiện các giao dịch!
/Khi bạn sử dụng utx lần đầu tiên, việc khởi động và khôi phục của transaction manager sẽ diễn ra tự động.

4.1.2. JDBC: Using an Atomikos DataSource
Atomikos cung cấp hai loại javax.sql.DataSource chính: một loại có hiểu biết về javax.sql.XADataSource cụ thể cho từng
nhà cung cấp và một loại sử dụng bất kỳ lớp trình điều khiển JDBC thông thường (không phải XA). Phần này sẽ thảo luận
về loại đầu tiên, trong khi phần tiếp theo sẽ tập trung vào loại thứ hai.

Triển khai DataSource của chúng tôi được gọi là com.atomikos.jdbc.SimpleDataSourceBean. Như tên của nó cho thấy,
lớp này là một lớp JavaBean, có nghĩa là nó có một constructor mặc định không đối số và các phương thức get/set cho
các thuộc tính thiết lập. Các thuộc tính này chỉ định các tùy chọn như cài đặt của bể kết nối và cách tạo và truy cập
một phiên bản javax.sql.XADataSource cụ thể của nhà cung cấp RDBMS dưới đây. Nếu nhà cung cấp RDBMS của bạn không hỗ
trợ XADataSource, thì xem phần tiếp theo để biết làm thế nào.

Ngoài ra, lớp DataSource của chúng tôi cài đặt cả java.io.Serializable và javax.naming.Referenceable để một thể hiện
có thể được cấu hình và sau đó được lưu trữ trong JNDI nơi có sẵn. Để sử dụng DataSource này cho JDBC của ứng dụng của bạn,
bạn cần có một thể hiện đã được cấu hình:


