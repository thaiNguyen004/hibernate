Trước đó, bạn đã ánh xạ một embeddable component
`Address` của một `User` ở phần 5.2. Tình hình hiện tại khác biệt vì một mặt hàng (Item) có nhiều tham chiếu đến một
hình ảnh (Image), như được hiển thị trong hình 7.6. Mối quan hệ trong UML diagram là một mối quan hệ composition (hợp thành)
(biểu tượng hình kim cương đen); do đó, các Image được tham chiếu liên quan đến vòng đời của Mặt hàng (Item) sở hữu.

Mã trong đoạn mã tiếp theo cho thấy lớp Image nhúng mới, chứa tất cả các thuộc tính của một hình ảnh mà bạn quan tâm.
Listing 7.10 Encapsulating all properties of an image
PATH: /model/src/main/java/org/jpwh/model/collections/setofembeddables/
Image.java

@Embeddable
public class Image {
    @Column(nullable = false)
    protected String title;

    @Column(nullable = false)
    protected String filename;

    protected int width;

    protected int height;
    // ...
}

Đầu tiên, hãy lưu ý rằng tất cả các thuộc tính đều là bắt buộc (non-optional) và không chấp nhận value NULL (NOT NULL).
Các thuộc tính kích thước (size properties) không thể là null vì value của chúng là nguyên thủy (primitives).

Thứ hai, bạn phải xem xét về tính bằng nhau (equality) và cách cơ sở dữ liệu và tầng Java so sánh hai hình ảnh.


[7.2.1] Equality of component instances
Hãy giả sử bạn lưu trữ một số lượng instance của lớp Image trong một HashSet. Bạn biết rằng Set không cho phép các phần tử 
trùng lặp. Làm thế nào Set phát hiện các phần tử trùng lặp? HashSet gọi phương thức equals() cho mỗi đối tượng Image
bạn đặt vào trong Set (Set). (Nó cũng gọi phương thức hashCode() để lấy value băm, hiển nhiên.)
Có bao nhiêu image trong Set sau đây?

someItem.getImages().add(new Image(
 "Foo", "foo.jpg", 640, 480
));
someItem.getImages().add(new Image(
 "Bar", "bar.jpg", 800, 600
));
someItem.getImages().add(new Image(
 "Baz", "baz.jpg", 1024, 768
));
someItem.getImages().add(new Image(
 "Baz", "baz.jpg", 1024, 768
));
assertEquals(someItem.getImages().size(), 3);


Bạn có mong đợi bốn hình ảnh thay vì ba không? Bạn đúng: kiểm tra tính bằng thông thường trong Java dựa vào định danh (identity).
Phương thức java.lang.Object#equals() so sánh các instance với a==b. Sử dụng quy trình này, bạn sẽ có bốn instance của lớp
Image trong collection. Rõ ràng, số ba là câu trả lời "đúng" cho trường hợp sử dụng này.
Đối với lớp Image, bạn không dựa vào định danh Java - bạn ghi đè phương thức equals() và hashCode().

Listing 7.11 Implementing custom equality with equals() and hashCode()
PATH: /model/src/main/java/org/jpwh/model/collections/setofembeddables/Image.java

@Embeddable
public class Image {
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Image other = (Image) o;

        if (!title.equals(other.title)) return false;
        if (!filename.equals(other.filename)) return false;
        if (width != other.width) return false;
        if (height != other.height) return false;
        return true;
    }

    @Override
    public int hashCode() {
        int result = title.hashCode();
        result = 31 * result + filename.hashCode();
        result = 31 * result + width;
        result = 31 * result + height;
        return result;
    }
    // ...
}

Kiểm tra custom equality (tính bằng tùy chỉnh) trong phương thức equals() so sánh tất cả các value của một đối tượng
Image với các value của một đối tượng Image khác. Nếu tất cả các value giống nhau, thì các hình ảnh phải là giống nhau.
Phương thức hashCode() phải là đối xứng; nếu hai instance giống nhau, chúng phải có cùng mã băm.

Tại sao bạn không ghi đè equality trước đó, khi bạn ánh xạ Address của một User, trong phần 5.2? Thực ra, bạn có lẽ nên
làm điều đó. Lý do duy nhất của chúng tôi là bạn sẽ không gặp vấn đề gì với tính identity equality thông thường trừ khi
bạn đặt các embeddable component vào một Set hoặc sử dụng chúng như key trong một Map. Sau đó, bạn nên định lại tính bằng
dựa trên value, không dựa trên định danh. Tốt nhất là bạn nên ghi đè những phương thức này trên mọi lớp @Embeddable;
tất cả các loại value nên được so sánh "theo value."

Bây giờ hãy xem xét primary key của cơ sở dữ liệu: Hibernate sẽ tạo một lược đồ bao gồm tất cả các cột không cho phép
value NULL của bảng IMAGE trong một primary key hợp thành. Các cột phải là không cho phép value NULL vì bạn không thể
xác định điều gì bạn không biết. Điều này phản ánh cách triển khai tính bằng trong lớp Java. Bạn sẽ thấy lược đồ trong
phần tiếp theo, với thông tin chi tiết hơn về primary key.

LƯU Ý: Chúng tôi cần đề cập đến một vấn đề nhỏ với  schema generator (trình tạo lược đồ) của Hibernate: nếu bạn đánh dấu 
một thuộc tính của đối tượng nhúng với @NotNull thay vì @Column(nullable=false), Hibernate sẽ không tạo ra ràng buộc NOT NULL 
cho cột của bảng collection. Kiểm tra Bean Validation của một instance hoạt động như mong đợi, chỉ có lược đồ cơ sở dữ 
liệu thiếu quy tắc tích hợp. Sử dụng @Column(nullable=false) nếu lớp nhúng của bạn được ánh xạ trong một collection
và thuộc tính đó nên là một phần của primary key.

Lớp thành phần (component class) hiện đã sẵn sàng, và bạn có thể sử dụng nó trong các collection mappings.

[7.2.2] Set of components

Bạn ánh xạ một Set của các components như được hiển thị ở phần tiếp theo.

Listing 7.12 Set of embeddable components with an override
PATH: /model/src/main/java/org/jpwh/model/collections/setofembeddables/Item.java

@Entity
public class Item {
    @ElementCollection                  // [1] Required
    @CollectionTable(name = "IMAGE")    // [2] Overrides collection table name
    @AttributeOverride(
        name = "filename",
        column = @Column(name = "FNAME", nullable = false)
    )
    protected Set<Image> images = new HashSet<Image>();
    // ...
}

Giống như trước đây, chú thích @ElementCollection [1] là bắt buộc. Hibernate tự động biết rằng mục tiêu của collection 
là một loại @Embeddable, dựa trên khai báo của bạn về một collection thông thường. Chú thích @CollectionTable [2] 
ghi đè tên mặc định cho collection table, mà sẽ mặc định là ITEM_IMAGES nếu không có @CollectionTable. 

Ánh xạ của lớp Image xác định các cột của collection table. Giống như cho một value nhúng duy nhất,
bạn có thể sử dụng @AttributeOverride để tùy chỉnh ánh xạ mà không cần sửa đổi lớp nhúng mục tiêu.
Hãy xem database schema trong hình 7.7.

Bạn đang ánh xạ một set, vì vậy primary key của collection table là một hợp thành của cột key ngoại ITEM_ID và tất cả
các cột không cho phép value NULL như TITLE, FNAME, WIDTH và HEIGHT.

value ITEM_ID không được bao gồm trong phương thức equals() và hashCode() đã bị ghi đè của Image, như đã thảo luận
trong phần trước đó. Do đó, nếu bạn kết hợp các hình ảnh của các mặt hàng khác nhau trong một set, bạn sẽ gặp vấn đề về
tính bằng trong tầng Java. Trong bảng cơ sở dữ liệu, bạn có thể phân biệt rõ ràng giữa các hình ảnh của các mặt hàng khác nhau,
vì định danh của mặt hàng được bao gồm trong các kiểm tra tính bằng của primary key.

Nếu bạn muốn bao gồm Item trong quy trình tính bằng của Image, để đối xứng với primary key cơ sở dữ liệu, bạn cần một thuộc tính
Image#item. Đây là một con trỏ thụ động, do Hibernate cung cấp khi các instance Image được tải:

PATH: /model/src/main/java/org/jpwh/model/collections/setofembeddables/
Image.java

@Embeddable
public class Image {
    @org.hibernate.annotations.Parent
    protected Item item;
    // ...
}

Bây giờ bạn có thể lấy value cha (Item) trong các phương thức equals() và hashCode() và viết, ví dụ, một so sánh với
`this.getItem().getId().equals(other.getItem().getId())`. Hãy cẩn thận nếu Item không có tính nhất quán và không có value
định danh; chúng ta sẽ khám phá vấn đề này chi tiết hơn trong phần 10.3.2.

Nếu bạn cần sắp xếp các phần tử theo thứ tự tải và có một thứ tự lặp lại ổn định với LinkedHashSet,
hãy sử dụng chú thích JPA @OrderBy:

PATH: /model/src/main/java/org/jpwh/model/collections/setofembeddablesorderby/Item.java
@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @OrderBy("filename, width DESC")
    protected Set<Image> images = new LinkedHashSet<Image>();
    // ...
}

Các đối số của chú thích @OrderBy là các thuộc tính của lớp Image, theo sau là ASC để sắp xếp theo thứ tự tăng dần 
hoặc DESC để sắp xếp theo thứ tự giảm dần. Mặc định là tăng dần, vì vậy ví dụ này sắp xếp tăng dần theo tên tệp hình ảnh 
và sau đó sắp xếp giảm dần theo chiều rộng của mỗi hình ảnh. Hãy lưu ý rằng điều này khác biệt với chú thích 
@org.hibernate.annotations.OrderBy riêng, mà có một mệnh đề SQL thô, như đã thảo luận trong phần 7.1.8.

Khai báo tất cả các thuộc tính của Image như @NotNull có thể không phải lúc nào bạn cũng muốn. Nếu bất kỳ thuộc tính
nào là tùy chọn, bạn cần một primary key khác cho bảng set.

Trước đó, bạn đã sử dụng chú thích `@org.hibernate.annotations.CollectionId` để thêm một cột key thay thế vào collection table. 
Tuy nhiên, loại collection không phải là Set mà là Collection, một bag. Điều này là nhất quán với lược đồ đã được cập nhật:
Nếu bạn có một cột primary key thay thế, thì cho phép các "value phần tử" trùng lặp. Hãy xem xét điều này thông qua một ví dụ.

Trước hết, lớp Image có thể có các thuộc tính có value null:

PATH: /model/src/main/java/org/jpwh/model/collections/bagofembeddables/
Image.java

@Embeddable
public class Image {
    @Column(nullable = true)        // Có thể null nếu bạn có một surrogate primary key (primary key thay thế)
    protected String title;

    @Column(nullable = false)
    protected String filename;

    protected int width;

    protected int height;
    // ...
}

Hãy nhớ tính đến tiêu đề (title) tùy chọn của Image trong các phương thức equals() và hashCode() đã bị ghi đè của bạn
khi bạn so sánh các instance "by value".

Tiếp theo, ánh xạ của collection bag trong lớp Item:

PATH: /model/src/main/java/org/jpwh/model/collections/bagofembeddables/
Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @org.hibernate.annotations.CollectionId(
        columns = @Column(name = "IMAGE_ID"),
        type = @org.hibernate.annotations.Type(type = "long"),
        generator = Constants.ID_GENERATOR
    )
    protected Collection<Image> images = new ArrayList<Image>();
    // ...
}

[Hibernate Feature]
collection table
Như trước đây, trong phần 7.1.5, bạn khai báo một cột primary key thay thế IMAGE_ID bổ sung bằng chú thích độc quyền
@org.hibernate.annotations.CollectionId. Hình 7.8 hiển thị lược đồ cơ sở dữ liệu.

Tiêu đề (title) của Image có định danh 2 là null.

Tiếp theo, chúng ta sẽ xem xét một cách khác để thay đổi primary key của collection table với một Map.


[7.2.4] Map of component values

Nếu các hình ảnh được lưu trữ trong một Map, thì tên tệp có thể là key của map:

Path: /model/src/main/java/org/jpwh/model/collections/
mapofstringsembeddables/Item.java

Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    @MapKeyColumn(name = "FILENAME")
    protected Map<String, Image> images = new HashMap<String, Image>();
    // ...
}

primary key của collection table, như được hiển thị trong hình 7.9, bây giờ bao gồm cột key ngoại ITEM_ID
và cột key của map, `FILENAME`.

Lớp embeddable Image có thể ánh xạ tất cả các cột khác, có thể cho phép value NULL:

PATH: /model/src/main/java/org/jpwh/model/collections/
mapofstringsembeddables/Image.java

@Embeddable
public class Image {
    @Column(nullable = true)        // Có thể là value null; không phải là một phần của primary key.
    protected String title;
    protected int width;
    protected int height;
    // ...
}

Trong ví dụ trước, các values trong map là các instance của một lớp embeddable component và các key của map là 
một chuỗi cơ bản. Tiếp theo, bạn sử dụng các loại nhúng cho cả key và value.


[7.2.5] Components as map keys

Ví dụ cuối cùng của chúng ta là ánh xạ một Map, với cả key và value là các loại nhúng, như bạn có thể thấy trong hình 7.10.

Thay vì một biểu diễn chuỗi, bạn có thể biểu diễn tên tệp bằng một loại tùy chỉnh, như được hiển thị tiếp theo

@Embeddable
public class Filename {
    @Column(nullable = false)       // Phải là NOT NULL: là một phần của khóa chính.
    protected String name;          // Phải là NOT NULL: là một phần của khóa chính.

    @Column(nullable = false)
    protected String extension;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Filename filename = (Filename) o;
        if (!extension.equals(filename.extension)) return false;
        if (!name.equals(filename.name)) return false;
        return true;
    }
    @Override
    public int hashCode() {
        int result = name.hashCode();
        result = 31 * result + extension.hashCode();
        return result;
    }
}
Nếu bạn muốn sử dụng lớp này cho các khóa của một map, các cột cơ sở dữ liệu ánh xạ không thể cho phép giá trị NULL,
vì chúng là một phần của khóa chính hợp thành. Bạn cũng phải ghi đè phương thức equals() và hashCode(), vì các khóa
của một map là một set, và mỗi Filename phải là duy nhất trong một tập hợp khóa cụ thể.

Bạn không cần bất kỳ chú thích đặc biệt nào để ánh xạ bộ sưu tập:
PATH: /model/src/main/java/org/jpwh/model/collections/mapofembeddables/
Item.java

@Entity
public class Item {
    @ElementCollection
    @CollectionTable(name = "IMAGE")
    protected Map<Filename, Image> images = new HashMap<Filename, Image>();
    // ...
}

Thực tế, bạn không thể sử dụng @MapKeyColumn và @AttributeOverrides; chúng không có tác dụng khi khóa của map là một
lớp @Embeddable. The composite primary key của bảng IMAGE bao gồm các cột ITEM_ID, NAME và EXTENSION, như bạn có thể
thấy trong hình 7.11.

Một composite embeddable class như Image không bị giới hạn bởi các thuộc tính đơn giản của loại cơ bản.
Bạn đã thấy cách bạn có thể lồng những thành phần khác, như City trong Address. Bạn có thể trích xuất và đóng gói
các thuộc tính width và height của Image trong một lớp mới Dimensions.

Một lớp nhúng cũng có thể sở hữu collections.

[7.2.6] Collection in an embeddable component

Giả sử cho mỗi địa chỉ (Address), bạn muốn lưu trữ một danh sách các liên hệ. Điều này là một simple Set<String> trong
lớp nhúng (embeddable class):

@Embeddable
public class Address {
    @NotNull
    @Column(nullable = false)
    protected String street;

    @NotNull
    @Column(nullable = false, length = 5)
    protected String zipcode;

    @NotNull
    @Column(nullable = false)
    protected String city;

    @ElementCollection
    @CollectionTable(
        name = "CONTACT",       // Defaults to `USER_CONTACTS`
        joinColumns = @JoinColumn(name = "USER_ID"))        // Default
    @Column(name = "NAME", nullable = false)                // Defaults to CONTACTS
    protected Set<String> contacts = new HashSet<String>();
    // ...
}

Chú thích @ElementCollection là duy nhất bắt buộc; các tên bảng và cột có giá trị mặc định. Hãy xem lược đồ trong hình 7.12: 
cột `USER_ID` có ràng buộc khóa ngoại đối chiếu với bảng của đối tượng sở hữu, USERS. Khóa chính của collection table
là một composite (hợp thành) của các cột `USER_ID` và `NAME`, ngăn chặn sự xuất hiện trùng lặp của các phần tử,
phù hợp cho một Set.

Thay vì một Set, bạn có thể ánh xạ một list, bag, hoặc map của các loại cơ bản. Hibernate cũng hỗ trợ collection các
loại nhúng, vì vậy thay vì một chuỗi liên hệ đơn giản, bạn có thể viết một embeddable class Contact và có Address chứa
một bộ sưu tập của Contacts.

Mặc dù Hibernate cung cấp cho bạn nhiều sự linh hoạt với các ánh xạ thành phần và mô hình chi tiết, nhưng hãy nhớ
rằng mã nguồn thường được đọc nhiều hơn là được viết. Hãy nghĩ về nhà phát triển tiếp theo phải duy trì điều này trong
vài năm tới.

Chuyển tập trung, chúng ta chuyển sự chú ý đến entity associtations: cụ thể là các mqh many-to-one và one-to-many đơn giản.

