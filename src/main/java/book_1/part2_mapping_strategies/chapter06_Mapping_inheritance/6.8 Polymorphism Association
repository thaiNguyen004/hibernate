6.8 Polymorphic associations

Đa hình là một đặc điểm quyết định của các ngôn ngữ hướng đối tượng như Java. Hỗ trợ cho các mối quan hệ đa hình và các
truy vấn đa hình là một tính năng cơ bản của giải pháp ORM như Hibernate. Điều đáng ngạc nhiên là cho đến nay,
chúng ta đã quản lý được mà không cần phải nói nhiều về đa hình. Thú vị là không có nhiều điều để nói về chủ đề này - đa hình
rất dễ sử dụng trong Hibernate đến nỗi chúng ta không cần phải tiêu tốn nhiều công sức để giải thích nó.

Để cung cấp một tổng quan, trước tiên chúng ta xem xét một mối quan hệ nhiều-đến-một đến một lớp có thể có các lớp con,
và sau đó là mối quan hệ một-đến-nhiều. Đối với cả hai ví dụ, các lớp của mô hình miền dữ liệu là giống nhau; xem hình 6.6.

6.8.1 Polymorphic many-to-one associations

Trước hết, hãy xem xét thuộc tính defaultBilling của User. Nó tham chiếu đến một trường hợp cụ thể của BillingDetails,
và tại thời gian chạy, nó có thể là bất kỳ trường hợp cụ thể nào của lớp đó.

Bạn ánh xạ mối quan hệ một chiều này đến lớp trừu tượng BillingDetails như sau:
PATH: /model/src/main/java/org/jpwh/model/inheritance/associations/manytoone/User.java

@Entity
@Table(name = "USERS")
public class User {
    @ManyToOne(fetch = FetchType.LAZY)
    protected BillingDetails defaultBilling;
    // ...
}
Bảng USERS hiện có cột join/foreign key DEFAULTBILLING_ID đại diện cho mối quan hệ này. Đây là một cột có thể là null
bởi vì một User có thể không có phương thức thanh toán mặc định được gán. Vì BillingDetails là lớp trừu tượng,
mối quan hệ phải tham chiếu đến một trường hợp của một trong các lớp con của nó - CreditCard hoặc BankAccount - tại thời
gian chạy.

Bạn không cần phải thực hiện bất kỳ điều gì đặc biệt để kích hoạt các mối quan hệ đa hình trong Hibernate;
nếu lớp đích của mối quan hệ được ánh xạ bằng @Entity và @Inheritance, mối quan hệ tự nhiên là đa hình.

Mã sau minh họa việc tạo một mối quan hệ đến một instance của lớp con CreditCard:

PATH: /examples/src/test/java/org/jpwh/test/inheritance/PolymorphicManyToOne.java

CreditCard cc = new CreditCard(
            "John Doe", "1234123412341234", "06", "2015"
);
User johndoe = new User("johndoe");
johndoe.setDefaultBilling(cc);

em.persist(cc);
em.persist(johndoe);

Bây giờ, khi bạn điều hướng mối quan hệ trong một đơn vị công việc thứ hai, Hibernate tự động truy xuất trường hợp CreditCard:

PATH: /examples/src/test/java/org/jpwh/test/inheritance/PolymorphicManyToOne.java

User user = em.find(User.class, USER_ID);
user.getDefaultBilling().pay(123);  // <- Gọi phương thức pay() trên lớp con cụ thể của BillingDetails.

Chỉ có một điều cần chú ý: vì thuộc tính defaultBilling được ánh xạ với FetchType.LAZY, Hibernate sẽ tạo ra một ủy quyền (proxy)
cho đối tượng mục tiêu của mối quan hệ. Trong trường hợp này, bạn sẽ không thể thực hiện việc ép kiểu sang lớp cụ thể
CreditCard tại thời gian chạy, và thậm chí toán tử instanceof cũng sẽ hoạt động kỳ lạ:

PATH: /examples/src/test/java/org/jpwh/test/inheritance/PolymorphicManyToOne.java

User user = em.find(User.class, USER_ID);
BillingDetails bd = user.getDefaultBilling();
assertFalse(bd instanceof CreditCard);
// CreditCard creditCard = (CreditCard) bd;

Don’t do this—
ClassCastException!

Tham chiếu bd trong trường hợp này không phải là một trường hợp của CreditCard; nó là một lớp con đặc biệt của BillingDetails
được tạo ra tại thời gian chạy, một proxy Hibernate. Khi bạn gọi một phương thức trên proxy, Hibernate chuyển cuộc gọi
ến một trường hợp của CreditCard mà nó truy vấn một cách lười biếng. Cho đến khi quá trình khởi tạo này diễn ra,
Hibernate không biết lớp con của trường hợp đã cho là gì - điều này sẽ đòi hỏi một truy vấn cơ sở dữ liệu, mà bạn đã
cố gắng tránh bằng cách sử dụng lazy loading ban đầu. Để thực hiện việc ép kiểu an toàn cho proxy,
hãy sử dụng em.getReference():

PATH: /examples/src/test/java/org/jpwh/test/inheritance/
PolymorphicManyToOne.java

User user = em.find(User.class, USER_ID);
BillingDetails bd = user.getDefaultBilling();
CreditCard creditCard =
    em.getReference(CreditCard.class, bd.getId());  // No SELECT
assertTrue(bd != creditCard);   // Cẩn thận!

Sau cuộc gọi getReference(), bd và creditCard đều tham chiếu đến hai instance proxy khác nhau, cả hai đều chuyển cuộc gọi
đến cùng một instance CreditCard cơ sở dưới đây. Tuy nhiên, proxy thứ hai có giao diện khác biệt và bạn có thể gọi
các phương thức như creditCard.getExpMonth() mà chỉ áp dụng cho giao diện này. (Lưu ý rằng bd.getId() sẽ gây ra một
truy vấn SELECT nếu bạn ánh xạ thuộc tính id với truy cập trường.)

Bạn có thể tránh các vấn đề này bằng cách tránh truy xuất lười biếng, như trong đoạn mã dưới đây, bằng cách sử dụng một
truy vấn eager fetch:

PATH: /examples/src/test/java/org/jpwh/test/inheritance/
PolymorphicManyToOne.java

User user = (User) em.createQuery(
    "select u from User u " +
        "left join fetch u.defaultBilling " +
        "where u.id = :id")
    .setParameter("id", USER_ID)
    .getSingleResult();
CreditCard creditCard = (CreditCard) user.getDefaultBilling(); // Không có proxy nào được sử dụng: BillingDetails instance
                                                               // được tìm nạp một cách eagerly


Mã nguồn thực sự hướng đối tượng không nên sử dụng instanceof hoặc nhiều ép kiểu typecast. Nếu bạn gặp vấn đề với các proxy,
bạn nên xem xét lại thiết kế của mình và hỏi xem có cách tiếp cận đa hình hơn không. Hibernate cũng cung cấp
instrumentation (thiết bị đo đạc) bytecode là một lựa chọn thay thế cho việc lazy loading (tải lười biếng) thông qua các proxy;
chúng ta sẽ quay lại vấn đề chiến lược truy xuất trong chương 12.

Bạn có thể xử lý mối quan hệ one-to-one theo cùng cách. Còn mối quan hệ plural, như sưu tập của billingDetails cho mỗi
User thì sao? Chúng ta sẽ xem xét điều đó tiếp theo.

6.8.2 Polymorphic collections

Một User có thể có tham chiếu đến nhiều BillingDetails, không chỉ có một default (một trong số đó là default; hãy bỏ qua điều
đó trong lúc này). Bạn có thể ánh xạ điều này với một mối quan hệ one-to-many bidirectional (hai chiều):

PATH: /model/src/main/java/org/jpwh/model/inheritance/associations/onetomany/
User.java

@Entity
@Table(name = "USERS")
public class User {
    @OneToMany(mappedBy = "user")
    protected Set<BillingDetails> billingDetails = new HashSet<>();
    // ...
}

Tiếp theo, đây là phía sở hữu của mối quan hệ (được khai báo bằng mappedBy trong ánh xạ trước đó):
PATH: /model/src/main/java/org/jpwh/model/inheritance/associations/onetomany/
BillingDetails.java

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class BillingDetails {
    @ManyToOne(fetch = FetchType.LAZY)
    protected User user;
    // ...
}

Đến nay, không có gì đặc biệt về ánh xạ mối quan hệ này. Hệ thống lớp của lớp BillingDetails có thể được ánh xạ bằng
TABLE_PER_CLASS, SINGLE_TABLE, hoặc JOINED inheritance type. Hibernate đủ thông minh để sử dụng các truy vấn SQL đúng đắn,
với cả toán tử JOIN hoặc UNION, khi tải các phần tử trong bộ sưu tập.

Tuy nhiên, có một giới hạn: lớp BillingDetails không thể là một @MappedSuperclass, như đã được hiển thị trong phần 6.1.
Nó phải được ánh xạ bằng @Entity và @Inheritance.

Mối quan hệ với đa hình ngầm định - Associations with implicit polymorphism
Hibernate cung cấp một kỹ thuật "cuối cùng" nếu bạn thực sự phải ánh xạ một mối quan hệ đến một hệ thống lớp mà không cần
ánh xạ rõ ràng hệ thống lớp bằng @Inheritance. Điều này có thể thực hiện bằng cách sử dụng ánh xạ XML của Hibernate và phần tử <any/>.
Chúng tôi khuyến nghị bạn tra cứu điều này trong tài liệu Hibernate hoặc trong một phiên bản trước của cuốn sách này nếu cần,
nhưng hãy cố gắng tránh nó bất cứ khi nào có thể vì nó dẫn đến các lược đồ xấu xí.
