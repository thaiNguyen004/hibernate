Một Connection JDBC theo mặc định nằm trong chế độ auto-commit. Chế độ này hữu ích khi thực hiện các truy vấn
SQL ngẫu nhiên.

Hãy tưởng tượng rằng bạn kết nối vào cơ sở dữ liệu của mình bằng một công cụ SQL console và bạn thực hiện một số truy vấn,
thậm chí cập nhật và xóa hàng. Việc truy cập dữ liệu tương tác này là ngẫu nhiên; hầu hết thời gian bạn không có một
kế hoạch hoặc một chuỗi câu lệnh mà bạn xem xét là một unit of work. Chế độ auto-commit mặc định trên kết nối cơ sở dữ liệu
là hoàn hảo cho loại truy cập dữ liệu như vậy - cuối cùng, bạn không muốn phải gõ "begin transaction" và "end transaction"
cho mỗi câu lệnh SQL bạn viết và thực thi. Trong chế độ tự động commit, một giao dịch cơ sở dữ liệu (ngắn) bắt đầu và
kết thúc cho mỗi câu lệnh SQL bạn gửi đến cơ sở dữ liệu. Bạn đang làm việc hiệu quả ở chế độ không giao dịch,
bởi vì không có đảm bảo về tính nguyên tử hoặc tính độc lập cho phiên làm việc của bạn với SQL console.
(Đảm bảo duy nhất là một câu lệnh SQL duy nhất là nguyên tử.)

Một ứng dụng, theo định nghĩa, luôn thực thi một chuỗi câu lệnh được lập kế hoạch. Dường như hợp lý rằng bạn luôn tạo ra
các ranh giới giao dịch để nhóm các câu lệnh của bạn thành các đơn vị là nguyên tử và độc lập với nhau. Tuy nhiên, trong JPA,
hành vi đặc biệt được gắn liền với chế độ tự động commit, và bạn có thể cần nó để triển khai các cuộc trò chuyện kéo dài.
Bạn có thể truy cập cơ sở dữ liệu trong chế độ tự động commit và đọc dữ liệu.

11.3.1 Reading data in auto-commit mode

Hãy xem xét ví dụ sau, trong đó chúng ta tải một thể hiện Item, thay đổi tên của nó, và sau đó rolls back thay đổi đó
bằng cách làm mới (refresh):

PATH: /examples/src/test/java/org/jpwh/test/concurrency/NonTransactional.java

EntityManager em = JPA.createEntityManager();       // [1] Unsynchronized mode

Item item = em.find(Item.class, ITEM_ID);           // [2] Accesses database
item.setName("New Name");

assertEquals(                                       // [3] Returns original value
 em.createQuery("select i.name from Item i where i.id = :id)")
 .setParameter("id", ITEM_ID).getSingleResult(),
 "Original Name"
);

assertEquals(                                       // [4] Return already loaded instance
 ((Item) em.createQuery("select i from Item i where i.id = :id)")
 .setParameter("id", ITEM_ID).getSingleResult()).getName(),
 "New Name"
);

// em.flush();                                      // [5] Throws exception

em.refresh(item);                                   // [6] Rollback change
assertEquals(item.getName(), "Original Name");
em.close();

1. Không có giao dịch nào đang hoạt động khi bạn tạo EntityManager. Ngữ cảnh lưu trữ (persistence context) hiện đang ở 
chế độ không đồng bộ đặc biệt; Hibernate không tự động thực hiện việc flush.

2. Bạn có thể truy cập cơ sở dữ liệu để đọc dữ liệu; thao tác này thực hiện một SELECT, được gửi đến cơ sở dữ liệu 
trong chế độ tự động commit.

3. Thông thường, Hibernate sẽ thực hiện việc flush (ghi dữ liệu vào cơ sở dữ liệu) cho persistence context khi bạn
thực thi một truy vấn (Query). Nhưng do ngữ cảnh không đồng bộ, việc flush không xảy ra và truy vấn trả về giá trị cơ sở dữ liệu cũ,
ban đầu. Các truy vấn với kết quả dạng scalar không thể lặp lại: bạn thấy giá trị nào trong cơ sở dữ liệu và được cung cấp
cho Hibernate trong ResultSet.
Ngược lại, khi bạn đang ở trong chế độ đồng bộ hóa, Hibernate sẽ tự động thực hiện việc ghi dữ liệu vào cơ sở dữ liệu sau
mỗi truy vấn. Điều này đảm bảo tính nhất quán giữa dữ liệu trong ứng dụng của bạn và dữ liệu trong cơ sở dữ liệu.

4. Việc truy xuất một thực thể được quản lý (managed entity instance) liên quan đến việc tìm kiếm trong quá trình đóng gói
kết quả của JDBC, trong persistence context hiện tại. Thể hiện Item đã được nạp với tên đã thay đổi sẽ được trả về từ
persistence context; các giá trị từ cơ sở dữ liệu bị bỏ qua. Đây là một đọc lặp lại của một thể hiện thực thể, ngay cả khi
không có giao dịch hệ thống.

5. Nếu bạn cố gắng thực hiện việc flush persistence context thủ công, để lưu trữ tên Item mới, Hibernate sẽ ném một
javax.persistence.TransactionRequiredException. Bạn không thể thực hiện một UPDATE trong chế độ không đồng bộ, vì bạn sẽ
không thể quay lại việc thay đổi.

6. Bạn có thể quay lại việc thay đổi bạn đã thực hiện bằng phương thức refresh(). Nó sẽ nạp lại trạng thái Item hiện
tại từ cơ sở dữ liệu và ghi đè lên thay đổi bạn đã thực hiện trong bộ nhớ.

Với persistence context không đồng bộ, bạn đọc dữ liệu trong chế độ tự động commit bằng cách sử dụng find(), getReference(),
refresh(), hoặc truy vấn. Bạn cũng có thể tải dữ liệu theo yêu cầu: các proxy sẽ được khởi tạo nếu bạn truy cập chúng
và các bộ sưu tập sẽ được tải nếu bạn bắt đầu lặp qua các phần tử của chúng. Tuy nhiên, nếu bạn cố gắng flush persistence context
hoặc khóa dữ liệu bằng cách sử dụng bất kỳ LockModeType nào ngoại trừ LockModeType.NONE, sẽ xảy ra một TransactionRequiredException.

Cho đến nay, chế độ tự động commit dường như không có ích lắm. Thực tế, nhiều nhà phát triển thường phụ thuộc vào tự động commit
vì các lý do không đúng:

- Nhiều giao dịch cơ sở dữ liệu nhỏ theo từng câu lệnh (đó là ý nghĩa của tự động commit) sẽ không cải thiện hiệu suất
của ứng dụng của bạn.

- Bạn sẽ không cải thiện tính mở rộng của ứng dụng của bạn: một giao dịch cơ sở dữ liệu chạy lâu hơn, thay vì nhiều giao dịch
nhỏ cho mỗi câu lệnh SQL, có thể giữ khóa cơ sở dữ liệu trong thời gian dài hơn. Điều này chỉ là một vấn đề nhỏ, vì Hibernate
sẽ ghi dữ liệu vào cơ sở dữ liệu càng muộn càng tốt trong một giao dịch (flush tại commit), vì vậy cơ sở dữ liệu đã giữ khóa
ghi trong một khoảng thời gian ngắn.

- Bạn cũng có các cam kết về tính isolation yếu hơn nếu ứng dụng sửa đổi dữ liệu đồng thời. Đọc lặp lại dựa trên khóa đọc
là không thể với chế độ tự động commit. (Cache persistence context giúp đỡ ở đây, đương nhiên.)

- Nếu hệ quản trị cơ sở dữ liệu của bạn có MVCC (ví dụ: Oracle, PostreSQL, Informix và Firebird), bạn có khả năng muốn sử
dụng khả năng của nó về cách cô lập theo dõi để tránh đọc unrepeatable and phantom reads. Mỗi giao dịch đều có một phiên bản
cá nhân của dữ liệu; bạn chỉ thấy một phiên bản (nội bộ cho cơ sở dữ liệu) của dữ liệu như nó đã tồn tại trước khi giao dịch
của bạn bắt đầu. Với chế độ tự động commit, cách cô lập theo dõi không có ý nghĩa, vì không có phạm vi giao dịch nào.

- Mã của bạn sẽ trở nên khó hiểu hơn. Bất kỳ người đọc mã của bạn bây giờ đều phải chú ý đặc biệt xem một persistence context
có được kết hợp với một giao dịch hay nó ở chế độ không đồng bộ. Nếu bạn luôn nhóm các thao tác trong một giao dịch hệ thống,
ngay cả khi bạn chỉ đọc dữ liệu, mọi người có thể tuân theo quy tắc đơn giản này, và khả năng gặp vấn đề về đồng thời khó
tìm sẽ giảm đi. Vậy, lợi ích của một persistence context không đồng bộ là gì? Nếu việc flush không xảy ra tự động, bạn có thể
chuẩn bị và đưa các sửa đổi vào hàng đợi ngoài một giao dịch.

11.3.2 Queueing modifications
Ví dụ dưới đây lưu trữ một instance mới của Item bằng một EntityManager không đồng bộ:

PATH: /examples/src/test/java/org/jpwh/test/concurrency/NonTransactional.java
EntityManager em = JPA.createEntityManager();

Item newItem = new Item("New Item");
em.persist(newItem)                             // [1] saves transient instance
assertNotNull(newItem.getId());

tx.begin();                                     // [2] stores changes
if (!em.isJoinedToTransaction())
     em.joinTransaction();
tx.commit();                                    // Flush!
em.close();

1 Bạn có thể gọi persist() để lưu một đối tượng thể hiện tạm thời với một persistence context chưa được đồng bộ hóa.
Hibernate chỉ lấy giá trị bộ nhận dạng mới, thông thường bằng cách gọi một trình tạo số thứ tự cơ sở dữ liệu và gán nó
cho đối tượng. Thể hiện hiện nay ở trạng thái bền vững trong ngữ cảnh, nhưng câu lệnh SQL INSERT chưa được thực hiện.
Lưu ý rằng điều này chỉ có thể thực hiện được với các trình tạo số thứ tự trước khi chèn; xem phần 4.2.5.

2 Khi bạn sẵn sàng lưu trữ các thay đổi, hãy kết hợp persistence context với một transaction. Đồng bộ hóa và flush
sẽ diễn ra như thường, khi giao dịch thực hiện. Hibernate ghi tất cả các hoạt động được xếp hàng vào cơ sở dữ liệu.
Các thay đổi hợp nhất của một đối tượng thể hiện đã tách rời cũng có thể được xếp hàng:

PATH: /examples/src/test/java/org/jpwh/test/concurrency/NonTransactional.java

detachedItem.setName("New Name");

EntityManager em = JPA.createEntityManager();
Item mergedItem = em.merge(detachedItem);
tx.begin();
em.joinTransaction();
tx.commit();                                            // flush
em.close();

Hibernate thực thi câu lệnh SELECT trong chế độ auto-commit khi bạn gọi phương thức merge(). Hibernate trì hoãn câu lệnh
UPDATE cho đến khi một transaction được tham gia vào commit().
Cơ chế hàng đợi cũng sẽ làm việc với hoạt động loại bỏ các instance và DELETE.

PATH: /examples/src/test/java/org/jpwh/test/concurrency/NonTransactional.java

EntityManager em = JPA.createEntityManager();

Item item = em.find(Item.class, ITEM_ID);
em.remove(item);

tx.begin();
em.joinTransaction();
tx.commit();                // Flush
em.close();

Một persistence context chưa được đồng bộ hóa do đó cho phép bạn tách rời hoạt động persistence từ giao dịch.
Hành vi đặc biệt này của EntityManager sẽ rất quan trọng sau này trong cuốn sách khi chúng ta thảo luận về thiết kế
giao diện ứng dụng. Khả năng hàng đợi thay đổi dữ liệu, độc lập với giao diện. (và các yêu cầu từ client/server) là một
tính năng quan trọng của persistence context.


Chế độ flush thủ công của Hibernate
Hibernate cung cấp phương thức Session#setFlushMode() với chế độ FlushMode.MANUAL bổ sung. Đây là một công cụ chuyển đổi 
thuận tiện hơn nhiều, cho phép tắt bất kỳ việc xả (flush) tự động nào của persistence context, ngay cả khi một giao dịch
tham gia được commit. Với chế độ này, bạn phải gọi flush() một cách tường minh để đồng bộ hóa với cơ sở dữ liệu.
Trong JPA, ý tưởng là "giao dịch commit luôn phải ghi lại bất kỳ thay đổi nào đang chờ xử lý," do đó việc đọc được tách biệt
với việc ghi trong chế độ lưu trữ chưa được đồng bộ hóa. Nếu bạn không đồng tình với điều này và/hoặc không muốn câu
lệnh tự động commit, hãy bật chế độ xả (flush) thủ công thông qua API Session. Sau đó, bạn có thể thiết lập ranh giới
giao dịch thông thường cho tất cả các đơn vị công việc, với khả năng đọc lặp lại và thậm chí cách ly snapshot từ cơ sở
dữ liệu MVCC của bạn, nhưng vẫn có thể hàng đợi các thay đổi trong persistence context để thực thi sau và sử dụng
manual flush() trước khi giao dịch của bạn được commit.



