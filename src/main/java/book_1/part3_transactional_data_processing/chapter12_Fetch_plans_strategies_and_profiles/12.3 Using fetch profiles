Fetch profiles bổ sung cho các tùy chọn tìm nạp trong các ngôn ngữ truy vấn-query languages và APIs. Chúng cho phép bạn
maintain-duy trì các định nghĩa profile của bạn trong định dạng XML hoặc dữ liệu annotation. Các phiên bản Hibernate ban đầu 
không hỗ trợ các fetch profile đặc biệt, nhưng hiện nay Hibernate hỗ trợ các fetch profile sau đây:

- Fetch profiles: Một API độc quyền dựa trên việc khai báo profile bằng @org.hibernate.annotations.FetchProfile và thực thi
bằng cách sử dụng Session#enableFetchProfile(). Cơ chế đơn giản này hiện tại hỗ trợ ghi đè chọn lọc trên các mối quan hệ  
và bộ sưu tập của thực thể được thiết lập lazy, cho phép chiến lược JOIN eager fetching nhanh cho một unit of work cụ thể.

- Entity graphs: Được chỉ định trong JPA 2.1, bạn có thể khai báo một đồ thị các thuộc tính và mối quan hệ của thực thể
bằng cách sử dụng chú thích @EntityGraph. Kế hoạch truy xuất này, hoặc sự kết hợp của các kế hoạch, có thể được bật như
một gợi ý khi thực thi EntityManager#find() hoặc các truy vấn (JPQL, criteria). Đồ thị được cung cấp kiểm soát việc nào
nên được nạp; không may mắn rằng nó không kiểm soát cách nạp nó.

Có thể nói rằng có không gian để cải thiện ở đây, và chúng tôi mong đợi các phiên bản tương lai của Hibernate và JPA sẽ
cung cấp một API thống nhất và mạnh mẽ hơn. Đừng quên bạn có thể tách biệt các câu truy vấn JPQL và SQL và chuyển chúng
đến metadata (xem phần 14.4). Một truy vấn JPQL là một hồ sơ fetch tường minh (được đặt tên); điều bạn đang thiếu là
khả năng đặt lớp lên các kế hoạch khác nhau dễ dàng trên cùng một truy vấn cơ sở. Chúng tôi đã thấy một số giải pháp sáng tạo
với xử lý chuỗi mà nên tránh. Với truy vấn criteria, ngược lại, bạn đã có sẵn sức mạnh đầy đủ của Java để tổ chức mã
xây dựng truy vấn của bạn. Sau đó, giá trị của các entity graph là có thể tái sử dụng kế hoạch truy xuất
trên bất kỳ loại truy vấn nào.

Hãy nói về các hồ sơ fetch của Hibernate trước và cách bạn có thể ghi đè lên kế hoạch truy xuất lười biếng toàn cầu cho
một unit of work cụ thể.

[Hibernate Feature]

12.3.1 Declaring Hibernate fetch profiles
Fetch profiles của Hibernate là dữ liệu global metadata: chúng được khai báo cho toàn bộ persistence unit. Mặc dù bạn có
thể đặt chú thích @FetchProfile trên một lớp, chúng tôi ưa thích việc sử dụng nó như dữ liệu chú thích cấp gói trong một
tập tin package-info.java:

PATH: /model/src/main/java/org/jpwh/model/fetching/profile/package-info.java

@org.hibernate.annotations.FetchProfiles({
    @FetchProfile(name = Item.PROFILE_JOIN_SELLER,      // [1] Profile name
        fetchOverrides = @FetchProfile.FetchOverride(   // [2] Override
            entity = Item.class,
            association = "seller",
            mode = FetchMode.JOIN                           // [3] JOIN mode
    )),
    @FetchProfile(name = Item.PROFILE_JOIN_BIDS,
        fetchOverrides = @FetchProfile.FetchOverride(
            entity = Item.class,
            association = "bids",
            mode = FetchMode.JOIN
    ))
})

1 Mỗi profile có một tên. Đây là một chuỗi đơn giản được đặt trong một hằng số cụ thể.

2 Mỗi sự ghi đè trong một profile đặt tên cho một mối quan hệ hoặc bộ sưu tập thực thể.

3 Chế độ duy nhất được hỗ trợ vào thời điểm viết là JOIN (kết nối).


Các profile có thể được kích hoạt cho một unit of work ngay bây giờ.

PATH: /examples/src/test/java/org/jpwh/test/fetching/Profile.java

Item item = em.find(Item.class, ITEM_ID);       // [1] Retrieves instance

em.clear();
em.unwrap(Session.class).enableFetchProfile(Item.PROFILE_JOIN_SELLER); // [2] Enables profile
item = em.find(Item.class, ITEM_ID);

em.clear();
em.unwrap(Session.class).enableFetchProfile(Item.PROFILE_JOIN_BIDS);
item = em.find(Item.class, ITEM_ID);

1 Thuộc tính Item#seller được ánh xạ là lười biếng, vì vậy kế hoạch truy xuất mặc định chỉ truy xuất thực thể Item.

2 Bạn cần sử dụng API Hibernate để kích hoạt một profile. Sau đó, nó sẽ hoạt động cho bất kỳ thao tác nào trong unit of work đó.
Thực thể Item#seller được truy xuất bằng cách tham gia vào trong cùng một câu lệnh SQL khi một thực thể Item được nạp
bằng EntityManager này.

3 Bạn có thể đè lên một profile khác trên cùng một unit of work. Bây giờ, các thuộc tính Item#seller và bộ sưu tập Item#bids
được truy xuất bằng cách tham gia vào trong cùng một câu lệnh SQL khi một thực thể Item được nạp.

Mặc dù đơn giản, profile fetch của Hibernate có thể là một giải pháp dễ dàng cho việc tối ưu hóa truy xuất trong các
ứng dụng nhỏ hoặc đơn giản hơn. Với JPA 2.1, việc giới thiệu entity graph (entity graphs) cho phép tích hợp chức năng
tương tự một cách tiêu chuẩn.


12.3.2 Working with entity graphs

Một entity graph (entity graph) là một khai báo của các entity nodes và thuộc tính của chúng, ghi đè hoặc bổ sung lên
kế hoạch truy xuất mặc định khi bạn thực hiện một EntityManager#find() hoặc sử dụng gợi ý trong các hoạt động truy vấn.
Dưới đây là một ví dụ về hoạt động truy xuất sử dụng một entity graph:

PATH: /examples/src/test/java/org/jpwh/test/fetching/FetchLoadGraph.java

Map<String, Object> properties = new HashMap<>();
properties.put(
    "javax.persistence.loadgraph",
    em.getEntityGraph(Item.class.getSimpleName())
);
Item item = em.find(Item.class, ITEM_ID, properties);
// select * from ITEM where ID = ?

Tên của entity graph bạn đang sử dụng là "Item", và gợi ý cho hoạt động find() cho biết nó nên là (load graph-load graph).
Điều này có nghĩa rằng các attributes được chỉ định bởi các attributes node của entity graph được xem xét là
FetchType.EAGER, và các thuộc tính không được chỉ định sẽ được xử lý theo FetchType được chỉ định hoặc mặc định trong
ánh xạ.

Dưới đây là khai báo của đồ thị này và kế hoạch tải mặc định của lớp thực thể:

PATH: /model/src/main/java/org/jpwh/model/fetching/fetchloadgraph/Item.java

@NamedEntityGraphs({
    @NamedEntityGraph           // Default “Item” entity graph
})
@Entity
public class Item {
    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    protected User seller;

    @OneToMany(mappedBy = "item")
    protected Set<Bid> bids = new HashSet<>();

    @ElementCollection
    protected Set<String> images = new HashSet<>();
    // ...
}

Entity graphs trong metadata có tên và được liên kết với một lớp thực thể; thường được khai báo trong các chú thích đặt
ở đầu lớp thực thể. Bạn cũng có thể đặt chúng trong tệp XML nếu muốn. Nếu bạn không đặt tên cho một entity graph,
nó sẽ có tên đơn giản là tên lớp thực thể của nó, ở đây là "Item". Nếu bạn không chỉ định bất kỳ node thuộc tính nào
trong đồ thị, giống như entity graph trống rỗng trong ví dụ cuối cùng, thì các giá trị mặc định của lớp thực thể sẽ
được sử dụng. Trong lớp "Item", tất cả các liên kết và bộ sưu tập đều được ánh xạ sang FetchType.LAZY; đây là kế hoạch
tải mặc định. Do đó, những gì bạn đã làm cho đến nay không có sự khác biệt nhiều, và hoạt động find() mà không có bất kỳ
gợi ý nào sẽ tạo ra kết quả giống nhau: thực thể "Item" sẽ được tải, và các thông tin về người bán, các lượt đặt giá và
hình ảnh sẽ không được tải.

Ngoài ra, bạn có thể xây dựng một entity graph bằng một API:

PATH: /examples/src/test/java/org/jpwh/test/fetching/FetchLoadGraph.java
EntityGraph<Item> itemGraph = em.createEntityGraph(Item.class);

Map<String, Object> properties = new HashMap<>();
properties.put("javax.persistence.loadgraph", itemGraph);

Item item = em.find(Item.class, ITEM_ID, properties);

Đây lại là một entity graph trống không có nút thuộc tính, được đưa trực tiếp vào một hoạt động truy vấn.

Hãy giả sử bạn muốn viết một entity graph mà khi được kích hoạt, nó sẽ thay đổi FetchType mặc định của thuộc tính "seller"
trong lớp "Item" từ lazy fetching sang eager fetching:

PATH: /model/src/main/java/org\jpwh/model/fetching/fetchloadgraph/Item.java

@NamedEntityGraphs({
    @NamedEntityGraph(
        name = "ItemSeller",
        attributeNodes = {
            @NamedAttributeNode("seller")
        }
    )
})
    @Entity
    public class Item {
    // ...
}

Bây giờ hãy kích hoạt đồ thị này bằng tên khi bạn muốn "Item" và "seller" được tải một cách tức thì (eagerly):

PATH: /examples/src/test/java/org/jpwh/test/fetching/FetchLoadGraph.java

Map<String, Object> properties = new HashMap<>();
properties.put(
    "javax.persistence.loadgraph",
    em.getEntityGraph("ItemSeller")
);
Item item = em.find(Item.class, ITEM_ID, properties);
// select i.*, u.*
// from ITEM i
// inner join USERS u on u.ID = i.SELLER_ID
// where i.ID = ?

Nếu bạn không muốn mã cố định đồ thị trong các chú thích, hãy xây dựng nó bằng API thay vì vậy.

PATH: /examples/src/test/java/org/jpwh/test/fetching/FetchLoadGraph.java
EntityGraph<Item> itemGraph = em.createEntityGraph(Item.class);
itemGraph.addAttributeNodes(Item_.seller);
Map<String, Object> properties = new HashMap<>();
properties.put("javax.persistence.loadgraph", itemGraph);
Item item = em.find(Item.class, ITEM_ID, properties);
// select i.*, u.*
// from ITEM i
// inner join USERS u on u.ID = i.SELLER_ID
// where i.ID = ?

Đến nay, bạn chỉ đã thấy các thuộc tính cho hoạt động find(). Đồ thị thực thể cũng có thể được kích hoạt cho các truy vấn:

PATH: /examples/src/test/java/org/jpwh/test/fetching/FetchLoadGraph.java

List<Item> items =
    em.createQuery("select i from Item i")
        .setHint("javax.persistence.loadgraph", itemGraph)
        .getResultList();
// select i.*, u.*
// from ITEM i
// left outer join USERS u on u.ID = i.SELLER_ID

Các entity graphs có thể phức tạp. Khai báo sau đây cho thấy cách làm việc với các khai báo subgraph có thể tái sử dụng:

PATH: /model/src/main/java/org/jpwh/model/fetching/fetchloadgraph/Bid.java

@NamedEntityGraphs({
    @NamedEntityGraph(
        name = "BidBidderItemSellerBids",
        attributeNodes = {
            @NamedAttributeNode(value = "bidder"),
            @NamedAttributeNode(
                value = "item",
                subgraph = "ItemSellerBids"
        )
    },
    subgraphs = {
        @NamedSubgraph(
            name = "ItemSellerBids",
            attributeNodes = {
                @NamedAttributeNode("seller"),
                @NamedAttributeNode("bids")
        })
    }
    )
})
@Entity
public class Bid {
    // ...
}

Khi entity graph này được kích hoạt như một load graph khi truy vấn các instance Bid, nó cũng kích hoạt eager fetching
của Bid#bidder, Bid#item, và hơn nữa là Item#seller và tất cả Item#bids. Mặc dù bạn có thể tự do đặt tên cho các entity graph
của bạn bất kỳ cách nào bạn muốn, chúng tôi khuyến nghị bạn phát triển một quy ước mà tất cả mọi người trong nhóm của bạn có
thể tuân theo và di chuyển các chuỗi thành các hằng số chia sẻ.

Với API entity graph, kế hoạch trước đó trông như sau:

PATH: /examples/src/test/java/org/jpwh/test/fetching/FetchLoadGraph.java

EntityGraph<Bid> bidGraph = em.createEntityGraph(Bid.class);
bidGraph.addAttributeNodes(Bid_.bidder, Bid_.item);
Subgraph<Item> itemGraph = bidGraph.addSubgraph(Bid_.item);
itemGraph.addAttributeNodes(Item_.seller, Item_.bids);
Map<String, Object> properties = new HashMap<>();
properties.put("javax.persistence.loadgraph", bidGraph);
Bid bid = em.find(Bid.class, BID_ID, properties);

Bạn chỉ mới thấy đồ thị thực thể dưới dạng load graph cho đến nay. Có một tùy chọn khác: bạn có thể kích hoạt một đồ thị
thực thể như một đồ thị truy xuất (fetch graph) bằng gợi ý javax.persistence.fetchgraph. Nếu bạn thực hiện một hoạt động
find() hoặc truy vấn với một đồ thị truy xuất, bất kỳ thuộc tính và bộ sưu tập nào không có trong kế hoạch của bạn sẽ được
đặt thành FetchType.LAZY, và bất kỳ node nào trong kế hoạch của bạn sẽ được đặt thành FetchType.EAGER. Điều này hiệu quả
làm ngó lơ tất cả các thiết lập FetchType trong ánh xạ thuộc tính và bộ sưu tập của thực thể bạn, trong khi tính năng
load graph chỉ làm bổ sung.

Có hai điểm yếu của các hoạt động đồ thị thực thể JPA đáng được đề cập, bởi vì bạn sẽ gặp chúng nhanh chóng.
Đầu tiên, bạn chỉ có thể sửa đổi kế hoạch tải, không thể sửa đổi chiến lược tải của Hibernate (batch/subselect/join/select).
Thứ hai, việc khai báo một đồ thị thực thể trong các chú thích hoặc XML không hoàn toàn an toàn kiểu dáng:
tên các thuộc tính là chuỗi. API Entity Graph ít nhất là an toàn kiểu dáng.


