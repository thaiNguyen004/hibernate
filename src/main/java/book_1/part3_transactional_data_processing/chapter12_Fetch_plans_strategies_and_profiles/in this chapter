In this chapter
- Lazy and eager loading
- Fetch plans, strategies, and profiles
- Optimizing SQL execution

Trong chương này, chúng ta khám phá giải pháp của Hibernate cho vấn đề cơ bản của ORM về (điều hướng-navigation),
như đã đề cập trong phần 1.2.5. Chúng tôi sẽ hướng dẫn bạn cách truy xuất dữ liệu từ cơ sở dữ liệu và cách bạn có
thể tối ưu hóa việc này.

Hibernate cung cấp các cách sau để lấy dữ liệu ra khỏi cơ sở dữ liệu và đưa vào bộ nhớ:
- Truy xuất một thể hiện thực thể thông qua identifier là phương pháp thuận tiện nhất khi giá trị bộ nhận dạng duy nhất
của một thể hiện thực thể đã biết: ví dụ, entityManager.find(Item.class, 123).
- Bạn có thể điều hướng biểu đồ thực thể, bắt đầu từ một thể hiện thực thể đã được tải, bằng cách truy cập các thể hiện 
thực thể liên quan thông qua các phương thức truy cập thuộc tính như someItem.getSeller().getAddress().getCity(), và cứ thế. 
Các phần tử của các collection được ánh xạ cũng được tải khi bạn bắt đầu duyệt qua một collection. Hibernate tự động tải 
các nút của biểu đồ thực thể nếu persistence context vẫn còn mở. Việc nào và cách dữ liệu được tải khi bạn gọi các trình truy cập 
và duyệt qua các collection là trọng tâm của chương này.
- Bạn có thể sử dụng Java Persistence Query Language (JPQL), một ngôn ngữ truy vấn toàn bộ dựa trên đối tượng dựa trên chuỗi
như select i from Item i where i.id = ?.
- Giao diện CriteriaQuery cung cấp một cách an toàn theo kiểu và dựa trên đối tượng để thực hiện các truy vấn mà không
cần xử lý chuỗi.
- Bạn có thể viết các truy vấn SQL nguyên bản, gọi các thủ tục lưu trữ và để Hibernate xử lý ánh xạ kết quả JDBC
thành các thể hiện của các lớp mô hình miền của bạn.
- Trong ứng dụng JPA của bạn, bạn sẽ sử dụng một kết hợp của các kỹ thuật này, nhưng chúng tôi sẽ không thảo luận chi tiết
về từng phương thức truy xuất trong chương này. Đến lúc này, bạn nên đã quen với API Java Persistence cơ bản để truy xuất
bằng bộ nhận dạng. Chúng tôi giữ ví dụ JPQL và CriteriaQuery của mình càng đơn giản càng tốt và bạn sẽ không cần tính năng
ánh xạ truy vấn SQL. Bởi vì các tùy chọn truy vấn này là phức tạp, chúng tôi sẽ khám phá chúng thêm trong các chương 15 và 17.

Các tính năng chính mới trong JPA 2:
- Bạn có thể kiểm tra trạng thái khởi tạo thủ công của một thực thể hoặc thuộc tính của thực thể bằng cách sử dụng lớp trợ giúp tĩnh
mới là PersistenceUtil.
- Bạn có thể tạo kế hoạch truy xuất bằng cách sử dụng API EntityGraph mới để định nghĩa một cách chuẩn hoá và khai báo.

Chương này trình bày những gì xảy ra bên trong khi bạn điều hướng đồ thị thực thể của mô hình miền của bạn và Hibernate
truy xuất dữ liệu theo yêu cầu. Trong tất cả các ví dụ, chúng tôi sẽ hiển thị mã SQL được thực thi bởi Hibernate trong một
comment ngay sau hoạt động gây ra việc thực thi SQL.

Những gì Hibernate tải phụ thuộc vào kế hoạch truy xuất: bạn xác định đồ thị (con) của mạng các đối tượng cần được tải.
Sau đó, bạn chọn chiến lược truy xuất phù hợp, xác định cách dữ liệu sẽ được tải. Bạn có thể lưu lựa chọn của mình về
kế hoạch và chiến lược như một hồ sơ truy xuất (fetch profile) và có thể sử dụng lại nó.

Việc định nghĩa kế hoạch truy xuất và dữ liệu nào sẽ được tải bởi Hibernate phụ thuộc vào hai kỹ thuật cơ bản:
tải lười biếng (lazy loading) và tải nhanh chóng (eager loading) của các nút trong mạng các đối tượng.
