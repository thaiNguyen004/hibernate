INDEX
[10.2.1] The (canonical-kinh điển) unit of work
[10.2.2] Making data persistent
[10.2.3] Retrieving and modifying persistent data - truy xuất và sửa đổi dữ liệu persistent
[10.2.4] Getting a reference
[10.2.5] Making data transient
[10.2.6] Refreshing data
[10.2.7] Replicating data
[10.2.8] Bộ nhớ đệm trong the persistence context
[10.2.9] Flushing the persistence context




Bất kỳ công cụ transparent persistence đều bao gồm một persistence manager API. Thường thì, persistence manager này cung
cấp các dịch vụ cho các hoạt động CRUD cơ bản (create, read, update, delete), thực hiện truy vấn và kiểm soát persistence context.
Trong các ứng dụng Java Persistence, giao diện chính bạn tương tác với là EntityManager, để tạo các unit of work.


[10.2.1] The (canonical-kinh điển) unit of work

Trong Java SE và một số kiến trúc EE (nếu bạn chỉ sử dụng servlets thuần túy, ví dụ), bạn có thể có được một EntityManager 
bằng cách gọi EntityManagerFactory#createEntityManager(). Mã ứng dụng của bạn sẽ chia sẻ EntityManagerFactory, 
đại diện cho một persistence unit hoặc một cơ sở dữ liệu logic. Hầu hết các ứng dụng chỉ có một EntityManagerFactory được chia sẻ.

Bạn sử dụng EntityManager cho một unit of work trong một luồng đơn và nó không đắt đỏ để tạo ra. Đoạn mã sau đây instance
một ví dụ cổ điển và điển hình của một unit of work:

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

EntityManager em = null;
UserTransaction tx = TM.getUserTransaction();
try {
    tx.begin();
    em = JPA.createEntityManager();        <-- Application-managed
    // ...
    tx.commit();                <-- Synchronizes/flushes persistence context
} catch (Exception ex) {
    // Transaction rollback, exception handling
    // ...
} finally {
    if (em != null && em.isOpen())
    em.close();             <-- You create it, you close it!
}

(Lớp TM là một lớp tiện ích được đính kèm với mã ví dụ của cuốn sách này. Ở đây, nó đơn giản hóa việc tìm kiếm API UserTransaction 
tiêu chuẩn trong JNDI. Lớp JPA cung cấp cách truy cập thuận tiện đến EntityManagerFactory được chia sẻ.)

Mọi thứ giữa tx.begin() và tx.commit() xảy ra trong một giao dịch. Hiện tại, hãy lưu ý rằng tất cả các hoạt động cơ sở dữ liệu 
trong phạm vi giao dịch, chẳng hạn như các câu lệnh SQL được thực thi bởi Hibernate, sẽ hoàn toàn thành công hoặc thất bại. 
Đừng lo quá nhiều về mã giao dịch ở thời điểm này; bạn sẽ đọc thêm về control concurent trong chương tiếp theo. 
Chúng ta sẽ xem lại ví dụ tương tự với sự tập trung vào mã giao dịch và xử lý ngoại lệ. Tuyệt đối không viết các khối catch 
trống trong mã của bạn - bạn sẽ phải hoàn tác giao dịch và xử lý ngoại lệ.

Việc tạo một EntityManager bắt đầu persistence context của nó. Hibernate sẽ không truy cập cơ sở dữ liệu cho đến khi cần thiết;
EntityManager không lấy kết nối JDBC từ pool cho đến khi các câu lệnh SQL phải được thực thi. Bạn có thể tạo và đóng
EntityManager mà không cần truy cập vào cơ sở dữ liệu. Hibernate thực hiện câu lệnh SQL khi bạn tra cứu hoặc truy vấn dữ liệu
và khi nó đẩy các thay đổi được phát hiện bởi persistence context vào cơ sở dữ liệu. Hibernate tham gia vào system transaction
đang diễn ra khi một EntityManager được tạo và đợi giao dịch hoàn thành. Khi Hibernate được thông báo (bởi engine JTA)
về việc commit, nó thực hiện kiểm tra sự thay đổi của persistence context và đồng bộ hóa với cơ sở dữ liệu.
Bạn cũng có thể đồng bộ hóa kiểm tra sự thay đổi thủ công bằng cách gọi EntityManager#flush() bất kỳ lúc nào trong một giao dịch.

Bạn quyết định phạm vi của persistence context bằng cách chọn khi đóng() EntityManager. Bạn phải đóng persistence context 
ở một thời điểm nào đó, vì vậy luôn đặt cuộc gọi close() trong một khối finally.

Persistence context nên được mở trong bao lâu? Hãy giả sử cho các ví dụ sau đây rằng bạn đang viết một máy chủ và mỗi 
yêu cầu của khách hàng sẽ được xử lý bằng một persistence context và giao dịch hệ thống trong một môi trường đa luồng. 
Nếu bạn quen thuộc với servlets, hãy tưởng tượng mã trong danh sách 10.1 được nhúng trong phương thức service() 
của một servlet. Trong unit of work này, bạn truy cập EntityManager để tải và lưu trữ dữ liệu.


[10.2.2] Making data persistent

Hãy tạo một instance mới của một thực thể và chuyển nó từ trạng thái transient sang trạng thái persistent.

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

Item item = new Item();
item.setName("Some Item");

em.persist(item);
Long ITEM_ID = item.getId();

Bạn có thể thấy cùng một unit of work và cách các instance Item thay đổi trạng thái trong hình 10.2.
   
Một instance mới của Item ở trạng thái transient được khởi tạo như thường lệ. Tất nhiên, bạn cũng có thể khởi tạo nó 
trước khi tạo EntityManager. Cuộc gọi persist() làm cho instance transient của Item trở nên persistent. 
Nó hiện tại được quản lý bởi và liên kết với persistence context hiện tại. Để lưu trữ instance Item trong cơ sở dữ liệu, 
Hibernate phải thực hiện một câu lệnh SQL INSERT. Khi giao dịch của unit of work này hoàn thành, Hibernate flush persistence context
và INSERT xảy ra tại thời điểm đó. Hibernate có thể gom nhóm các INSERT ở mức JDBC với các câu lệnh khác.
Khi bạn gọi persist(), chỉ có giá trị của bộ nhận dạng của Item được gán. Hoặc nếu identifier generator của bạn không phải
là pre-insert, câu lệnh INSERT sẽ được thực hiện ngay lập tức khi gọi persist(). Bạn có thể muốn xem lại phần 4.2.5.

Phát hiện trạng thái của thực thể bằng cách sử dụng bộ nhận dạng
Đôi khi bạn cần biết liệu một instance thực thể có trạng thái transient, persistent, hay detached không. Một instance
thực thể ở trạng thái persistent nếu EntityManager#contains(e) trả về true. Nó ở trạng thái transient nếu
PersistenceUnitUtil#getIdentifier(e) trả về null. Nó ở trạng thái detached nếu nó không phải là persistent và
PersistenceUnitUtil#getIdentifier(e) trả về giá trị của thuộc tính bộ nhận dạng của thực thể.
Bạn có thể truy cập PersistenceUnitUtil từ EntityManagerFactory.
Có hai vấn đề bạn cần lưu ý. Thứ nhất, hãy nhớ rằng giá trị bộ nhận dạng có thể chưa được gán và sẽ có sẵn cho đến
khi persistence context được flush. Thứ hai, Hibernate (khác với một số nhà cung cấp JPA khác) không bao giờ trả về null
từ PersistenceUnitUtil#getIdentifier() nếu thuộc tính bộ nhận dạng của bạn là một kiểu nguyên thủy (long và không phải là Long).

Tốt hơn (nhưng không bắt buộc) nếu bạn khởi tạo đầy đủ instance của Item trước khi quản lý nó bằng persistence context.
Câu lệnh SQL INSERT chứa các giá trị được giữ bởi instance vào thời điểm gọi persist(). Nếu bạn không đặt tên cho Item
trước khi làm cho nó trở thành persistent, có thể xảy ra vi phạm ràng buộc NOT NULL. Bạn có thể sửa đổi Item sau khi gọi persist(),
và các thay đổi của bạn sẽ được truyền đạt đến cơ sở dữ liệu thông qua một câu lệnh SQL UPDATE bổ sung.
Nếu một trong những câu lệnh INSERT hoặc UPDATE được thực hiện khi đẩy không thành công, Hibernate sẽ gây ra việc rollback
các thay đổi đã thực hiện đối với các instance persistent trong giao dịch này ở mức cơ sở dữ liệu. Nhưng Hibernate không rollback
các thay đổi trong bộ nhớ đối với các instance persistent. Nếu bạn thay đổi Item#name sau khi gọi persist(),
một lỗi commit sẽ không quay trở lại tên cũ. Điều này là hợp lý vì một lỗi trong một giao dịch thường là không thể phục hồi,
và bạn phải loại bỏ ngay lập tức persistence context và EntityManager bị lỗi. Chúng ta sẽ thảo luận về xử lý ngoại lệ trong chương tiếp theo.
Tiếp theo, bạn sẽ load và sửa đổi dữ liệu đã lưu trữ.

[10.2.3] Retrieving and modifying persistent data - truy xuất và sửa đổi dữ liệu persistent

Bạn có thể truy vấn các instance persistent từ cơ sở dữ liệu bằng EntityManager. Trong ví dụ tiếp theo, chúng ta giả định
bạn đã giữ giá trị bộ nhận dạng của Item đã lưu trữ ở phần trước đó ở một nơi nào đó và hiện đang tra cứu cùng một instance
trong một unit of work mới bằng bộ nhận dạng:

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

Item item = em.find(Item.class, ITEM_ID);       <-- Lượt truy cập cơ sở dữ liệu nếu chưa có trong persistence context
if (item != null)
    item.setName("New Name");       <-- Modify

Hình 10.3 cho thấy sự chuyển đổi này một cách trực quan.

Bạn không cần phải ép kiểu giá trị trả về của hoạt động find(); đó là một phương thức generic và kiểu trả về của nó được 
đặt một cách hiển nhiên dựa vào tham số đầu tiên. Thể hiện thực thể đã được truy vấn nằm trong trạng thái persistent và 
bạn có thể sửa đổi nó bên trong unit of work.

Nếu không có instance persistent nào với giá trị bộ nhận dạng đã cho có thể được tìm thấy, hoạt động find() trả về null. 
Hoạt động find() luôn truy cập cơ sở dữ liệu nếu không có sự tương ứng với kiểu thực thể và bộ nhận dạng đã cho trong 
bộ nhớ đệm của persistence context. Thể hiện thực thể luôn được khởi tạo trong quá trình load. Bạn có thể mong đợi có
tất cả các giá trị của nó có sẵn sau này ở trạng thái detached, ví dụ, khi hiển thị màn hình sau khi bạn đóng persistence context.
(Hibernate có thể không truy cập cơ sở dữ liệu nếu bộ nhớ đệm cấp hai tùy chọn của nó được kích hoạt;
chúng ta sẽ thảo luận về bộ nhớ đệm chia sẻ này trong phần 20.2.)

Bạn có thể sửa đổi instance của Item, và persistence context sẽ phát hiện các thay đổi này và tự động ghi chúng vào cơ sở dữ liệu.
Khi Hibernate đẩy persistence context trong quá trình commit, nó thực thi các câu lệnh SQL DML cần thiết để đồng bộ hóa
các thay đổi với cơ sở dữ liệu. Hibernate truyền đạt các thay đổi trạng thái đến cơ sở dữ liệu càng muộn càng tốt,
gần cuối giao dịch. Các câu lệnh DML thường tạo khóa trong cơ sở dữ liệu và được giữ cho đến khi giao dịch hoàn thành,
vì vậy Hibernate giữ thời gian khóa trong cơ sở dữ liệu càng ngắn càng tốt.

Hibernate viết tên Item#name mới vào cơ sở dữ liệu với một câu lệnh SQL UPDATE. Mặc định, Hibernate bao gồm tất cả các
cột của bảng ITEM đã được ánh xạ trong câu lệnh SQL UPDATE, cập nhật các cột không thay đổi về giá trị cũ của chúng.
Do đó, Hibernate có thể tạo các câu lệnh SQL cơ bản này khi khởi động, không phải vào thời điểm chạy. Nếu bạn muốn bao
gồm chỉ các cột đã được sửa đổi (hoặc không có giá trị rỗng cho INSERT) trong các câu lệnh SQL, bạn có thể kích hoạt
việc tạo SQL động như đã thảo luận trong phần 4.3.2.

Hibernate phát hiện tên đã thay đổi bằng cách so sánh Item với bản sao snapshot nó đã chụp trước đó, khi Item được
tải từ cơ sở dữ liệu. Nếu Item của bạn khác với bản snapshot, thì cần có một câu lệnh UPDATE. Bản snapshot này trong persistence context
tiêu thụ bộ nhớ. Kiểm tra trạng thái bằng cách sử dụng snapshot cũng có thể tốn thời gian, vì Hibernate phải so sánh tất cả
các instance trong persistence context với bản snapshot của họ trong quá trình đẩy.

Bạn có thể muốn tùy chỉnh cách Hibernate phát hiện trạng thái bẩn bằng cách sử dụng một điểm mở rộng.
Đặt thuộc tính hibernate.entity_dirtiness_strategy trong tệp cấu hình persistence.xml của bạn thành tên lớp triển khai
org.hibernate.CustomEntityDirtinessStrategy. Xem Javadoc của giao diện này để biết thêm thông tin. org.hibernate.Interceptor
là một điểm mở rộng khác được sử dụng để tùy chỉnh việc kiểm tra trạng thái bẩn, bằng cách triển khai phương thức findDirty()
của nó. Bạn có thể tìm thấy một ví dụ về interceptor trong phần 13.2.2.

Chúng ta đã đề cập trước đây rằng persistence context cho phép repeatable read của các instance thực thể và cung cấp
một đảm bảo tính định danh đối tượng:

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

Item itemA = em.find(Item.class, ITEM_ID);
Item itemB = em.find(Item.class, ITEM_ID);      <-- Repeatable read

assertTrue(itemA == itemB);
assertTrue(itemA.equals(itemB));
assertTrue(itemA.getId().equals(itemB.getId()));

Hoạt động find() đầu tiên truy cập cơ sở dữ liệu và lấy instance của Item bằng câu lệnh SELECT. Hoạt động find() thứ hai 
được giải quyết trong persistence context, và cùng một instance Item đã được lưu trữ trong bộ nhớ đệm được trả về.

Đôi khi bạn cần một instance entity nhưng bạn không muốn truy cập cơ sở dữ liệu.

[10.2.4] Getting a reference
Nếu bạn không muốn truy cập cơ sở dữ liệu khi tải một instance entity, vì bạn không chắc chắn rằng bạn cần một instance 
đã được khởi tạo hoàn toàn, bạn có thể chỉ cho EntityManager thử việc truy xuất một hollow placeholder - một proxy.

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

Item item = em.getReference(Item.class, ITEM_ID);       // [1] getReference()
PersistenceUnitUtil persistenceUtil =
    JPA.getEntityManagerFactory().getPersistenceUnitUtil();         [2] Helper method
assertFalse(persistenceUtil.isLoaded(item));

// assertEquals(item.getName(), "Some Item");           //[3] Initializes proxy
// Hibernate.initialize(item);                          //[4] Loads proxy data

tx.commit();
em.close();
assertEquals(item.getName(), "Some Item");              //[5] Instance trong trạng thái detached


1 Nếu persistence context đã chứa một Item với giá trị định danh đã cho, thì instance Item đó sẽ được trả về bởi
getReference() mà không cần truy cập cơ sở dữ liệu. Hơn nữa, nếu không có instance đã thực sự với giá trị định danh đó
đang được quản lý, Hibernate sẽ tạo ra một hollow placeholder: một proxy. Điều này có nghĩa là getReference() sẽ không
truy cập cơ sở dữ liệu và nó sẽ không trả về null, khác với find().

2 JPA cung cấp các phương thức trợ giúp của PersistenceUnitUtil như isLoaded() để phát hiện xem bạn đang làm việc với
một proxy chưa được khởi tạo.

3 Ngay khi bạn gọi bất kỳ phương thức nào như Item#getName() trên proxy, một câu lệnh SELECT sẽ được thực thi để khởi
tạo hoàn toàn cái placeholder. Ngoại lệ cho quy tắc này là một phương thức getter cho định danh cơ sở dữ liệu đã được ánh xạ,
như getId(). Một proxy có thể giống với thực tế, nhưng nó chỉ là một cái placeholder mang giá trị định danh của instance
thực thể nó đại diện. Nếu bản ghi cơ sở dữ liệu không còn tồn tại khi proxy được khởi tạo, một EntityNotFoundException
sẽ được ném ra. Lưu ý rằng ngoại lệ có thể được ném ra khi Item#getName() được gọi.

4 Hibernate có một phương thức initialize() tĩnh tiện lợi để tải dữ liệu của proxy.

5 Sau khi persistence context được đóng, item ở trong trạng thái detached. Nếu bạn không khởi tạo proxy trong khi
persistence context vẫn mở, bạn sẽ nhận được một LazyInitializationException nếu bạn truy cập proxy. Bạn không thể tải
dữ liệu theo yêu cầu khi persistence context đã đóng. Giải pháp đơn giản là tải dữ liệu trước khi bạn đóng persistence context.

Chúng tôi sẽ có nhiều điều hơn để nói về proxy, lazy loading và truy xuất theo yêu cầu trong chương 12.
Nếu bạn muốn xóa trạng thái của một instance thực thể khỏi cơ sở dữ liệu, bạn phải biến nó thành transient.

[10.2.5] Making data transient

Để biến một thực thể (entity) trở thành transient và xóa bỏ sự đại diện của nó trong cơ sở dữ liệu, bạn có thể gọi
phương thức remove() trên đối tượng EntityManager. Dưới đây là cách bạn có thể thực hiện điều này:

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

Item item = em.find(Item.class, ITEM_ID);
//Item item = em.getReference(Item.class, ITEM_ID);  <-[1] Calls find() or getReference()

em.remove(item);            //[2] Queues instance for deletion

assertFalse(em.contains(item)); //[3] Checks entity state

// em.persist(item);        // [4] Cancels deletion

assertNull(item.getId());   // [5]`hibernate.use_identifier_rollback` đã được bật; bây giờ giống như một thực thể transient.

tx.commit();        // [5] Commits transaction commits
em.close();

1 Nếu bạn gọi `find()`, Hibernate thực hiện một câu lệnh SELECT để tải dữ liệu của Item. Nếu bạn gọi `getReference()`,
Hibernate cố gắng tránh câu lệnh SELECT và trả về một proxy.

2 Gọi `remove()` đưa thực thể vào hàng đợi để xóa khi unit of work hoàn thành; bây giờ thực thể ở trạng thái đã xóa.
Nếu `remove()` được gọi trên một proxy, Hibernate thực hiện một SELECT để tải dữ liệu. Một thực thể phải được khởi tạo hoàn toàn
trong các chuyển đổi vòng đời. Bạn có thể có các phương thức gọi lại vòng đời hoặc một trình nghe thực thể được bật
(xem mục 13.2), và thực thể phải thông qua những bộ chặn này để hoàn thành vòng đời đầy đủ của nó.

3 Một thực thể ở trạng thái đã xóa không còn ở trạng thái persistent nữa. Bạn có thể kiểm tra điều này bằng phép `contains()`.

4 Bạn có thể làm cho thực thể đã xóa trở thành persistent lại, hủy bỏ việc xóa.

5 Khi giao dịch commit, Hibernate đồng bộ hóa các chuyển đổi trạng thái với cơ sở dữ liệu và thực thi SQL DELETE. Trình thu gom
rác của JVM phát hiện rằng mục đã không còn được tham chiếu bởi bất kỳ ai và cuối cùng xóa dấu vết cuối cùng của dữ liệu.
Hình 10.4 cho thấy quy trình tương tự.

Mặc định, Hibernate sẽ không thay đổi identifier của một thực thể đã xóa. Điều này có nghĩa là phương thức `item.getId()`
vẫn trả về giá trị định danh đã lỗi thời. Đôi khi, việc làm việc với dữ liệu "đã xóa" là cần thiết: ví dụ, bạn có thể muốn lưu
lại Item đã xóa nếu người dùng quyết định hoàn tác. Như được hiển thị trong ví dụ, bạn có thể gọi `persist()` trên một
thực thể đã xóa để hủy bỏ việc xóa trước khi persistence context được đổ. Tùy chọn khác, nếu bạn thiết lập thuộc tính
`hibernate.use_identifier_rollback` thành true trong `persistence.xml`, Hibernate sẽ đặt lại giá trị định danh sau khi xóa
một thực thể. Trong ví dụ mã trước đó, giá trị định danh được đặt lại thành giá trị mặc định là null (nó là một Long).
Item bây giờ giống như ở trạng thái transient và bạn có thể lưu nó lại trong một persistence context mới.

Java Persistence cũng cung cấp các thao tác hàng loạt chuyển đổi trực tiếp thành câu lệnh SQL DELETE mà không cần bộ chặn
vòng đời trong ứng dụng. Chúng ta sẽ thảo luận về các thao tác này trong mục 20.1.
Hãy nói bạn tải một thực thể từ cơ sở dữ liệu và làm việc với dữ liệu. Vì một lý do nào đó, bạn biết rằng một ứng dụng
khác hoặc có thể một luồng khác của ứng dụng của bạn đã cập nhật hàng dưới cơ sở dữ liệu. Tiếp theo, chúng ta sẽ xem cách
làm mới dữ liệu đã lưu trong bộ nhớ.


[10.2.6] Refreshing data

Dưới đây là ví dụ về cách làm mới một persistent entity trong một ứng dụng Persistence của Java:

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java
Item item = em.find(Item.class, ITEM_ID);
item.setName("Some Name");
// Someone updates this row in the database
String oldName = item.getName();
em.refresh(item);
assertNotEquals(item.getName(), oldName);

Sau khi bạn load đối tượng thực thể, bạn nhận ra (cách thực hiện không quan trọng) rằng người khác đã thay đổi dữ liệu
trong cơ sở dữ liệu. Gọi refresh() khiến Hibernate thực hiện một SELECT để đọc và tạo ra một tập hợp kết quả hoàn chỉnh,
ghi đè lên các thay đổi bạn đã thực hiện trên thực thể persistent trong bộ nhớ ứng dụng. Nếu dòng cơ sở dữ liệu không còn
tồn tại nữa (người khác đã xóa nó), Hibernate sẽ ném ra một EntityNotFoundException khi gọi refresh(). Hầu hết các ứng dụng
không cần phải làm thủ công việc cập nhật trạng thái trong bộ nhớ; các thay đổi đồng thời thường được giải quyết tại thời
điểm commit giao dịch. Trường hợp sử dụng tốt nhất cho việc làm mới là với một persistence context kéo dài, có thể kéo dài
qua một số chu kỳ request/response và/hoặc giao dịch hệ thống. Trong lúc bạn chờ đợi đầu vào từ người dùng với một ngữ cảnh
lưu trữ mở, dữ liệu trở nên lỗi thời, và việc cập nhật có thể cần thiết tùy thuộc vào thời gian trò chuyện và cuộc trò chuyện
giữa người dùng và hệ thống. Việc làm mới có thể hữu ích để hoàn tác các thay đổi được thực hiện trong bộ nhớ trong quá trình
trò chuyện, nếu người dùng hủy cuộc đối thoại. Chúng tôi sẽ có nhiều điều để nói về việc làm mới trong một cuộc trò chuyện
trong phần 18.3. Một thao tác ít được sử dụng khác là sao chép một thực thể.


[10.2.7] Replicating data

Sao chép (replication) có ích khi bạn cần lấy dữ liệu từ một cơ sở dữ liệu và lưu nó vào cơ sở dữ liệu khác. Sao chép
thực hiện việc chuyển các đối tượng thực thể đã tách rời (detached) được nạp trong một persistence context (persistence context)
và làm cho chúng trở thành persistent trong một persistence context khác. Thông thường, bạn mở các ngữ cảnh này từ hai cấu hình
EntityManagerFactory khác nhau, cho phép sử dụng hai cơ sở dữ liệu logic. Bạn phải ánh xạ thực thể trong cả hai cấu hình.

Thao tác replicate() chỉ có sẵn trên API Hibernate Session. Dưới đây là một ví dụ về việc nạp một đối tượng thực thể Item
từ một cơ sở dữ liệu và sao chép nó vào cơ sở dữ liệu khác:

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

tx.begin();
EntityManager emA = getDatabaseA().createEntityManager();
Item item = emA.find(Item.class, ITEM_ID);

EntityManager emB = getDatabaseB().createEntityManager();
emB.unwrap(Session.class)
    .replicate(item, org.hibernate.ReplicationMode.LATEST_VERSION);
tx.commit();
emA.close();
emB.close();

Các kết nối đến cả hai cơ sở dữ liệu có thể tham gia trong cùng một giao dịch hệ thống.

ReplicationMode kiểm soát các chi tiết của quy trình sao chép:

- IGNORE (BỎ QUA): Bỏ qua đối tượng khi có một dòng cơ sở dữ liệu hiện tại với cùng mã định danh trong cơ sở dữ liệu.
- OVERWRITE (GHI ĐÈ): Ghi đè lên bất kỳ dòng cơ sở dữ liệu hiện tại nào có cùng mã định danh trong cơ sở dữ liệu.
- EXCEPTION (NẠN NÀY): Ném ra một ngoại lệ nếu có dòng cơ sở dữ liệu hiện tại với cùng mã định danh trong cơ sở dữ liệu đích.
- LATEST_VERSION (PHIÊN BẢN MỚI NHẤT): Ghi đè lên dòng trong cơ sở dữ liệu nếu phiên bản của nó cũ hơn phiên bản của đối
tượng thực thể đã cho, hoặc bỏ qua đối tượng nếu ngược lại. Yêu cầu sử dụng kiểm soát xung đột đối tượng với phiên bản (xem phần 11.2.2).

Bạn có thể cần thực hiện sao chép khi bạn cân nhắc dữ liệu được nhập vào các cơ sở dữ liệu khác nhau. Một ví dụ điển hình
là khi bạn nâng cấp sản phẩm: nếu phiên bản mới của ứng dụng của bạn yêu cầu một cơ sở dữ liệu (schema) mới, bạn có thể
muốn di chuyển và sao chép dữ liệu hiện có một lần.

Persistence context thực hiện nhiều công việc cho bạn: kiểm tra tự động việc thay đổi dữ liệu, đảm bảo phạm vi của
danh tính đối tượng, và nhiều chức năng khác. Quan trọng cũng là bạn biết một số chi tiết về quản lý của nó và đôi khi
bạn có thể ảnh hưởng vào những gì diễn ra sau cánh cửa sau cùng.

[10.2.8] Bộ nhớ đệm trong the persistence context

Persistence context là một bộ nhớ cache chứa các instance persistent (persistent instances). Mỗi đối tượng thực thể ở 
trạng thái persistent được kết nối với persistence context.

Nhiều người dùng Hibernate thường bỏ qua sự thật đơn giản này và gặp phải lỗi OutOfMemoryException (hết bộ nhớ).
Thường xảy ra khi bạn nạp hàng ngàn đối tượng thực thể trong một đơn vị công việc nhưng không có ý định thay đổi chúng.
Tuy nhiên, Hibernate vẫn phải tạo ra một bản chụp (snapshot) của mỗi đối tượng trong bộ nhớ cache của persistence context,
điều này có thể dẫn đến việc tiêu tốn toàn bộ bộ nhớ. (Rõ ràng, bạn nên thực hiện một hoạt động dữ liệu hàng loạt
nếu bạn thay đổi hàng ngàn hàng dữ liệu - chúng ta sẽ quay lại loại đơn vị công việc này trong phần 20.1.)

Bộ nhớ cache của persistence context không bao giờ tự động thu nhỏ. Hãy duy trì kích thước của persistence context của bạn
sao cho tối thiểu cần thiết. Thường xuyên, nhiều instance persistent trong ngữ cảnh của bạn có mặt là do sự cố - ví dụ,
vì bạn chỉ cần một vài mục nhưng lại truy vấn nhiều. Các biểu đồ cực lớn có thể ảnh hưởng nghiêm trọng đến hiệu suất và
đòi hỏi bộ nhớ đáng kể cho các bản chụp trạng thái. Hãy kiểm tra xem các truy vấn của bạn chỉ trả về dữ liệu bạn cần
và xem xét cách kiểm soát hành vi lưu trữ cache của Hibernate theo cách sau đây.

Bạn có thể gọi EntityManager#detach(i) để thủ công loại bỏ một đối tượng thực thể persistent khỏi persistence context.
Bạn có thể gọi EntityManager#clear() để tách toàn bộ các đối tượng thực thể persistent, để lại bạn với một persistence context
trống rỗng.

API phiên bản gốc (native Session) còn có một số thao tác bổ sung bạn có thể thấy hữu ích. Bạn có thể đặt toàn bộ
persistence context vào chế độ chỉ đọc. Điều này vô hiệu hóa việc tạo bản chụp trạng thái và kiểm tra thay đổi, và
Hibernate sẽ không ghi lại các thay đổi vào cơ sở dữ liệu.

PATH: /examples/src/test/java/org/jpwh/test/fetching/ReadOnly.java

em.unwrap(Session.class).setDefaultReadOnly(true);
Item item = em.find(Item.class, ITEM_ID);
item.setName("New Name");
em.flush();     <-- No UPDATE

Bạn có thể tắt chức năng kiểm tra thay đổi (dirty checking) cho một instance của đối tượng duy nhất.
PATH: /examples/src/test/java/org/jpwh/test/fetching/ReadOnly.java
Item item = em.find(Item.class, ITEM_ID);
em.unwrap(Session.class).setReadOnly(item, true);
item.setName("New Name");
em.flush();         <-- No UPDATE

Một truy vấn sử dụng giao diện org.hibernate.Query có thể trả về kết quả chỉ đọc (read-only),
mà Hibernate không kiểm tra sự thay đổi:

PATH: /examples/src/test/java/org/jpwh/test/fetching/ReadOnly.java
org.hibernate.Query query = em.unwrap(Session.class)
                            .createQuery("select i from Item i");
query.setReadOnly(true).list();
List<Item> result = query.list();
for (Item item : result)
     item.setName("New Name");
em.flush();         <-- No UPDATE

Nhờ vào các gợi ý truy vấn (query hints), bạn cũng có thể tắt chức năng kiểm tra thay đổi (dirty checking) cho các instance
được lấy bằng cách sử dụng giao diện tiêu chuẩn JPA javax.persistence.Query:

Query query = em.createQuery(queryString).setHint(QueryHints.READ_ONLY, true);

Hãy cẩn thận khi làm việc với các instance của đối tượng chỉ đọc (read-only): bạn vẫn có thể xóa chúng và các sự 
thay đổi đối với các collection có thể phức tạp! Hướng dẫn của Hibernate có một danh sách dài các trường hợp đặc biệt 
bạn cần đọc nếu bạn sử dụng các thiết lập này với các collection đã được ánh xạ. Bạn sẽ thấy thêm ví dụ truy vấn trong chương 14.

Cho đến nay, việc xả (flushing) và đồng bộ hóa của persistence context đã xảy ra tự động khi giao dịch được commit.
Trong một số trường hợp, bạn cần kiểm soát nhiều hơn về quá trình đồng bộ hóa.


[10.2.9] Flushing the persistence context

Mặc định, Hibernate xả (flush) persistence context của một EntityManager và đồng bộ hóa các thay đổi với cơ sở dữ liệu mỗi 
khi giao dịch liên quan (joined transaction) được commit. Tất cả các ví dụ mã trước đó, trừ một số trong phần cuối cùng, 
đã sử dụng chiến lược đó. JPA cho phép các cài đặt thực hiện đồng bộ hóa persistence context vào thời điểm khác, nếu họ muốn.

Hibernate, là một cài đặt JPA, thực hiện đồng bộ hóa vào các thời điểm sau đây:
- Khi một giao dịch hệ thống JTA liên quan được commit.
- Trước khi một truy vấn được thực hiện - chúng ta không đề cập đến việc tìm kiếm bằng cách sử dụng `find()`, mà là một 
truy vấn với `javax.persistence.Query` hoặc API tương tự của Hibernate.
- Khi ứng dụng gọi phương thức `flush()` một cách tường minh.

Bạn có thể kiểm soát hành vi này bằng cách sử dụng cài đặt FlushModeType của một EntityManager.

PATH: /examples/src/test/java/org/jpwh/test/simple/SimpleTransitions.java

tx.begin();
EntityManager em = JPA.createEntityManager();
Item item = em.find(Item.class, ITEM_ID);       <-- [1] Loads Item instance
item.setName("New Name");                       <-- [2] Changes instance name
em.setFlushMode(FlushModeType.COMMIT);          <-- Disables flushing before queries
assertEquals(
    em.createQuery("select i.name from Item i where i.id = :id")        <-- [3] Gets instance name
    .setParameter("id", ITEM_ID).getSingleResult(),
    "Original Name"
);
tx.commit();        <-- Flush!
em.close();

Ở đây, bạn load một thực thể Item [1] và thay đổi tên của nó thành [2]. Sau đó, bạn truy vấn cơ sở
dữ liệu để lấy tên của thực thể đó [3]. Thông thường, Hibernate nhận ra rằng dữ liệu đã thay đổi 
trong bộ nhớ và đồng bộ hóa các thay đổi này với cơ sở dữ liệu trước khi thực hiện truy vấn. 
Đây là hành vi của FlushModeType.AUTO, mặc định nếu bạn tham gia EntityManager với một giao dịch. 
Với FlushModeType.COMMIT, bạn đang tắt việc flush trước khi thực hiện truy vấn, vì vậy bạn có thể 
thấy dữ liệu trả về từ truy vấn khác với dữ liệu bạn có trong bộ nhớ. Đồng bộ hóa chỉ xảy ra khi 
giao dịch được commit.

Bạn có thể bất kỳ lúc nào, trong khi một giao dịch đang được thực hiện, buộc kiểm tra sự thay đổi 
(dirty checking) và đồng bộ hóa với cơ sở dữ liệu bằng cách gọi phương thức EntityManager#flush().

Điều này kết thúc cuộc trò chuyện của chúng tôi về các trạng thái thực thể transient, persistent, 
và removed, cũng như việc sử dụng cơ bản của API EntityManager. Việc nắm vững các chuyển đổi trạng thái 
này và phương thức API là quan trọng; mọi ứng dụng JPA đều được xây dựng dựa trên các hoạt động này. 
Tiếp theo, chúng ta sẽ xem xét trạng thái thực thể detached. Chúng tôi đã đề cập đến một số vấn 
đề khi các thực thể không còn liên quan đến một persistence context nữa, như việc tắt lazy initialization.
Hãy khám phá trạng thái detached thông qua một số ví dụ, để bạn biết điều gì xảy ra khi làm việc với dữ liệu
ngoài persistence context.

