In this chapter
 The lifecycle and states of objects
 Working with the Java Persistence API
 Working with detached state

Bây giờ bạn đã hiểu cách Hibernate và ORM giải quyết các khía cạnh tĩnh của sự không phù hợp giữa đối tượng và cơ sở dữ liệu. 
Dựa trên kiến thức bạn đã biết, bạn có thể tạo một ánh xạ giữa các lớp Java và một cấu trúc SQL, giải quyết vấn đề không phù hợp 
về cấu trúc.

Để nhắc nhở về các vấn đề bạn đang giải quyết, hãy xem phần 1.2.
Một giải pháp ứng dụng hiệu quả đòi hỏi điều gì đó hơn: bạn phải nghiên cứu các chiến lược quản lý dữ liệu thời gian chạy. 
Các chiến lược này rất quan trọng đối với hiệu suất và hành vi chính xác của ứng dụng của bạn.
Trong chương này, chúng tôi thảo luận về vòng đời của các entity instance - cách một instance trở nên persistent
và cách nó ngừng được xem xét là persistent - và các cuộc gọi phương thức và các hoạt động quản lý gây ra các chuyển đổi này.

EntityManager trong JPA là giao diện chính của bạn để truy cập dữ liệu.
Trước khi chúng ta xem xét API, hãy bắt đầu với các entity instance, vòng đời của chúng và các sự kiện gây ra sự thay đổi trạng thái.
Mặc dù một số tài liệu có thể hơi hình thức, nhưng việc hiểu rõ vòng đời persistence là điều quan trọng.


Các tính năng mới quan trọng trong JPA 2 bao gồm:

1. Bạn có thể lấy được một biến thể cụ thể của persistence manager API dựa trên nhà cung cấp bằng cách sử dụng 
EntityManager#unwrap(), ví dụ như API org.hibernate.Session. Sử dụng EntityManagerFactory#unwrap() 
để lấy org.hibernate.SessionFactory.

2. Phương thức mới detach() cung cấp quản lý (tinh vi-fine-grained) của ngữ cảnh persistence, loại bỏ các thể hiện
thực thể riêng lẻ.

3. Từ một EntityManager hiện tại, bạn có thể lấy được EntityManagerFactory đã được sử dụng để tạo ngữ cảnh persistence
bằng cách sử dụng getEntityManagerFactory().

4. Các phương thức trợ giúp tĩnh mới của Persistence(Unit)Util xác định xem một thể hiện thực thể (hoặc một trong các
thuộc tính của nó) đã được tải đầy đủ hay là một tham chiếu chưa được khởi tạo (proxy Hibernate hoặc bao gói tập hợp chưa tải.)