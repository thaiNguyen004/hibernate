Envers là một dự án trong bộ công cụ Hibernate, được dành riêng cho việc ghi nhật ký kiểm toán và duy trì nhiều version 
dữ liệu trong cơ sở dữ liệu. Điều này tương tự như các hệ thống quản lý version mà bạn có thể đã quen thuộc, 
như Subversion và Git.

Khi bật Envers, một bản sao của dữ liệu của bạn được tự động lưu trữ trong các bảng cơ sở dữ liệu riêng biệt khi bạn thêm, 
sửa đổi hoặc xóa dữ liệu trong các bảng chính của ứng dụng. Envers sử dụng bên trong giao diện sự kiện Hibernate mà bạn đã 
thấy trong phần trước. Envers lắng nghe các sự kiện của Hibernate, và khi Hibernate lưu trữ thay đổi vào cơ sở dữ liệu, 
Envers tạo một bản sao của dữ liệu và ghi lại một version trong các bảng của riêng nó.

Envers nhóm tất cả các sửa đổi dữ liệu trong một unit of work, tức là trong một giao dịch, với một số version. 
Bạn có thể viết truy vấn sử dụng API của Envers để truy xuất dữ liệu lịch sử dựa trên số version hoặc thời điểm ghi chú:
ví dụ, "tìm tất cả các thực thể Item như chúng đã tồn tại vào thứ Sáu tuần trước."
Trước tiên, bạn phải bật Envers trong ứng dụng của bạn.

13.3.1 Enabling audit logging
Envers có sẵn mà không cần cấu hình thêm khi bạn đặt tệp JAR của nó vào đường dẫn lớp của bạn (hoặc, như đã thể hiện trong
mã ví dụ của cuốn sách này, bao gồm nó như một phụ thuộc Maven). Bạn có thể bật việc ghi nhật ký kiểm toán một cách tùy chọn
cho một lớp thực thể bằng cách sử dụng chú thích @org.hibernate.envers.Audited.

Listing 13.4 Enabling audit logging for the Item entity
PATH: /model/src/main/java/org/jpwh/model/filtering/envers/Item.java

@Entity
@org.hibernate.envers.Audited
public class Item {

    @NotNull
    protected String name;

    @OneToMany(mappedBy = "item")
    @org.hibernate.envers.NotAudited
    protected Set<Bid> bids = new HashSet<Bid>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SELLER_ID", nullable = false)
    protected User seller;
    // ...
}

Bạn đã bật việc ghi nhật ký kiểm toán cho các thực thể Item và tất cả các thuộc tính của thực thể. Để tắt việc ghi nhật ký
kiểm toán cho một thuộc tính cụ thể, hãy chú thích nó bằng @NotAudited. Trong trường hợp này, Envers sẽ bỏ qua thuộc
tính bids nhưng ghi nhật ký kiểm toán cho thuộc tính seller. Bạn cũng phải bật tính năng kiểm toán bằng cách sử dụng
@Audited trên lớp User.

Bây giờ Hibernate sẽ tạo ra (hoặc mong đợi) các bảng cơ sở dữ liệu bổ sung để lưu trữ dữ liệu lịch sử cho mỗi Item và User.
Hình 13.1 hiển thị cấu trúc của các bảng này.

Các bảng ITEM_AUD và USERS_AUD là nơi lưu trữ lịch sử sửa đổi của các thực thể Item và User. Khi bạn sửa đổi dữ liệu và 
xác nhận một giao dịch, Hibernate sẽ chèn một revision number mới với một timestamp vào bảng REVINFO.
Sau đó, đối với mỗi thực thể đã được sửa đổi và được kiểm toán trong tập hợp thay đổi, một bản sao của dữ liệu của nó được
lưu trữ trong các bảng kiểm toán. Khóa ngoại trên cột số revision number liên kết các tập hợp thay đổi lại với nhau.
Cột REVTYPE chứa loại thay đổi: liệu thực thể đã được chèn, cập nhật hay xóa trong giao dịch. Envers không bao giờ tự động
xóa bất kỳ thông tin version nào hoặc dữ liệu lịch sử; ngay cả sau khi bạn gọi remove() cho một thực thể Item, bạn vẫn
còn các version trước đó được lưu trữ trong ITEM_AUD.

Hãy chạy qua một số giao dịch để xem cách nó hoạt động.


13.3.2 Creating an audit trail

Trong các ví dụ mã sau đây, bạn thấy một số giao dịch liên quan đến một thực thể Item và seller của nó, một User.
Bạn tạo và lưu trữ một Item và một User, sau đó sửa đổi cả hai, và cuối cùng xóa Item.

Bạn nên đã quen thuộc với mã này. Envers tự động tạo một đường dẫn kiểm toán khi bạn làm việc với EntityManager:

PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

tx.begin();
EntityManager em = JPA.createEntityManager();

User user = new User("johndoe");
em.persist(user);

Item item = new Item("Foo", user);
em.persist(item);

tx.commit();
em.close();

PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

tx.begin();
EntityManager em = JPA.createEntityManager();

Item item = em.find(Item.class, ITEM_ID);
item.setName("Bar");
item.getSeller().setUsername("doejohn");

tx.commit();
em.close();

PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

tx.begin();
EntityManager em = JPA.createEntityManager();

Item item = em.find(Item.class, ITEM_ID);
em.remove(item);

tx.commit();
em.close();

Envers tự động viết lịch sử kiểm toán cho chuỗi giao dịch này bằng cách ghi ba tập hợp thay đổi.
Để truy cập dữ liệu lịch sử này, trước hết bạn phải có được number of the revision, đại diện cho tập hợp thay đổi
mà bạn muốn truy cập.


13.3.3 Finding revisions

Với API AuditReader của Envers, bạn có thể tìm số reversions của mỗi tập hợp thay đổi:

Listing 13.5 Obtaining the revision numbers of change sets
PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

AuditReader auditReader = AuditReaderFactory.get(em);       [1] AuditReader API

Number revisionCreate =                                     [2] Gets revision number
         auditReader.getRevisionNumberForDate(TIMESTAMP_CREATE);

Number revisionUpdate =
         auditReader.getRevisionNumberForDate(TIMESTAMP_UPDATE);

Number revisionDelete =
         auditReader.getRevisionNumberForDate(TIMESTAMP_DELETE);

List<Number> itemRevisions = auditReader.getRevisions(Item.class, ITEM_ID); [3] Finds change sets
assertEquals(itemRevisions.size(), 3);

for (Number itemRevision : itemRevisions) {
    Date itemRevisionTimestamp = auditReader.getRevisionDate(itemRevision); [4] Gets timestamp
    // ...
}
List<Number> userRevisions = auditReader.getRevisions(User.class, USER_ID); [5] Counts revisions
assertEquals(userRevisions.size(), 2);

1. API chính của Envers là AuditReader. Nó có thể được truy cập thông qua một EntityManager.

2. Với một timestamp cho trước, bạn có thể tìm reversion number của một tập hợp thay đổi đã được thực hiện trước
hoặc vào thời điểm đó.

3. Nếu bạn không có một timestamp cụ thể, bạn có thể lấy tất cả reversion number trong đó một thực thể đã tham gia.
Thao tác này tìm tất cả các tập hợp thay đổi mà thực thể Item đã được tạo, sửa đổi hoặc xóa. Trong ví dụ của chúng ta,
chúng ta đã tạo, sửa đổi và sau đó xóa Item. Do đó, chúng ta có ba revisions.

4. Nếu bạn có reversion number, bạn có thể lấy được timestamp khi Envers ghi nhật ký tập hợp thay đổi đó.

5. Chúng ta đã tạo và sửa đổi User, vì vậy có hai revisions.

Trong Listing 13.5, chúng ta giả định rằng bạn đã biết (gần đúng) timestamp cho một giao dịch hoặc bạn có giá trị định danh
của một thực thể để có thể lấy các reversions của nó. Nếu bạn không có cả hai, bạn có thể muốn khám phá nhật ký kiểm toán
bằng các truy vấn. Điều này cũng hữu ích nếu bạn cần hiển thị danh sách tất cả các tập hợp thay đổi trong giao diện người dùng
của ứng dụng của bạn.

Đoạn mã sau đây khám phá tất cả các reversions của lớp thực thể Item và tải mỗi reversions của Item cùng với thông tin
lịch sử kiểm toán cho tập hợp thay đổi đó:

PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

AuditQuery query = auditReader.createQuery()            [1] Truy vấn để có được chi tiết audit
         .forRevisionsOfEntity(Item.class, false, false);

List<Object[]> result = query.getResultList();          [2] Lấy audit detail
for (Object[] tuple : result) {

    Item item = (Item) tuple[0];            [3] Gets revision detail
    DefaultRevisionEntity revision = (DefaultRevisionEntity)tuple[1];
    RevisionType revisionType = (RevisionType)tuple[2];

    if (revision.getId() == 1) {
        assertEquals(revisionType, RevisionType.ADD);
        assertEquals(item.getName(), "Foo");
    } else if (revision.getId() == 2) {
        assertEquals(revisionType, RevisionType.MOD);
        assertEquals(item.getName(), "Bar");
    } else if (revision.getId() == 3) {
        assertEquals(revisionType, RevisionType.DEL);
        assertNull(item);
    }

}

1. Nếu bạn không biết timestamp sửa đổi hoặc revision number, bạn có thể viết một truy vấn bằng cách sử dụng `forRevisionsOfEntity()`
để lấy tất cả các (chi tiết của lịch sử kiểm toán-audit trail detail) của một thực thể cụ thể.

2. Truy vấn này trả về chi tiết của audit trail dưới dạng một List các Object[].

3. Mỗi bộ kết quả chứa entity instance cho một revision riêng biệt, revision detail (bao gồm revision number và timestamp),
cũng như revision type.

4. Revision type chỉ ra tại sao Envers đã tạo ra phiên bản đó, bởi vì thực thể đã được insert, update hoặc delete trong
cơ sở dữ liệu.
Revision number của các phiên bản tăng dần; một revision number cao hơn luôn là phiên bản gần đây hơn của một thực thể.
Bây giờ bạn đã có revision number cho ba tập hợp thay đổi trong lịch sử kiểm toán, cho phép bạn truy cập vào dữ liệu lịch sử.


13.3.4 Accessing historical data

Với một revision number, bạn có thể truy cập các phiên bản khác nhau của Item và người bán của nó.

Listing 13.6 Loading historical versions of entity instances
PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

Item item = auditReader.find(Item.class, ITEM_ID, revisionCreate);      [1] Return audited instance
assertEquals(item.getName(), "Foo");
assertEquals(item.getSeller().getUsername(), "johndoe");

Item modifiedItem = auditReader.find(Item.class, ITEM_ID, revisionUpdate);      [2] Loads updated Item
assertEquals(modifiedItem.getName(), "Bar");
assertEquals(modifiedItem.getSeller().getUsername(), "doejohn");

Item deletedItem = auditReader.find(Item.class, ITEM_ID, revisionDelete);       [3] Handles deleted Item
assertNull(deletedItem);

User user = auditReader.find(User.class, USER_ID, revisionDelete);      [4] Rerturns closest revision
assertEquals(user.getUsername(), "doejohn");


1. Phương thức find() trả về audited entity instance dựa trên revision. Thao tác này tải Item như nó đã tồn tại sau
khi được tạo.

2. Thao tác này tải Item sau khi nó đã được cập nhật. Lưu ý cách seller đã được sửa đổi trong tập hợp thay đổi này
và cũng được truy xuất tự động.

3. Trong phiên bản này, Item đã bị xóa, vì vậy phương thức find() trả về giá trị null.

4. Trong ví dụ này, không có sự thay đổi nào cho User trong phiên bản này, vì vậy Envers trả về phiên bản lịch sử gần nhất của nó.

Phương thức find() của AuditReader trả về duy nhất một thực thể, tương tự như EntityManager#find(). Tuy nhiên, các thực thể
trả về không ở trạng thái persistent: ngữ cảnh lưu trữ không quản lý chúng. Nếu bạn sửa đổi một phiên bản cũ của Item,
Hibernate sẽ không cập nhật cơ sở dữ liệu. Hãy xem xét các thực thể được trả về bởi API AuditReader là detached hoặc chỉ đọc.

AuditReader cũng có một API cho việc thực hiện các truy vấn tùy ý, tương tự như API Criteria gốc của Hibernate (xem mục 16.3).

Listing 13.7 Querying historical entity instances
PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

AuditQuery query = auditReader.createQuery()        [1] Returns Items from particular revision
         .forEntitiesAtRevision(Item.class, revisionUpdate);

query.add(
    AuditEntity.property("name").like("Ba", MatchMode.START)    [2] Adds restriction
);

query.add(
    AuditEntity.relatedId("seller").eq(USER_ID)         [3] Adds restriction
);
query.addOrder(
    AuditEntity.property("name").desc()         [3] Orders result
);
query.setFirstResult(0);
query.setMaxResults(10);
assertEquals(query.getResultList().size(), 1);
Item result = (Item)query.getResultList().get(0);
assertEquals(result.getSeller().getUsername(), "doejohn");


1. Truy vấn này trả về các thực thể Item giới hạn trong một revision và tập hợp thay đổi cụ thể.

2. Bạn có thể thêm các ràng buộc bổ sung cho truy vấn; ở đây, Item#name phải bắt đầu bằng "Ba".

3. Ràng buộc có thể bao gồm các mối quan hệ thực thể: ví dụ, bạn đang tìm phiên bản của một Item được
bán bởi một User cụ thể.

4. Bạn có thể sắp xếp kết quả truy vấn.

5. Bạn có thể chia trang qua kết quả lớn.


Envers hỗ trợ dự án (projection). Truy vấn sau đây chỉ lấy thuộc tính Item#name của một phiên bản cụ thể:

PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

AuditQuery query = auditReader.createQuery()
    .forEntitiesAtRevision(Item.class, revisionUpdate);
query.addProjection(
    AuditEntity.property("name")
);
assertEquals(query.getResultList().size(), 1);
String result = (String)query.getSingleResult();
assertEquals(result, "Bar");

Cuối cùng, bạn có thể muốn roll back một thực thể về một phiên bản cũ hơn. Điều này có thể được thực hiện thông qua
thao tác Session#replicate() và ghi đè lên một hàng đã tồn tại. Ví dụ sau đây tải thực thể User từ tập hợp thay đổi
đầu tiên và sau đó ghi đè lên thực thể User hiện tại trong cơ sở dữ liệu bằng phiên bản cũ hơn:

PATH: /examples/src/test/java/org/jpwh/test/filtering/Envers.java

User user = auditReader.find(User.class, USER_ID, revisionCreate);
em.unwrap(Session.class)
    .replicate(user, ReplicationMode.OVERWRITE);
em.flush();
em.clear();
user = em.find(User.class, USER_ID);
assertEquals(user.getUsername(), "johndoe");

Envers cũng sẽ theo dõi thay đổi này như một cập nhật trong lịch sử kiểm toán; đó chỉ là một phiên bản mới khác của thực thể User.

Temporal data là một chủ đề phức tạp, và chúng tôi khuyến khích bạn đọc tài liệu tham khảo về Envers để biết thêm thông tin.
Thêm thông tin vào lịch sử kiểm toán, chẳng hạn như người dùng thực hiện thay đổi, không phức tạp. Tài liệu cũng hiển thị
cách bạn có thể cấu hình các chiến lược theo dõi khác nhau và tùy chỉnh lược đồ cơ sở dữ liệu được sử dụng bởi Envers.

Tiếp theo, hãy tưởng tượng rằng bạn không muốn xem tất cả dữ liệu trong cơ sở dữ liệu của bạn. Ví dụ, người dùng ứng dụng
đang đăng nhập hiện tại có thể không có quyền xem tất cả điều này. Thông thường, bạn sẽ thêm một điều kiện vào các truy vấn
của mình và hạn chế kết quả theo cách động. Điều này trở nên khó khăn nếu bạn phải xử lý một vấn đề như bảo mật, vì bạn
sẽ phải tùy chỉnh hầu hết các truy vấn trong ứng dụng của mình.

Bạn có thể tập trung và cách ly những ràng buộc này với các bộ lọc dữ liệu động của Hibernate. (Dynamic data filters)






