Subselects là một tính năng quan trọng và mạnh mẽ của SQL. Một subselect là một truy vấn SELECT được
nhúng trong một truy vấn khác, thường nằm trong các mệnh đề SELECT, FROM hoặc WHERE.

JPA hỗ trợ các subselect trong mệnh đề WHERE. Các subselect trong mệnh đề FROM không được hỗ trợ vì ngôn ngữ
truy vấn không có sự đóng dấu chuyển tiếp. Kết quả của một truy vấn có thể không thể sử dụng cho việc lựa chọn tiếp
theo trong mệnh đề FROM. Ngôn ngữ truy vấn cũng không hỗ trợ subselect trong mệnh đề SELECT, nhưng bạn có thể ánh xạ
subselect thành các thuộc tính tạo ra bằng @org.hibernate.annotations.Formula, như được thể hiện trong phần 5.1.3.

Truy vấn con có thể được correlated (liên quan) hoặc uncorrelated (không liên quan) với phần còn lại của truy vấn.


15.5.1 Correlated and uncorrelated nesting - Lồng ghép tương quan và không tương quan

Kết quả của một subselect có thể chứa hoặc một dòng hoặc nhiều dòng. Thông thường, các subselect trả về một dòng duy nhất
thực hiện việc tổng hợp (aggregation). Truy vấn con sau đây trả về tổng số món hàng được bán bởi một người dùng;
truy vấn bên ngoài trả về tất cả người dùng đã bán hơn một món hàng:

select u from User u
where (
    select count(i) from Item i where i.seller = u
) > 1
-----------------------------------------------------
Root<User> u = criteria.from(User.class);
Subquery<Long> sq = criteria.subquery(Long.class);
Root<Item> i = sq.from(Item.class);
sq.select(cb.count(i))
    .where(cb.equal(i.get("seller"), u)
);
criteria.select(u);
criteria.where(cb.greaterThan(sq, 1L));

Trong truy vấn bên trong là một subselect có sự liên quan (correlated subquery) - nó tham chiếu đến một bí danh (alias) (u)
từ truy vấn bên ngoài.

Truy vấn tiếp theo chứa một subselect không liên quan (uncorrelated subquery):

select b from Bid b
    where b.amount + 1 >= (
        select max(b2.amount) from Bid b2
    )
---------------------------------------------------
Root<Bid> b = criteria.from(Bid.class);
Subquery<BigDecimal> sq = criteria.subquery(BigDecimal.class);
Root<Bid> b2 = sq.from(Bid.class);
sq.select(cb.max(b2.<BigDecimal>get("amount")));
    criteria.select(b);
    criteria.where(
        cb.greaterThanOrEqualTo(
            cb.sum(b.<BigDecimal>get("amount"), new BigDecimal(1)),
            sq
    )
);

Trong ví dụ này, subselect trả về số tiền đặt cược tối đa trong toàn bộ hệ thống; truy vấn bên ngoài trả về tất cả bid
mà số tiền đặt cược nằm trong một đơn vị tiền tệ (đô la Mỹ, Euro, v.v.) so với số tiền đó. Lưu ý rằng trong cả hai trường hợp,
dấu ngoặc đơn bao quanh subselect trong JPQL. Điều này luôn là bắt buộc.

Truy vấn con không liên quan (uncorrelated subqueries) là vô hại và không có lý do gì để không sử dụng chúng khi tiện lợi.
Bạn luôn có thể viết lại chúng thành hai truy vấn, vì chúng không tham chiếu đến nhau. Bạn nên suy nghĩ cẩn thận hơn về
tác động về hiệu suất của subselect liên quan (correlated subqueries). Trên một cơ sở dữ liệu đã phát triển, chi phí hiệu suất
của một subselect liên quan đơn giản tương tự với chi phí của một kết nối (join). Tuy nhiên, không nhất thiết phải viết lại một
subselect liên quan bằng cách sử dụng nhiều truy vấn riêng lẻ.

Nếu một subselect trả về nhiều dòng, bạn kết hợp nó với việc xác định số lượng (quantification).


15.5.2 Quantification
Các hệ thống xác định các chỉ số sau:
- ALL: Biểu thức trả về giá trị true nếu so sánh là đúng đối với tất cả các giá trị trong kết quả của subselect.
Nó trả về giá trị false nếu một giá trị duy nhất trong kết quả của subselect không đáp ứng kiểm tra so sánh.
- ANY: Biểu thức trả về giá trị true nếu so sánh là đúng đối với một hoặc nhiều giá trị trong kết quả của subselect.
Nếu kết quả của subselect trống hoặc không có giá trị nào thỏa mãn kiểm tra so sánh, nó trả về giá trị false.
Từ khóa SOME là một từ đồng nghĩa với ANY.
- EXISTS: Trả về giá trị true nếu kết quả của subselect bao gồm một hoặc nhiều giá trị.

Ví dụ, truy vấn sau đây trả về các items mà tất cả bids đều ít hơn hoặc bằng 10:

select i from Item i
    where 10 >= all (
        select b.amount from i.bids b
    )
----------------------------------------------------
Root<Item> i = criteria.from(Item.class);
Subquery<BigDecimal> sq = criteria.subquery(BigDecimal.class);
Root<Bid> b = sq.from(Bid.class);
sq.select(b.<BigDecimal>get("amount"));
sq.where(cb.equal(b.get("item"), i));
criteria.select(i);
criteria.where(
    cb.greaterThanOrEqualTo(
        cb.literal(new BigDecimal(10)),
        cb.all(sq)
    )
);

Truy vấn sau đây trả về items có một bid chính xác là 101:

select i from Item i
    where 101.00 = any (
        select b.amount from i.bids b
    )
-----------------------------------------------------
Root<Item> i = criteria.from(Item.class);
Subquery<BigDecimal> sq = criteria.subquery(BigDecimal.class);
Root<Bid> b = sq.from(Bid.class);
sq.select(b.<BigDecimal>get("amount"));
sq.where(cb.equal(b.get("item"), i));
criteria.select(i);
criteria.where(
    cb.equal(
        cb.literal(new BigDecimal("101.00")),
        cb.any(sq)
    )
);

Để truy xuất tất cả items có bids, bạn kiểm tra kết quả của subselect với EXISTS:

select i from Item i
    where exists (
        select b from Bid b where b.item = i
    )
-----------------------------------------
Root<Item> i = criteria.from(Item.class);
Subquery<Bid> sq = criteria.subquery(Bid.class);
Root<Bid> b = sq.from(Bid.class);
sq.select(b).where(cb.equal(b.get("item"), i));
criteria.select(i);
criteria.where(cb.exists(sq));

Truy vấn này quan trọng hơn nó có vẻ. Bạn có thể tìm tất cả items có bids bằng truy vấn sau:
`select i from Item i where i.bids is not empty`. Tuy nhiên, điều này đòi hỏi một bộ sưu tập one-to-many được ánh xạ
trong món hàng (Item#bids). Nếu bạn tuân theo các khuyến nghị của chúng tôi, có khả năng bạn chỉ có phía "kia" được ánh xạ:
mối quan hệ many-to-one Bid#item. Bằng cách sử dụng exists() và một truy vấn con, bạn có thể có được kết quả tương tự.

Truy vấn con là một kỹ thuật nâng cao; bạn nên đặt câu hỏi về việc sử dụng thường xuyên của truy vấn con, vì truy vấn
với truy vấn con thường có thể được viết lại chỉ bằng cách sử dụng kết nối (join) và tổng hợp. Nhưng chúng rất mạnh mẽ
và hữu ích từ thời gian này.

