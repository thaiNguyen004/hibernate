Đầu tiên, khi chúng tôi nói về `selection`, chúng tôi không đề cập đến mệnh đề SELECT của một truy vấn.
Chúng tôi cũng không nói về câu lệnh SELECT cụ thể. Chúng tôi đang đề cập đến việc chọn một relation variable -
hoặc, trong thuật ngữ SQL, mệnh đề FROM. Nó xác định nơi dữ liệu cho truy vấn của bạn nên đến từ:
nói một cách đơn giản, bạn "select" các bảng nào cho một truy vấn. Hoặc trong JPQL, bạn có thể sử dụng các lớp
thay vì tên bảng.

`from Item`
Truy vấn sau đây (chỉ là mệnh đề FROM) trả về tất cả các thể hiện của thực thể Item. Hibernate tạo ra câu lệnh SQL sau đây:
select i.ID, i.NAME, ... from ITEM i

Truy vấn criteria tương đương có thể được xây dựng bằng phương thức from(), truyền vào tên thực thể:
CriteriaQuery criteria = cb.createQuery(Item.class);
criteria.from(Item.class);

[Hibernate Feature]
Hibernate hiểu các truy vấn chỉ với mệnh đề FROM hoặc mệnh đề criteria. Rất tiếc, các truy vấn JPQL và criteria mà
chúng tôi vừa thể hiện không di động; chúng không tuân thủ JPA. Quy định JPA yêu cầu rằng một truy vấn JPQL phải có
một mệnh đề SELECT và các truy vấn criteria di động phải gọi phương thức select().

Điều này yêu cầu việc gán bí danh và gốc truy vấn, đây là chủ đề tiếp theo của chúng tôi.

15.1.1 Assigning aliases-bí danh and query roots

Thêm một mệnh đề SELECT vào một truy vấn JPQL đòi hỏi bạn phải gán một bí danh cho lớp được truy vấn trong mệnh đề FROM,
để bạn có thể tham chiếu nó trong các phần khác của truy vấn:

select i from Item as i

Truy vấn sau đây bây giờ tuân theo JPA. Từ khóa "as" luôn luôn là tùy chọn. Dưới đây là cách tương đương:

select i from Item i

Bạn gán bí danh "i" cho các thể hiện của lớp Item được truy vấn. Hãy nghĩ về nó giống như việc khai báo một biến tạm thời
trong mã Java sau đây:

for(Iterator i = result.iterator(); i.hasNext();) {
    Item item = (Item) i.next();
    // ...
}

Các bí danh trong các truy vấn không phân biệt chữ hoa, vì vậy "select iTm from Item itm" cũng hoạt động.
Tuy nhiên, chúng tôi ưa thích giữ các bí danh ngắn và đơn giản; chúng chỉ cần phải duy nhất trong một truy vấn
(hoặc truy vấn con).

Truy vấn criteria di động phải gọi phương thức select():
```

CriteriaQuery criteria = cb.createQuery();
Root<Item> i = criteria.from(Item.class);
criteria.select(i);
```

Chúng tôi sẽ bỏ qua dòng cb.createQuery() trong hầu hết các ví dụ criteria khác; nó luôn giống nhau. Khi bạn thấy một
biến criteria, nó được tạo ra bằng cách sử dụng CriteriaBuilder#createQuery().
Chương trước giải thích cách lấy một CriteriaBuilder.

Root của một truy vấn criteria luôn tham chiếu đến một thực thể. Sau này, chúng tôi sẽ cho bạn thấy các truy vấn với
nhiều root. Bạn có thể rút gọn truy vấn này bằng cách nhúng Root:

criteria.select(criteria.from(Item.class));

Hoặc bạn có thể tìm kiếm kiểu thực thể một cách động bằng cách sử dụng Metamodel API:

EntityType entityType = getEntityType(
    em.getMetamodel(), "Item"
);
criteria.select(criteria.from(entityType));

Phương thức getEntityType() là bổ sung tự thêm của chúng tôi: Nó duyệt qua Metamodel#getEntities(), tìm kiếm sự phù hợp
với tên thực thể đã cho. Thực thể Item không có các lớp con, vì vậy chúng ta hãy xem lựa chọn đa hình tiếp theo.


15.1.2 Polymorphic queries

JPQL, như một ngôn ngữ truy vấn hướng đối tượng, hỗ trợ các truy vấn đa hình - truy vấn cho các thể hiện của một lớp
và tất cả các thể hiện của các lớp con của nó. Hãy xem xét các truy vấn sau:

select bd from BillingDetails bd
---------------------------------------------------
criteria.select(criteria.from(BillingDetails.class));

Các truy vấn này trả về tất cả các thể hiện của loại BillingDetails, đây là một lớp trừu tượng. Trong trường hợp này,
mỗi thể hiện là của một lớp con của BillingDetails: CreditCard hoặc BankAccount. Nếu bạn chỉ muốn các thể hiện của
một lớp con cụ thể, bạn có thể sử dụng cú pháp sau:

select cc from CreditCard cc
---------------------------------------------------
criteria.select(criteria.from(CreditCard.class));

Lớp được đặt trong mệnh đề FROM thậm chí không cần phải là một mapped persistent class; bất kỳ lớp nào cũng được.
Truy vấn sau đây trả về tất cả persistent objects:

select o from java.lang.Object o

Chú ý rằng trong trường hợp này, truy vấn trả về tất cả các đối tượng trong Java,
không chỉ các đối tượng được ánh xạ vào cơ sở dữ liệu.

[Hibernate Feature]

Có, bạn có thể chọn tất cả các bảng trong cơ sở dữ liệu của mình bằng một truy vấn như vậy và trích xuất tất cả
dữ liệu vào bộ nhớ! Điều này cũng hoạt động cho các giao diện tùy ý, ví dụ, chọn tất cả các loại có khả năng serializable:

select s from java.io.Serializable s

Tin xấu là JPA không chuẩn hóa các truy vấn JPQL đa hình với các giao diện tùy ý. Chúng hoạt động trong Hibernate,
nhưng các ứng dụng có tính di động chỉ nên tham chiếu đến các lớp thực thể được ánh xạ trong mệnh đề FROM (như BillingDetails hoặc CreditCard).

Phương thức from() trong API truy vấn criteria chỉ chấp nhận các loại thực thể được ánh xạ.

Bạn có thể thực hiện các truy vấn không đa hình bằng cách giới hạn phạm vi các loại được chọn bằng hàm TYPE.
Nếu bạn chỉ muốn các thể hiện của một lớp con cụ thể, bạn có thể sử dụng:

select bd from BillingDetails bd where type(bd) = CreditCard
------------------------------------------------------------
Root<BillingDetails> bd = criteria.from(BillingDetails.class);
criteria.select(bd).where(
    cb.equal(bd.type(), CreditCard.class)
);

Nếu bạn cần tham số hóa một truy vấn như vậy, hãy thêm một mệnh đề IN và một tham số có tên:

select bd from BillingDetails bd where type(bd) in :types
--------------------------------------------------------------
Root<BillingDetails> bd = criteria.from(BillingDetails.class);
criteria.select(bd).where(
    bd.type().in(cb.parameter(List.class, "types"))
);

Bạn liên kết đối số với tham số bằng cách cung cấn một danh sách các loại mà bạn muốn khớp:

Query query = // ...
query.setParameter("types", Arrays.asList(CreditCard.class,
    BankAccount.class));

Nếu bạn muốn tất cả các thể hiện của một lớp con cụ thể ngoại trừ một lớp được chỉ định, hãy sử dụng cú pháp sau:

select bd from BillingDetails bd where not type(bd) = BankAccount
----------------------------------------------------------------
Root<BillingDetails> bd = criteria.from(BillingDetails.class);
criteria.select(bd).where(
    cb.not(cb.equal(bd.type(), BankAccount.class))
);

Đa hình áp dụng không chỉ đối với các lớp được đặt tên một cách rõ ràng mà còn đối với các quan hệ đa hình,
như bạn sẽ thấy sau trong chương này.

Bây giờ bạn đã hoàn thành bước đầu tiên của việc viết một truy vấn, đó là phần lựa chọn. Bạn đã chọn bảng mà bạn muốn
truy vấn dữ liệu. Tiếp theo, bạn có thể muốn giới hạn các hàng mà bạn muốn truy vấn bằng một ràng buộc.

