[Hibernate Feature]
Trong chương 7, bạn đã thấy những lý do mà bạn nên (hoặc chí ít là không nên) ánh xạ một collection trong mô hình Java của bạn. 
Lợi ích chính của việc ánh xạ một collection là việc truy cập dữ liệu dễ dàng hơn: bạn có thể gọi item.getImages() hoặc
item.getBids() để truy cập tất cả các image và bid liên quan đến một Item. Bạn không cần viết query JPQL hoặc criteria;
Hibernate sẽ thực thi truy vấn cho bạn khi bạn bắt đầu lặp qua các phần tử trong collection.

Vấn đề rõ ràng nhất với việc truy cập dữ liệu tự động này là rằng Hibernate luôn sẽ viết cùng một truy vấn, trích xuất tất
cả các image hoặc bid cho một Item. Bạn có thể tùy chỉnh thứ tự các phần tử trong collection, nhưng thậm chí cả điều đó
cũng là một ánh xạ tĩnh. Bạn sẽ làm gì để hiển thị hai danh sách bids cho một Item, theo thứ tự tăng dần và giảm dần theo
ngày tạo? Bạn có thể quay trở lại việc viết và thực thi truy vấn tùy chỉnh và không gọi item.getBids(); có thể thậm chí
không cần ánh xạ collection.

Thay vào đó, bạn có thể sử dụng một tính năng độc quyền của Hibernate, collection filters, giúp việc viết những truy vấn
này dễ dàng hơn, sử dụng collection đã ánh xạ. Hãy nói rằng bạn có một thể hiện Item persistent trong bộ nhớ, có lẽ đã được
nạp bằng EntityManager API. Bạn muốn liệt kê tất cả các bids được thực hiện cho mục Item này, nhưng bạn muốn hạn
chế kết quả thêm để chỉ hiển thị các bids được thực hiện bởi một User cụ thể. Bạn cũng muốn danh sách được sắp xếp theo
thứ tự giảm dần theo Bid#amount.

Path: /examples/src/test/java/org/jpwh/test/querying/advanced/
FilterCollections.java

Item item = em.find(Item.class, ITEM_ID);
User user = em.find(User.class, USER_ID);
org.hibernate.Query query = session.createFilter(
    item.getBids(),
    "where this.bidder = :bidder order by this.amount desc"
);
query.setParameter("bidder", user);
List<Bid> bids = query.list();

Phương thức session.createFilter() chấp nhận một collection persistent và một đoạn truy vấn JPQL. Đoạn truy vấn này
không yêu cầu một mệnh đề select hoặc from; ở đây nó chỉ chứa một (hạn chế-restriction) với mệnh đề where và mệnh đề order by.
Từ khóa "this" luôn tham chiếu đến các phần tử của collection, ở đây là các thể hiện Bid. Bộ lọc được tạo ra là một truy vấn
thông thường org.hibernate.Query, được chuẩn bị với một tham số ràng buộc và được thực thi với list(), như thông thường.

Hibernate không thực hiện bộ lọc của collection trong bộ nhớ. Bộ sưu tập Item#bids có thể chưa được khởi tạo khi bạn gọi
filter và, nếu như vậy, nó vẫn chưa được khởi tạo. Hơn nữa, filter không áp dụng cho các collection transient hoặc kết quả
truy vấn. Bạn chỉ có thể áp dụng chúng cho một collection persistent đã được ánh xạ hiện đang được tham chiếu bởi một
entity instance được quản lý bởi persistence context. Thuật ngữ "filter" có phần đánh lừa, vì kết quả của việc lọc là một
collection hoàn toàn mới và khác biệt; collection gốc không bị ảnh hưởng.

Đáng ngạc nhiên của tất cả, bao gồm cả người thiết kế tính năng này, là ngay cả những bộ lọc bình thường trở nên hữu ích.
Ví dụ, bạn có thể sử dụng một truy vấn trống để phân trang các phần tử trong collection:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
FilterCollections.java

Item item = em.find(Item.class, ITEM_ID);
org.hibernate.Query query = session.createFilter(
    item.getBids(),
    ""
);
query.setFirstResult(0);            <-- Chỉ truy xuất 2 bids
query.setMaxResults(2);
List<Bid> bids = query.list();

Ở đây, Hibernate thực thi truy vấn, nạp các phần tử của collection và giới hạn số hàng trả về thành hai, bắt đầu từ
hàng số không của kết quả. Thông thường, bạn sẽ sử dụng mệnh đề order by trong truy vấn phân trang.
Bạn không cần một mệnh đề from trong bộ lọc của collection, nhưng bạn có thể sử dụng nó nếu đó là phong cách của bạn.
Một bộ lọc của collection thậm chí không cần phải trả lại các phần tử của collection đang được lọc.


Bộ lọc tiếp theo này trả về bất kỳ Item nào được bán bởi bất kỳ bidders nào:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
FilterCollections.java

Item item = em.find(Item.class, ITEM_ID);
org.hibernate.Query query = session.createFilter(
    item.getBids(),
    "from Item i where i.seller = this.bidder"
);
List<Item> items = query.list();

Với một mệnh đề select, bạn có thể khai báo một projection (thuộc tính được chọn).
Bộ lọc sau đây truy xuất names của users đã đặt giá:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
FilterCollections.java

Item item = em.find(Item.class, ITEM_ID);
org.hibernate.Query query = session.createFilter(
    item.getBids(),
    "select distinct this.bidder.username order by this.bidder.username asc"
);
List<String> bidders = query.list();

Tất cả điều này rất thú vị, nhưng lý do quan trọng nhất cho sự tồn tại của filter collection là cho phép ứng dụng của bạn
truy xuất các phần tử của collection mà không cần khởi tạo toàn bộ collection. Đối với các collection lớn, điều này quan
trọng để đạt được hiệu suất chấp nhận được. Truy vấn sau đây truy xuất tất cả các bids được thực hiện cho Item với một số
tiền lớn hơn hoặc bằng 100:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
FilterCollections.java

Item item = em.find(Item.class, ITEM_ID);
org.hibernate.Query query = session.createFilter(
    item.getBids(),
    "where this.amount >= :param"
);
query.setParameter("param", new BigDecimal(100));
List<Bid> bids = query.list();

Một lần nữa, điều này không khởi tạo collection Item#bids mà trả về một collection mới.

Trước JPA 2, query criteria chỉ có sẵn qua API riêng của Hibernate. Ngày nay, các giao diện chuẩn hóa JPA có cùng sức mạnh
với API cũ org.hibernate.Criteria, nên bạn hiếm khi cần nó. Nhưng một số tính năng vẫn chỉ có sẵn trong API Hibernate,
chẳng hạn như (truy vấn theo ví dụ-query-by-example) và nhúng các đoạn mã SQL tùy ý. Trong phần tiếp theo, bạn sẽ tìm thấy
một tổng quan ngắn gọn về API org.hibernate.Criteria và một số tùy chọn duy nhất của nó.

