[Hibernate Feature]

Sử dụng các giao diện org.hibernate.Criteria và org.hibernate.Example, bạn có thể xây dựng các truy vấn theo cách lập trình
bằng cách tạo và kết hợp các thể hiện org.hibernate.criterion.*.
Bạn sẽ thấy cách sử dụng các API này và cách biểu thị selection, restriction, joins và projection.
Chúng tôi giả định rằng bạn đã đọc chương trước và bạn biết cách các thao tác này được dịch ra SQL.
Tất cả các ví dụ truy vấn được hiển thị ở đây đều có một ví dụ JPQL hoặc tiêu chí JPA tương đương
trong chương trước, vì vậy bạn có thể dễ dàng chuyển đổi qua lại nếu bạn cần so sánh cả ba API.

Hãy bắt đầu với một số ví dụ selection cơ bản.

16.3.1 Selection and ordering

Truy vấn sau đây tải tất cả các phiên bản Item:
PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

org.hibernate.Criteria criteria = session.createCriteria(Item.class);
List<Item> items = criteria.list();

Bạn tạo một org.hibernate.Criteria bằng cách sử dụng Session. Hoặc bạn có thể tạo một DetachedCriteria
mà không cần một persistence context mở.

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

DetachedCriteria criteria = DetachedCriteria.forClass(Item.class);
List<Item> items = criteria.getExecutableCriteria(session).list();

Khi bạn sẵn sàng để thực thi truy vấn, "đính kèm" nó vào một Session bằng cách sử dụng getExecutableCriteria().
Lưu ý rằng đây là một tính năng duy nhất của API criteria Hibernate. Với JPA, bạn luôn cần ít nhất một EntityManagerFactory
để có được một CriteriaBuilder.

Bạn có thể khai báo thứ tự của kết quả, tương đương với mệnh đề order by trong JPQL. Truy vấn sau đây tải tất cả các instance
User được sắp xếp theo thứ tự tăng dần theo tên và họ:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<User> users =
    session.createCriteria(User.class)
        .addOrder(Order.asc("firstname"))
        .addOrder(Order.asc("lastname"))
        .list();

Trong ví dụ này, mã được viết theo kiểu fluent (sử dụng chuỗi phương thức); các phương thức như addOrder() trả về
org.hibernate.Criteria ban đầu.
Tiếp theo, chúng ta sẽ xem xét việc restriction các bản ghi được selection.


16.3.2 Restriction

Truy vấn sau đây trả về tất cả các thể hiện Item có tên "Foo":
PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Item> items =
    session.createCriteria(Item.class)
        .add(Restrictions.eq("name", "Foo"))
        .list();

Giao diện Restrictions là nhà máy tạo ra restriction riêng lẻ mà bạn có thể thêm vào Criteria. Các thuộc tính được xác định
bằng chuỗi đơn giản, ở đây là Item#name với "name". Bạn cũng có thể khớp các phần từ con, tương tự như toán tử like trong
JPQL. Truy vấn sau đây tải tất cả các thể hiện User với tên người dùng bắt đầu bằng "j" hoặc "J".

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<User> users = session.createCriteria(User.class)
                    .add(Restrictions.like("username", "j", MatchMode.START).ignoreCase()).list();

MatchMode.START tương đương với dấu hoa thị j% trong JPQL. Các chế độ khác bao gồ EXACT, END và ANYWHERE.
Bạn có thể đặt tên cho các thuộc tính lồng nhau của các kiểu nhúng, chẳng hạn như Address của một User,
bằng cách sử dụng ký hiệu dấu chấm.

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<User> users =
    session.createCriteria(User.class)
        .add(Restrictions.eq("homeAddress.city", "Some City"))
        .list();

Một tính năng duy nhất của API criteria Hibernate là khả năng viết các đoạn mã SQL thuần túy trong các restriction.
Truy vấn sau đây tải tất cả các thể hiện User với username ngắn hơn tám ký tự:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<User> users = session.createCriteria(User.class)
    .add(Restrictions.sqlRestriction(
        "length({alias}.USERNAME) < ?",
        8,
        StandardBasicTypes.INTEGER
    )).list();

Hibernate gửi đoạn mã SQL đến cơ sở dữ liệu như vậy. Bạn cần có thẻ {alias} để thêm tiền tố cho bất kỳ bí danh bảng nào
trong SQL cuối cùng; nó luôn tham chiếu đến bảng mà thực thể gốc được ánh xạ tới (ở đây là USERS). Bạn cũng áp dụng
một tham số vị trí (không hỗ trợ các tham số được đặt tên bởi API này) và xác định kiểu dữ liệu của nó là
StandardBasicTypes.INTEGER.

Hệ thống query criteria của Hibernate có khả năng mở rộng: bạn có thể bọc hàm SQL LENGTH() trong bản cài đặt của riêng bạn
của giao diện org.hibernate.criterion.Criterion.

Sau khi bạn thực hiện việc selection và restriction, bạn muốn thêm phần projection vào truy vấn của bạn để xác định dữ liệu
mà bạn muốn truy xuất.

16.3.3 Projection and aggregation

Truy vấn sau đây trả về giá trị định danh, username và homeAddress của tất cả các thực thể User:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Object[]> result =
    session.createCriteria(User.class)
        .setProjection(Projections.projectionList()
            .add(Projections.property("id"))
            .add(Projections.property("username"))
            .add(Projections.property("homeAddress"))
        ).list();

Kết quả của truy vấn này là một List của các Object[], một mảng cho mỗi tuple.
Mỗi mảng chứa một Long (hoặc bất kỳ kiểu dữ liệu nào của định danh của người dùng), một String và một Address.

Tương tự như với restriction, bạn có thể thêm các biểu thức SQL tùy ý và cuộc gọi hàm vào phần projection:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<String> result =
    session.createCriteria(Item.class)
        .setProjection(Projections.projectionList()
            .add(Projections.sqlProjection(
                "NAME || ':' || AUCTIONEND as RESULT",
                    new String[]{"RESULT"},
                    new Type[]{StandardBasicTypes.STRING}
            ))
        ).list();

Truy vấn này trả về một List của chuỗi, trong đó các chuỗi có dạng "[Tên mục]:[Ngày kết thúc đấu giá]".
Tham số thứ hai cho phần projection là tên của alias (hoặc các alias) mà bạn đã sử dụng trong truy vấn:
Hibernate cần điều này để đọc giá trị từ ResultSet. Loại của mỗi phần tử/alias được trình bày cũng cần thiết:
ở đây, loại StandardBasicTypes.STRING.

Hibernate hỗ trợ group và aggresgation. Truy vấn này đếm các họ của users:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Object[]> result =
    session.createCriteria(User.class)
        .setProjection(Projections.projectionList()
        .add(Projections.groupProperty("lastname"))
        .add(Projections.rowCount())
    ).list();

Phương thức rowCount() tương đương với cuộc gọi hàm count() trong JPQL. Truy vấn tổng hợp sau trả về giá trị trung bình
của số lượng đặt giá được nhóm theo Item.

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Object[]> result =
    session.createCriteria(Bid.class)
        .setProjection(Projections.projectionList()
        .add(Projections.groupProperty("item"))
        .add(Projections.avg("amount"))
    ).list();


16.3.4 Joins
Bạn biểu thị inner join của một thực thể liên quan bằng Criterias lồng nhau:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Bid> result =
    session.createCriteria(Bid.class)
        .createCriteria("item")             // Inner join
        .add(Restrictions.isNotNull("buyNowPrice"))
        .createCriteria("seller")           // Inner join
        .add(Restrictions.eq("username", "johndoe"))
        .list();

Truy vấn này trả về tất cả các thể hiện Bid của bất kỳ Item nào được bán bởi User "johndoe" mà không có giá mua ngay.
Inner join đầu tiên của mối quan hệ Bid#item được thực hiện với createCriteria("item") trên Criteria gốc của Bid.
Criteria lồng nhau này hiện tượng đường dẫn mối quan hệ, trên đó có một inner join bộ khác được tạo với createCriteria("seller").
Ràng buộc bổ sung được đặt trên mỗi Criteria join; chúng sẽ được kết hợp với toán tử và logic trong mệnh đề where
của truy vấn SQL cuối cùng.

Một cách khác, inner join có thể được biểu thị bằng cách sử dụng createAlias() trên một Criteria. Đây là truy vấn tương tự:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Bid> result =
    session.createCriteria(Bid.class)
        .createCriteria("item")
        .createAlias("seller", "s")
        .add(Restrictions.and(
            Restrictions.eq("s.username", "johndoe"),
            Restrictions.isNotNull("buyNowPrice")
        ))
    .list();

Việc dynamic eager fetching thông qua các outer joins được khai báo bằng cách sử dụng setFetchMode():

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Item> result =
    session.createCriteria(Item.class)
        .setFetchMode("bids", FetchMode.JOIN)
        .list();

Truy vấn này trả về tất cả các thể hiện Item với bộ sưu tập bids của họ được khởi tạo trong cùng một truy vấn SQL.

Cẩn thận với sự trùng lặp
Tương tự như query JPQL và criteria JPA, Hibernate có thể trả về các tham chiếu Item trùng lặp! Xem cuộc thảo luận trước đó
của chúng tôi trong phần 15.4.5.


Tương tự như JPQL và criteria JPA, Hibernate có thể loại bỏ các tham chiếu trùng lặp trong bộ nhớ với phép "distinct".
PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Item> result =
    session.createCriteria(Item.class)
        .setFetchMode("bids", FetchMode.JOIN)
        .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
        .list();

Ở đây, bạn cũng có thể thấy rằng một ResultTransformer, như đã thảo luận trước đây trong chương này,
có thể được áp dụng cho một Criteria.

Bạn có thể fetch nhiều associations hoặc collections trong 1 query:
PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

List<Item> result =
    session.createCriteria(Item.class)
        .createAlias("bids", "b", JoinType.LEFT_OUTER_JOIN)
        .setFetchMode("b", FetchMode.JOIN)
        .createAlias("b.bidder", "bdr", JoinType.INNER_JOIN)
        .setFetchMode("bdr", FetchMode.JOIN)
        .createAlias("seller", "s", JoinType.LEFT_OUTER_JOIN)
        .setFetchMode("s", FetchMode.JOIN)
        .list();

Truy vấn này trả về tất cả các thể hiện Item, tải bộ sưu tập Item#bids với một outer join, và tải Bid#bidder 
với một inner join. Item#seller cũng được tải: vì nó không thể là null, nên không quan trọng xem sử dụng inner join
hay outer join. Như luôn, không nên tải nhiều bộ sưu tập trong một truy vấn, hoặc bạn sẽ tạo ra một Descartes product
(xem phần 15.4.5).

Tiếp theo, bạn sẽ thấy rằng các truy vấn con với criteria cũng hoạt động với các thể hiện Criteria lồng nhau.

16.3.5 Subselects

Subselect sau trả về tất cả các instance User đang bán hơn một Item:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

DetachedCriteria sq = DetachedCriteria.forClass(Item.class, "i");
sq.add(Restrictions.eqProperty("i.seller.id", "u.id"));
sq.setProjection(Projections.rowCount());
List<User> result =
    session.createCriteria(User.class, "u")
    .add(Subqueries.lt(1l, sq))
    .list();

DetachedCriteria là một truy vấn trả về số lượng item đã bán bị restriction bởi một User cụ thể. Ràng buộc dựa vào alias u,
vì vậy đây là một truy vấn con liên quan. "Truy vấn bên ngoài" sau đó nhúng DetachedCriteria và cung cấp alias u.
Lưu ý rằng truy vấn con là toán hạng bên phải của phép lt() (ít hơn) và dịch thành 1 < ([Kết quả của truy vấn đếm])
trong SQL.

Hibernate cũng hỗ trợ tính toán số lượng. Truy vấn này trả về các item mà tất cả các bids đều ít hơn hoặc bằng 10:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

DetachedCriteria sq = DetachedCriteria.forClass(Bid.class, "b");
sq.add(Restrictions.eqProperty("b.item.id", "i.id"));
sq.setProjection(Projections.property("amount"));
List<Item> result =
    session.createCriteria(Item.class, "i")
        .add(Subqueries.geAll(new BigDecimal(10), sq))
        .list();

Một lần nữa, vị trí của các toán hạng quyết định rằng so sánh dựa trên geAll() (lớn hơn hoặc bằng tất cả) để tìm các
bids có "ít hơn hoặc bằng 10" số tiền.

Cho đến nay, có một số lý do tốt để sử dụng API org.hibernate.Criteria cũ. Tuy nhiên, trong các ứng dụng mới, bạn nên sử dụng
các ngôn ngữ truy vấn JPA chuẩn hóa. Các tính năng thú vị nhất của API cũ của Hibernate mà chúng tôi đã trình bày là biểu thức
SQL nhúng trong restriction và projection. Một tính năng duy nhất chỉ có trong Hibernate mà bạn có thể thấy thú vị là
truy vấn theo ví dụ.


16.3.6 Example Queries

Ý tưởng đằng sau các truy vấn theo ví dụ là bạn cung cấp một entity instance ví dụ và Hibernate sẽ tải tất cả các entity instance
mà "giống với ví dụ". Điều này có thể thuận tiện nếu bạn có một màn hình tìm kiếm phức tạp trong giao diện người dùng của mình,
bởi vì bạn không cần phải viết thêm các lớp để lưu trữ các thuật ngữ tìm kiếm đã nhập.

Hãy nói rằng bạn có một biểu template tìm kiếm trong ứng dụng của bạn, nơi bạn có thể tìm kiếm các thể hiện User theo họ.
Bạn có thể gắn trực tiếp form field cho "last name" trực tiếp vào thuộc tính User#lastname và sau đó thông báo cho Hibernate
để tải các thể hiện User "giống hệt-similar":

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

User template = new User();         [1] Creates empty User instance
template.setLastname("Doe");

org.hibernate.criterion.Example example = Example.create(template);     [2] Creates Example instance
example.ignoreCase();
example.enableLike(MatchMode.START);
example.excludeProperty("activated");       [3] Ignores activate property
List<User> users =
    session.createCriteria(User.class)      [4] Adds Example as restriction
    .add(example)
    .list();

1. Tạo một instance "rỗng" của User làm template cho tìm kiếm của bạn và đặt giá trị thuộc tính bạn đang tìm kiếm:
những người có họ "Doe".

2. Tạo một instance của Example với template. API này cho phép bạn điều chỉnh tìm kiếm. Bạn muốn phần họ không phân biệt
chữ hoa chữ thường và tìm kiếm theo chuỗi con, vì vậy "Doe", "DoeX" hoặc "Doe Y" sẽ khớp.

3. Lớp User có một thuộc tính kiểu boolean được gọi là activated. Là một kiểu nguyên, nó không thể là null và giá trị
mặc định của nó là false, vì vậy Hibernate sẽ bao gồm nó trong tìm kiếm và chỉ trả về người dùng chưa kích hoạt.
Bạn muốn tất cả người dùng, vì vậy hãy nói với Hibernate để bỏ qua thuộc tính đó.

4. Example được thêm vào một Criteria như một restriction.

Bởi vì bạn đã viết lớp thực thể User theo quy tắc JavaBean, việc kết nối nó với một biểu template UI nên là một công việc đơn giản.
Nó có các phương thức getter và setter thông thường, và bạn có thể tạo một instance "rỗng" với hàm tạo không có tham số
public (nhớ cuộc thảo luận về thiết kế hàm tạo trong phần 3.2.3).

Một điểm yếu rõ ràng của API Example là bất kỳ tùy chọn nào liên quan đến string-matching, chẳng hạn như ignoreCase() và enableLike(), 
được áp dụng cho tất cả các thuộc tính có giá trị chuỗi của template. Nếu bạn tìm kiếm cả lastname và firstname, cả hai đều 
sẽ là các kết quả khớp chuỗi không phân biệt chữ hoa chữ thường.

Theo mặc định, tất cả các thuộc tính có giá trị non-null của template thực thể được thêm vào restriction của truy vấn 
theo ví dụ. Như được thể hiện trong đoạn mã cuối cùng, bạn có thể loại bỏ thủ công các thuộc tính của template thực thể theo 
tên bằng excludeProperty(). Tùy chọn loại trừ khác bao gồm việc loại trừ các thuộc tính có giá trị bằng không (như int hoặc long) 
với excludeZeroes() và tắt tùy chọn loại trừ hoàn toàn với excludeNone(). Nếu không có thuộc tính nào bị loại 
trừ, bất kỳ thuộc tính nào có giá trị null của template sẽ được thêm vào restriction trong truy vấn SQL với kiểm tra `is null`.

Nếu bạn cần kiểm soát nhiều hơn về việc loại trừ và bao gồm các thuộc tính, bạn có thể mở rộng Example và viết PropertySelector
của riêng bạn:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

class ExcludeBooleanExample extends Example {

    ExcludeBooleanExample(Object template) {
        super(template, new PropertySelector() {
            @Override
            public boolean include(Object propertyValue,
                                   String propertyName,
                                   Type type) {

                return propertyValue != null
                    && !type.equals(StandardBasicTypes.BOOLEAN);
            }
        });
    }
}

Selector này loại trừ bất kỳ thuộc tính nào có giá trị null (giống như bộ chọn mặc định) và cũng loại trừ bất kỳ thuộc tính
Boolean nào (như User#activated).

Sau khi thêm một restriction Example vào một Criteria, bạn có thể thêm các restriction bổ sung vào truy vấn. Hoặc bạn có
thể thêm nhiều restriction Example vào một truy vấn duy nhất. Truy vấn sau đây trả về tất cả các thể hiện Item với
tên bắt đầu bằng "B" hoặc "b" và một người bán khớp với một ví dụ User:

PATH: /examples/src/test/java/org/jpwh/test/querying/advanced/
HibernateCriteria.java

Item itemTemplate = new Item();
itemTemplate.setName("B");

Example exampleItem = Example.create(itemTemplate);
exampleItem.ignoreCase();
exampleItem.enableLike(MatchMode.START);
exampleItem.excludeProperty("auctionType");
exampleItem.excludeProperty("createdOn");

User userTemplate = new User();
userTemplate.setLastname("Doe");

Example exampleUser = Example.create(userTemplate);
exampleUser.excludeProperty("activated");

List<Item> items = session.createCriteria(Item.class)
    .add(exampleItem)
    .createCriteria("seller").add(exampleUser)
    .list();

Tại điểm này, chúng tôi mời bạn tiến một bước lùi và xem xét cần bao nhiêu mã để triển khai một tìm kiếm như vậy bằng cách
sử dụng SQL/JDBC được viết thủ công.

