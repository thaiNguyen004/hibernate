Trong phần này, chúng ta sẽ tìm hiểu cách xây dựng một ứng dụng JPA bằng
cách sử dụng Spring và data access object design pattern (DAO).
Mẫu thiết kế DAO tạo ra một giao diện trừu tượng đối với cơ sở dữ liệu,
hỗ trợ các hoạt động truy cập mà không tiết lộ bất kỳ chi tiết nào
về cơ sở dữ liệu.

Bạn có thể sử dụng lý luận rằng các Spring Data JPA repositories mà chúng
ta đã tạo và làm việc với đã làm điều này, và đó là đúng. Trong chương này,
chúng ta sẽ thể hiện cách xây dựng một lớp DAO và chúng ta sẽ thảo luận về
khi nào chúng ta nên ưa thích cách tiếp cận này thay vì sử dụng Spring Data JPA.

Ứng dụng CaveatEmptor chứa các lớp Item và Bid (xem danh sách 14.1 và 14.2).
Các đối tượng này sẽ bây giờ được quản lý với sự giúp đỡ của Spring Framework.
Mối quan hệ giữa các bảng BID và ITEM sẽ được duy trì thông qua một trường khóa ngoại
trên bảng BID. Một trường được đánh dấu bằng chú thích @javax.persistence.Transient
sẽ bị loại trừ khỏi quá trình lưu trữ.

Listing 14.1 The Item class

Path: Ch14/spring-jpa-dao/src/main/java/com/manning/javapersistence/ch14
➥ /Item.java

@Entity
public class Item {

    @Id
    @GeneratedValue(generator = "ID_GENERATOR")
    private Long id;

    @NotNull
    @Size(
        min = 2,
        max = 255,
        message = "Name is required, maximum 255 characters."
    )
    private String name;

    @Transient
    private Set<Bid> bids = new HashSet<>();
    // . . .
}

Trường id là một định danh được tạo ra tự động.
Trường name không được null và phải có kích thước từ 2 đến 255 ký tự.
Mỗi Item có một tham chiếu đến tập hợp các Bids của nó. Trường này được đánh dấu bằng
@Transient, vì vậy nó sẽ không được lưu trữ.

Chúng ta sẽ chuyển sự chú ý của mình đến lớp Bid, như nó hiện giờ. Nó cũng là một thực thể,
và mối quan hệ giữa Item và Bid là một many-to-one.

Listing 14.2 The Bid class

Path: Ch14/spring-jpa-dao/src/main/java/com/manning/javapersistence/ch14
➥ /Bid.java

@Entity
public class Bid {
    @Id
    @GeneratedValue(generator = "ID_GENERATOR")
    private Long id;

    @NotNull
    private BigDecimal amount;

    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "ITEM_ID")
    private Item item;
    // . . .
}

Lớp thực thể Bid chứa trường id làm định danh được tạo ra tự động.
Trường amount không được null.
Mỗi Bid có một tham chiếu non-optional đến Item của nó. Việc truy xuất sẽ được
thực hiện một cách lazy, và tên của cột kết nối là ITEM_ID.

Để triển khai mẫu thiết kế DAO, chúng ta sẽ bắt đầu bằng việc tạo hai interface, ItemDao và BidDao,
và chúng ta sẽ khai báo các hoạt động truy cập sẽ được triển khai:

Path: Ch14/spring-jpa-dao/src/main/java/com/manning/javapersistence/ch14
➥ /dao/ItemDao.java

public interface ItemDao {

    Item getById(long id);

    List<Item> getAll();

    void insert(Item item);

    void update(long id, String name);

    void delete(Item item);

    Item findByName(String name);
}

Giao diện BidDao được khai báo như sau:

Path: Ch14/spring-jpa-dao/src/main/java/com/manning/javapersistence/ch14
➥ /dao/BidDao.java

public interface BidDao {

    Bid getById(long id);

    List<Bid> getAll();

    void insert(Bid bid);

    void update(long id, String amount);

    void delete(Bid bid);

    List<Bid> findByAmount(String amount);

}

@Repository là một chú thích đánh dấu cho biết thành phần đại diện cho một DAO. Ngoài việc đánh dấu
lớp được chú thích là một thành phần Spring, @Repository sẽ bắt lấy các ngoại lệ persistence cụ thể
và dịch chúng thành các ngoại lệ unchecked của Spring.

@Transactional sẽ làm cho tất cả các phương thức từ bên trong lớp trở nên transactional, như đã
thảo luận ở phần 11.4.3.

Một EntityManager không an toàn với luồng làm việc mặc định. Chúng ta sẽ sử dụng @PersistenceContext
để container inject một đối tượng proxy an toàn với luồng. Ngoài việc tiêm sự phụ thuộc vào một quản lý
EntityManager do container, chú thích @PersistenceContext còn có các tham số. Thiết lập persistence type 
thành EXTENDED giữ persistence context trong suốt vòng đời của một bean.

Triển khai của giao diện ItemDao, ItemDaoImpl, được hiển thị trong đoạn mã sau đây.

Listing 14.3 The ItemDaoImpl class

Path: Ch14/spring-jpa-dao/src/main/java/com/manning/javapersistence/ch14
➥ /dao/ItemDaoImpl.java

@Repository                 [1]
@Transactional
public class ItemDaoImpl implements ItemDao {

    @PersistenceContext(type = PersistenceContextType.EXTENDED) [2]
    private EntityManager em;

    @Override
    public Item getById(long id) {          [3]
        return em.find(Item.class, id);
    }

    @Override
    public List<Item> getAll() {            [4]
        return (List<Item>) em.createQuery("from Item", Item.class)
            .getResultList();
    }

    @Override
    public void insert(Item item) {         [5]
        em.persist(item);
        for (Bid bid : item.getBids()) {
            em.persist(bid);
        }
    }

    @Override
    public void update(long id, String name) {          [6]
        Item item = em.find(Item.class, id);
        item.setName(name);
        em.persist(item);
    }
    @Override
    public void delete(Item item) {             [7]
        for (Bid bid : item.getBids()) {
            em.remove(bid);
        }
        em.remove(item);
    }

    @Override
    public Item findByName(String name) {           [8]
        return em.createQuery("from Item where name=:name", Item.class)
            .setParameter("name", name).getSingleResult();
    }

}


1. Lớp ItemDaoImpl được chú thích bằng @Repository và @Transactional.

2. Trường EntityManager em được tiêm vào ứng dụng, như đã chú thích bằng @PersistenceContext.
Loại persistence EXTENDED có nghĩa là persistence context được duy trì trong suốt vòng đời
của một bean.

3. Truy xuất một Item theo id của nó.
4. Truy xuất tất cả các thực thể Item.
5. Lưu trữ một Item và tất cả các Bid của nó.
6. Cập nhật trường name của một Item.
7. Xóa tất cả các Bid thuộc về một Item và Item chính nó.
8. Tìm kiếm một Item theo tên của nó.


Listing 14.4 The BidDaoImpl class

@Repository
@Transactional
public class BidDAOImpl implements BidDAO{

    @PersistenceContext(type = PersistenceContextType.EXTENDED)
    private EntityManager em;

    @Override
    public Bid getById(long id) {
        return em.find(Bid.class, id);
    }

    @Override
    public List<Bid> getAll() {
        return em.createQuery("from Bid ", Bid.class).getResultList();
    }

    @Override
    public void insert(Bid bid) {
        em.persist(bid);
    }

    @Override
    public void update(long id, String amount) {
        Bid bid = em.find(Bid.class, id);
        bid.setAmount(new BigDecimal(amount));
        em.persist(bid);
    }

    @Override
    public void delete(Bid bid) {
        em.remove(bid);
    }

    @Override
    public List<Bid> findByAmount(String amount) {
        return em.createQuery("from Bid where amount=:amount", Bid.class)
                .setParameter("amount", new BigDecimal(amount)).getResultList();
    }
}


Lớp BidDaoImpl được chú thích bằng @Repository và @Transactional.

Trường EntityManager em được tiêm vào ứng dụng, được chú thích bằng @PersistenceContext.
Thiết lập persistence type thành EXTENDED giữ persistence context trong suốt vòng đời của một bean.



Các hoạt động được thực hiện bởi BidDaoImpl bao gồm:
1. Truy xuất một Bid theo id của nó.
2. Truy xuất tất cả các thực thể Bid.
3. Lưu trữ một Bid.
4. Cập nhật trường amount của một Bid.
5. Xóa một Bid.
6. Tìm kiếm một Bid theo số tiền của nó.

Để làm việc với cơ sở dữ liệu, chúng ta sẽ cung cấp một lớp đặc biệt, DatabaseService,
sẽ đảm nhận nhiệm vụ điền dữ liệu vào cơ sở dữ liệu và xóa thông tin khỏi nó.

Listing 14.5 The DatabaseService class

Path: Ch14/spring-jpa-dao/src/test/java/com/manning/javapersistence/ch14
➥ /DatabaseService.java

public class DatabaseService {

    @PersistenceContext(type = PersistenceContextType.EXTENDED)
    private EntityManager em;

    @Autowired
    private ItemDAO itemDao;

    @Transactional
    public void init() {
        for (int i = 0; i < 10; i++) {
            String itemName = "Item " + (i + 1);
            Item item = new Item();
            item.setName(itemName);
            Bid bid1 = new Bid(new BigDecimal(1000.0), item);
            Bid bid2 = new Bid(new BigDecimal(1100.0), item);

            itemDao.insert(item);
        }
    }

    @Transactional
    public void clear() {
        em.createQuery("delete from Bid b").executeUpdate();
        em.createQuery("delete from Item i").executeUpdate();
    }
}

Trường EntityManager em được tiêm vào ứng dụng, như đã được chú thích bằng @PersistenceContext. 
Thiết lập persistence type thành EXTENDED giữ persistence context trong suốt vòng đời của một bean.

Trường ItemDao itemDao được tiêm vào ứng dụng, như đã chú thích bằng @Autowired. Bởi vì lớp ItemDaoImpl
được chú thích bằng @Repository, Spring sẽ tạo ra bean cần thiết thuộc về lớp này để được tiêm vào đây.

Tạo ra 10 đối tượng Item, mỗi đối tượng có 2 Bid và chèn chúng vào cơ sở dữ liệu.

Xóa tất cả các đối tượng Bid và Item đã được chèn trước đó vào cơ sở dữ liệu.

Tệp cấu hình tiêu chuẩn cho Spring là một lớp Java tạo và thiết lập các bean cần thiết.
Chú thích @EnableTransactionManagement sẽ kích hoạt khả năng quản lý giao dịch dựa trên chú thích của Spring.
Khi sử dụng cấu hình XML, chú thích này được phản ánh bằng phần tử tx:annotation-driven. Mọi tương tác với
cơ sở dữ liệu nên diễn ra trong ranh giới của giao dịch và Spring cần một bean quản lý giao dịch.

Chúng ta sẽ tạo tệp cấu hình sau cho ứng dụng.


Listing 14.6 The SpringConfiguration class

@EnableTransactionManagement            [A]
public class SpringConfiguration {

    @Bean
    public DataSource dataSource() {        [B]
        DriverManagerDataSource dataSource = new DriverManagerDataSource();     [B]
 [C]    dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/CH14_SPRING_HIBERNATE?serverTimezone=UTC");
        dataSource.setUsername("root");     [D]
        dataSource.setUsername("123456");   [E]
        return dataSource;  [B]
    }

    @Bean
    public DatabaseService databaseService() {      [G]
        return new DatabaseService();
    }

    @Bean
    public JpaTransactionManager transactionManager(EntityManagerFactory emf) {     [H]
        return new JpaTransactionManager(emf);
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {                          [I]
        LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean =             [I]
                new LocalContainerEntityManagerFactoryBean();                                       [I]
        localContainerEntityManagerFactoryBean.setPersistenceUnitName("ch14");                      [J]
        localContainerEntityManagerFactoryBean.setDataSource(dataSource());                         [K]
        localContainerEntityManagerFactoryBean.setPackagesToScan("org.manning.javapersistence");    [L]
        return localContainerEntityManagerFactoryBean;          [I]
    }

    @Bean
    public ItemDAO itemDao() {          [M]
        return new ItemDAOImpl();
    }

    @Bean
    public BidDAO bidDao() {            [N]
        return new BidDAOImpl();
    }
}

[A] The @EnableTransactionManagement chú thích cho phép khả năng quản lý
giao dịch dựa trên chú thích của Spring.

[B] Tạo một data source bean.

[C] Chỉ ra các thuộc tính JDBC - driver.

[D] URL của cơ sở dữ liệu.

[E] Tên người dùng.

[F] Không có mật khẩu trong cấu hình này. Sửa đổi thông tin đăng nhập để
phù hợp với máy của bạn và sử dụng mật khẩu trong thực tế.

[G] Bean DatabaseService mà Spring sẽ sử dụng để điền và xóa cơ sở dữ liệu.

[H] Tạo một transaction manager bean dựa trên một entity manager factory.

[I] LocalContainerEntityManagerFactoryBean là một bean factory tạo ra
EntityManagerFactory theo hợp đồng khởi động tiêu chuẩn của JPA.

[J] Thiết lập tên persistence unit, được định nghĩa trong persistence.xml.

[K] Thiết lập data source.

[L] Thiết lập các package để quét các entity class. Các bean được đặt trong
com.manning.javapersistence.ch14, vì vậy chúng ta thiết lập gói này để quét.

[M] Tạo một bean ItemDao.

[N] Tạo một bean BidDao.

Thông tin cấu hình này được Spring sử dụng để tạo và tiêm các bean tạo nên
nền tảng của ứng dụng. Chúng ta có thể sử dụng cấu hình XML thay thế và tệp
application-context.xml phản ánh công việc đã thực hiện trong SpringConfiguration.java.
Chúng tôi chỉ muốn nhấn mạnh một điều chúng tôi đã đề cập trước đó: trong XML,
chúng tôi kích hoạt khả năng quản lý giao dịch dựa trên chú thích của Spring
với sự giúp đỡ của phần tử tx:annotation-driven, trỏ đến một bean quản lý giao dịch:

PATH: Ch14/spring-jpa-dao/src/test/resources/application-context.xml

<tx:annotation-driven transaction-manager="txManager"/>

Tiện ích mở rộng SpringExtension được sử dụng để tích hợp Spring test context với
JUnit 5 Jupiter bằng cách implementing một số phương thức model callback tiện ích
Jupiter của JUnit.

Quan trọng là sử dụng loại PersistenceContextType.EXTENDED cho tất cả các bean
EntityManager được tiêm. Nếu chúng ta sử dụng loại PersistenceContextType.TRANSACTION
mặc định, đối tượng trả về sẽ trở thành detached vào cuối thực hiện giao dịch.
Truyền nó vào phương thức delete sẽ dẫn đến một ngoại lệ "IllegalArgumentException:
Removeing a detached instance".

Bây giờ là thời điểm để kiểm tra tính năng chúng tôi đã phát triển để lưu trữ các
thực thể Item và Bid.

Listing 14.7 The SpringJpaTest class

Path: Ch14/spring-jpa-dao/src/test/java/com/manning/javapersistence/ch14
➥ /SpringJpaTest.java

@ExtendWith(SpringExtension.class)      [A]
@ContextConfiguration(classes = {SpringConfiguration.class})    [B]
//@ContextConfiguration("classpath:application-context.xml")  [C]
public class SpringJpaTest {

    @Autowired
    private DatabaseService databaseService;        [D]

    @Autowired
    private ItemDAO itemDao;                        [D]

    @Autowired
    private BidDAO bidDao;                          [D]

    @BeforeEach                         [E]
    public void setUp() {
        databaseService.init();
    }

    @Test
    public void testInsertItems() { [F]
        final List<Item> itemsList = itemDao.getAll();
        final List<Bid> bidsList = bidDao.getAll();
        assertAll(
                () -> assertNotNull(itemsList),
                () -> assertEquals(10, itemsList.size()),
                () -> assertNotNull(itemDao.findByName("Item 1")),
                () -> assertNotNull(bidsList),
                () -> assertEquals(20, bidsList.size()),
                () -> assertEquals(10, bidDao.findByAmount("1000.00").size())
        );
    }

    @Test
    public void testDeleteItem() {          [G]
        itemDao.delete(itemDao.findByName("Item 2"));   [G]
        assertThrows(NoResultException.class, () -> itemDao.findByName("Item 2"));   [H]

    @AfterEach
    public void dropDown() {                [I]
        databaseService.clear();
    }

}

[A] Extend the test bằng cách sử dụng SpringExtension. Như đã đề cập trước đây,
điều này sẽ tích hợp Spring TestContext Framework vào JUnit 5 bằng cách thực hiện
một số phương thức model callback tiện ích Jupiter của JUnit.

[B] Spring test context được cấu hình bằng cách sử dụng các bean được định nghĩa
trong lớp SpringConfiguration đã được giới thiệu trước đó.

[C] Một cách thay thế, chúng ta có thể cấu hình bộ test context bằng XML.
Chỉ có một trong các dòng sau đây nên được kích hoạt trong mã.

[D] Tự động tiêm một bean DatabaseService, một bean ItemDao và một bean BidDao.

[E] Trước khi thực hiện mỗi bài test, nội dung của cơ sở dữ liệu được khởi tạo bằng
phương thức init từ DatabaseService được tiêm vào.

[F] Truy xuất tất cả các Item và tất cả các Bid và thực hiện các kiểm tra.

[G] Tìm một Item theo trường tên của nó và xóa nó khỏi cơ sở dữ liệu.
Chúng ta sẽ sử dụng PersistenceContextType.EXTENDED cho tất cả các bean EntityManager
được tiêm vào. Nếu không, việc truyền nó vào phương thức xóa sẽ dẫn đến một ngoại lệ
"IllegalArgumentException: Removing a detach instance".

[H] Sau khi xóa thành công Item khỏi cơ sở dữ liệu, thử tìm nó lại sẽ gây ra một
ngoại lệ NoResultException. Các bài test còn lại có thể dễ dàng được kiểm tra trong mã nguồn.

[I] Sau khi thực hiện mỗi bài test, nội dung của cơ sở dữ liệu được xóa bỏ bằng phương thức
`clear` từ DatabaseService được tiêm vào.


Khi nào thì nên áp dụng giải pháp sử dụng Spring Framework và mô hình thiết kế DAO?
Dưới đây là một số tình huống mà chúng tôi đề xuất:

1. **Bạn muốn giao nhiệm vụ kiểm soát trình quản lý thực thể và giao dịch cho
Spring Framework** (hãy nhớ rằng điều này được thực hiện thông qua kỹ thuật IoC).
Tuy nhiên, hãy lưu ý rằng điều này đồng nghĩa với việc bạn sẽ mất đi khả năng gỡ lỗi
trong quá trình giao dịch. Hãy nhớ điều đó.

2. **Bạn muốn tạo ra API riêng của bạn để quản lý persistence và bạn không thể
hoặc không muốn sử dụng Spring Data**. Trường hợp này có thể xảy ra khi bạn
có các hoạt động cụ thể mà bạn cần kiểm soát, hoặc bạn muốn loại bỏ
(sự tải kỹ thuật của Spring Data-Spring Data overhead) (bao gồm thời gian khởi động
cho nhóm làm việc để sử dụng nó, giới thiệu các dependencies mới vào một dự án đã tồn tại
và độ trễ trong việc thực thi Spring Data, như đã thảo luận trong phần 2.7).

3. **Trong một số tình huống cụ thể, bạn có thể muốn sử dụng Spring Framework
để xử lý trình quản lý thực thể và giao dịch mà không cần triển khai các lớp DAO riêng của bạn**.

Chúng tôi muốn cải thiện thiết kế của ứng dụng JPA Spring của chúng tôi. Các phần tiếp
theo sẽ tập trung vào làm cho nó trở nên chung chung hơn và sử dụng API Hibernate thay vì JPA.
Chúng tôi sẽ tập trung vào sự khác biệt giữa giải pháp đầu tiên này và các phiên bản mới
của chúng tôi, và chúng tôi sẽ thảo luận về cách giới thiệu các thay đổi.