15.1 Creating a Spring Data JDBC project

Trong chương này, chúng ta sẽ tạo một ứng dụng để quản lý và lưu trữ thông tin người dùng của CaveatEmptor
bằng Spring Data JDBC như chúng ta đã làm bằng Spring Data JPA trong chương 4. Chúng ta sẽ tạo một ứng dụng
Spring Boot để sử dụng Spring Data JDBC.

Để bắt đầu, chúng ta sẽ sử dụng trang web Spring Initializr (https://start.spring.io/) để tạo một dự án
Spring Boot mới (hình 15.1) với các đặc điểm sau:

- Group: com.manning.javapersistence
- Artifact: spring-data-jdbc
- Description: Spring Data JDBC project

Chúng ta cũng sẽ thêm các phụ thuộc sau:
- Spring Data JDBC (điều này sẽ thêm spring-boot-starter-data-jdbc vào tệp pom.xml của Maven).
- MySQL Driver (điều này sẽ thêm mysql-connector-java vào tệp pom.xml của Maven).

LƯU Ý: Để chạy các ví dụ từ mã nguồn, bạn cần chạy trước tập lệnh Ch15.sql.

Khung của dự án bao gồm bốn tệp:

SpringDataJdbcApplication, bao gồm một phần tử chính (main method) mẫu.
SpringDataJdbcApplicationTests, bao gồm một phần tử kiểm thử (test method) mẫu.
application.properties, ban đầu là trống.
pom.xml, bao gồm thông tin quản lý cần thiết cho Maven.
Tệp pom.xml, được hiển thị trong đoạn mã sau, chứa các phụ thuộc mà chúng tôi đã thêm để bắt đầu dự án
Spring Data JDBC: chúng tôi sẽ sử dụng khung Spring Data JDBC để truy cập cơ sở dữ liệu MySQL,
vì vậy chúng ta cần driver cho MySQL.

Tệp application.properties có thể chứa các thuộc tính khác nhau sẽ được sử dụng bởi application.
Spring Boot sẽ tự động tìm và tải tệp application.properties từ classpath, và thư mục src/main/resources
được thêm vào classpath bởi Maven.

Do tập lệnh khởi tạo (initialization script) thường chỉ chạy mặc định cho cơ sở dữ liệu nhúng
(embedded databases), và chúng ta đang sử dụng MySQL, vì vậy chúng ta cần buộc việc thực thi
tập lệnh bằng cách thiết lập chế độ khởi tạo (initialization mode), spring.sql.init.mode, thành "always".

Thiết lập spring.sql.init.mode thành "always" trong tệp cấu hình (application.properties hoặc application.yml)
của ứng dụng Spring Boot có tác dụng làm cho tập lệnh khởi tạo SQL (initialization script) luôn được thực thi
khi ứng dụng khởi động, ngay cả khi bạn sử dụng cơ sở dữ liệu không phải là cơ sở dữ liệu nhúng (embedded database).

Mặc định, Spring Boot chạy tập lệnh khởi tạo SQL chỉ khi bạn sử dụng cơ sở dữ liệu nhúng (ví dụ: H2, HSQLDB)
hoặc khi cơ sở dữ liệu không tồn tại. Bằng cách thiết lập spring.sql.init.mode thành "always," bạn cho phép
tập lệnh khởi tạo SQL chạy mỗi khi ứng dụng khởi động, ngay cả khi cơ sở dữ liệu đã tồn tại.

Việc này có thể hữu ích trong các tình huống khi bạn muốn đảm bảo rằng tập lệnh khởi tạo SQL luôn được thực thi,
chẳng hạn như để cập nhật cơ sở dữ liệu hoặc áp dụng các thay đổi cấu trúc cơ sở dữ liệu mỗi khi ứng dụng khởi động.
Tuy nhiên, cần thận trọng khi sử dụng chế độ "always," vì nó có thể làm thay đổi dữ liệu trong cơ sở dữ liệu
đã tồn tại mỗi khi ứng dụng khởi động.

Tệp cấu hình được hiển thị trong đoạn mã sau.
Listing 15.2 The application.properties file
Path: Ch15/spring-data-jdbc/src/main/resources/application.properties

spring.datasource.url=jdbc:mysql://localhost:3306/CH15_SPRINGDATAJDBC?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=12456
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.sql.init.mode=always

Tập lệnh SQL được thực thi tự động sẽ có dạng như tập lệnh trong đoạn mã sau,
thực hiện việc xóa và tạo lại bảng USERS. Khi ứng dụng khởi động,
Spring Boot sẽ luôn thực thi các tệp schema.sql và data.sql trên classpath.

Listing 15.3 The schema.sql file
Path: Ch15/spring-data-jdbc/src/main/resources/schema.sql

DROP TABLE IF EXISTS USERS;

CREATE TABLE USERS (
    ID INTEGER AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(30),
    REGISTRATION_DATE DATE
)

Bây giờ chúng ta sẽ định nghĩa lớp entity tương ứng với bảng USERS như được thể hiện trong đoạn mã 15.4.
Chúng ta sẽ sử dụng một số chú thích cụ thể của Spring để cấu hình cách lớp này được ánh xạ đến
bảng trong cơ sở dữ liệu:

- `org.springframework.data.relational.core.mapping.Table`: Đây khác với `javax.persistence.Table`
đã sử dụng trước đây, là một chú thích dành riêng cho JPA.

- `org.springframework.data.annotation.Id`: Đây khác với `javax.persistence.Id` đã sử dụng trước đây,
cũng là một chú thích dành riêng cho JPA. Chúng ta đã xác định cột tương ứng trong cơ sở dữ liệu là
ID INTEGER AUTO_INCREMENT PRIMARY KEY, vì vậy cơ sở dữ liệu sẽ tự động tạo ra các giá trị tự tăng.

- `org.springframework.data.relational.core.mapping.Column`: Đây khác với `javax.persistence.Column`
đã sử dụng trước đây, cũng là một chú thích dành riêng cho JPA. Đối với tên cột, Spring Data JDBC sẽ
chuyển đổi kiểu camel case được sử dụng cho định nghĩa các trường lớp thành kiểu snake case
được sử dụng cho định nghĩa cột trong bảng.

Listing 15.4 The User class
Path: Ch15/spring-data-jdbc/src/main/java/com/manning/javapersistence/ch15
/model/User.java

// Đánh dấu lớp User bằng chú thích @Table, chỉ định rõ rằng bảng tương ứng là USERS.
@Table("USERS")
public class User {

    // Đánh dấu trường id bằng chú thích @Id.
    @Id
    // Đánh dấu trường id bằng chú thích @Column("ID"), xác định cột tương ứng trong cơ sở dữ liệu.
    // Đây là giá trị mặc định.
    @Column("ID")
    private Long id;

    // Đánh dấu trường username bằng chú thích @Column("USERNAME"),
    // xác định cột tương ứng trong cơ sở dữ liệu. Đây là giá trị mặc định.
    @Column("USERNAME")
    private String username;

    // Đánh dấu trường registrationDate bằng chú thích @Column("REGISTRATION_DATE"),
    xác định cột tương ứng trong cơ sở dữ liệu. Đây cũng là giá trị mặc định.
    @Column("REGISTRATION_DATE")
    private LocalDate registrationDate;

    //constructors, getters and setters
}

Chúng ta cũng sẽ tạo interface UserRepository, mà mở rộng từ CrudRepository
và do đó cung cấp quyền truy cập đến cơ sở dữ liệu.

Listing 15.5 The UserRepository interface
Path: Ch15/spring-data-jdbc/src/main/java/com/manning/javapersistence/ch15
/repositories/UserRepository.java

Listing 15.5 The UserRepository interface
Path: Ch15/spring-data-jdbc/src/main/java/com/manning/javapersistence/ch15
➥ /repositories/UserRepository.java

@Repository
public interface UserRepository extends CrudRepository<User, Long> {
    List<User> findAll();
}

Interface UserRepository mở rộng từ CrudRepository<User, Long>. Điều này có nghĩa rằng đó là một repository
của các thực thể User, và mỗi thực thể có một trường kiểu Long làm khóa chính (identifier).
Hãy nhớ rằng lớp User có một trường id được đánh dấu với @Id kiểu Long. Chúng ta có thể gọi trực tiếp
các phương thức như save, findAll hoặc findById, kế thừa từ CrudRepository, và chúng ta có thể sử dụng chúng mà
không cần thông tin bổ sung nào khác để thực hiện các thao tác thông thường với cơ sở dữ liệu.
Spring Data JDBC sẽ tạo một lớp proxy implementation UserRepository interface và thực hiện các
phương thức của nó.

Có thể đáng lưu ý rằng CrudRepository là một giao diện trừu tượng không phụ thuộc vào công nghệ,
và chúng ta có thể sử dụng nó không chỉ cho JPA/cơ sở dữ liệu quan hệ mà còn cho cơ sở dữ liệu NoSQL.
Ví dụ, chúng ta có thể dễ dàng thay đổi cơ sở dữ liệu từ MySQL sang MongoDB mà không cần thay đổi dependency
bằng cách thay đổi phụ thuộc từ spring-boot-starter-data-jpa ban đầu sang spring-boot-starter-data-mongodb.

Chúng ta chỉ ghi đè phương thức findAll để nó trả về List<User> thay vì Iterable<User>. Điều này sẽ đơn giản
hóa việc kiểm thử trong tương lai. Là lớp cơ sở cho tất cả các bài kiểm thử trong tương lai, chúng ta sẽ
viết class abstract SpringDataJdbcApplicationTests.

Chú thích @SpringBootTest, được thêm vào bởi Spring Boot vào lớp được khởi tạo ban đầu, sẽ thông báo cho
Spring Boot tìm main configuration class (lớp được chú thích bằng @SpringBootApplication, ví dụ) và tạo
ApplicationContext để sử dụng trong kiểm thử. Như bạn đã nhớ, chú thích @SpringBootApplication, được thêm
vào bởi Spring Boot vào lớp chứa main method, sẽ bật cơ chế tự động cấu hình của Spring Boot, cho phép quét
các gói trong ứng dụng và cho phép đăng ký các bean bổ sung trong ngữ cảnh.

Sử dụng chú thích @TestInstance(TestInstance.Lifecycle.PER_CLASS), chúng ta sẽ yêu cầu JUnit 5 tạo một
phiên bản duy nhất của lớp kiểm thử và sử dụng nó lại cho tất cả các phương thức kiểm thử.
Điều này cho phép chúng ta thực hiện các phương thức được đánh dấu @BeforeAll và @AfterAll (non-static)
và sử dụng trực tiếp trong chúng trường UserRepository được autowired. Phương thức được đánh dấu @BeforeAll
non-static được thực thi một lần trước tất cả các kiểm thử từ bất kỳ lớp nào mở rộng từ SpringDataJdbcApplicationTests,
và nó lưu danh sách user được tạo trong phương thức generateUsers vào cơ sở dữ liệu. Phương thức non-static
được đánh dấu @AfterAll được thực thi một lần sau tất cả các kiểm thử từ bất kỳ lớp nào mở rộng từ
SpringDataJdbcApplicationTests, và nó xóa tất cả người dùng khỏi cơ sở dữ liệu.


@SpringBootTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
abstract class SpringDataJdbcApplicationTests {

	@Autowired
	UserRepository userRepository;      [A]

	@BeforeAll
	void beforeAll() {
		userRepository.saveAll(generateUsers());
	}

	private static List<User> generateUsers() {
		List<User> users = new ArrayList<>();

		User john = new User("john", LocalDate.of(2020, Month.APRIL, 13));
		User mike = new User("mike", LocalDate.of(2020, Month.JANUARY, 18));
		User james = new User("james", LocalDate.of(2020, Month.MARCH, 11));
		User katie = new User("katie", LocalDate.of(2021, Month.JANUARY, 5));
		User beth = new User("beth", LocalDate.of(2020, Month.AUGUST, 3));
		User julius = new User("julius", LocalDate.of(2021, Month.FEBRUARY, 9));
		User darren = new User("darren", LocalDate.of(2020, Month.DECEMBER, 11));
		User marion = new User("marion", LocalDate.of(2020, Month.SEPTEMBER, 23));
		User stephanie = new User("stephanie", LocalDate.of(2020, Month.JANUARY, 18));
		User burk = new User("burk", LocalDate.of(2020, Month.NOVEMBER, 28));
		users.add(john);
		users.add(mike);
		users.add(james);
		users.add(katie);
		users.add(beth);
		users.add(julius);
		users.add(darren);
		users.add(marion);
		users.add(stephanie);
		users.add(burk);

		return users;
	}

	@AfterAll
	void afterAll() {
		userRepository.deleteAll();
	}

}


[A] Autowired (tự động kết nối) một thể hiện UserRepository. Điều này là có thể nhờ vào chú thích
@SpringBootApplication, cho phép scan trong package mà ứng dụng nằm và đăng ký các bean trong ngữ cảnh.

Các bài kiểm thử tiếp theo sẽ mở rộng từ lớp này và sử dụng cơ sở dữ liệu đã được điền dữ liệu.
Để kiểm tra các phương thức mà hiện tại thuộc về UserRepository, chúng ta sẽ tạo lớp FindUsersUsing-QueriesTest
và tuân theo cùng một cách để viết các bài kiểm thử:
chúng ta sẽ gọi phương thức của repository và xác minh kết quả của nó.

Listing 15.7 The FindUsersUsingQueriesTest class
Path: Ch15/spring-data-jdbc/src/test/java/com/manning/javapersistence/ch15
➥ /FindUsersUsingQueriesTest.java

public class FindUsersUsingQueriesTest extends SpringDataJdbcApplicationTests{

    @Test
    void testFindAll() {
        List<User> users = userRepository.findAll();
        assertEquals(10, users.size());
    }
}
