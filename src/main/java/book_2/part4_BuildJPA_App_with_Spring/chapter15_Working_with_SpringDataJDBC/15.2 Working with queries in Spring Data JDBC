Bây giờ, chúng ta sẽ tìm hiểu về việc làm việc với các truy vấn trong Spring Data JDBC.
Chúng ta sẽ bắt đầu bằng việc xác định các truy vấn bằng cơ chế xây dựng truy vấn
(query builder mechanism), và sau đó chuyển sang việc giới hạn kết quả truy vấn,
sắp xếp-sorting và phân trang-paging kết quả truy vấn, xử lý kết quả theo dòng,
sử dụng các truy vấn sửa đổi, và tạo truy vấn tùy chỉnh.

15.2.1 Defining query methods with Spring Data JDBC

Chúng ta sẽ mở rộng lớp User bằng cách thêm các trường email, level và active.
Một user có thể có các level khác nhau, cho phép họ thực hiện các hành động cụ thể,
chẳng hạn như đặt giá trên một số mức cụ thể. user có thể hoạt động hoặc đã
nghỉ hưu (nghĩa là họ không còn hoạt động trong hệ thống đấu giá CaveatEmptor nữa).

Mục tiêu của chúng ta là viết một chương trình có thể giải quyết các trường hợp
sử dụng liên quan đến việc tìm kiếm user với một số level cụ thể, user
đang hoạt động hoặc không, user với username hoặc email cụ thể, hoặc user
có ngày đăng ký trong khoảng thời gian cụ thể.

Listing 15.8 The modified User class
Path: Ch15/spring-data-jdbc2/src/main/java/com/manning/javapersistence/ch15
➥ /model/User.java

@Table("USERS")
public class User {

    @Id
    private Long id;

    private String username;

    private LocalDate registrationDate;

    private String email;

    private int level;

    private boolean active;

}

Vì chúng ta hiện đang chịu trách nhiệm về các lệnh DDL cần được thực thi,
nên chúng ta có thể sửa nội dung của tệp schema.sql trên classpath.

Listing 15.9 The modified schema.sql file
Path: Ch15/spring-data-jdbc2/src/main/resources/schema.sql

DROP TABLE IF EXISTS USERS;

CREATE TABLE USERS (
    ID INTEGER AUTO_INCREMENT PRIMARY KEY,
    ACTIVE BOOLEAN,
    USERNAME VARCHAR(30),
    EMAIL VARCHAR(30),
    LEVEL INTEGER,
    REGISTRATION_DATE DATE
);

Bây giờ chúng ta sẽ thêm các phương thức mới vào interface UserRepository để truy vấn cơ sở dữ liệu,
và chúng ta sẽ sử dụng chúng trong các bài kiểm thử mới được tạo.

Listing 15.10 The UserRepository interface with new methods
Path: Ch15/spring-data-jdbc2/src/main/java/com/manning/javapersistence/ch15
➥ /repositories/UserRepository.java

public interface UserRepository extends CrudRepository<User, Long> {
    List<User> findAll();
    Optional<User> findByUsername(String username);
    List<User> findAllByOrderByUsernameAsc();
    List<User> findByRegistrationDateBetween(LocalDate start,
    ➥ LocalDate end);
    List<User> findByUsernameAndEmail(String username, String email);
    List<User> findByUsernameOrEmail(String username, String email);
    List<User> findByUsernameIgnoreCase(String username);
    List<User> findByLevelOrderByUsernameDesc(int level);
    List<User> findByLevelGreaterThanEqual(int level);
    List<User> findByUsernameContaining(String text);
    List<User> findByUsernameLike(String text);
    List<User> findByUsernameStartingWith(String start);
    List<User> findByUsernameEndingWith(String end);
    List<User> findByActive(boolean active);
    List<User> findByRegistrationDateIn(Collection<LocalDate> dates);
    List<User> findByRegistrationDateNotIn(Collection<LocalDate> dates);
    // . . .
}

Mục đích của các phương thức truy vấn là để lấy thông tin từ cơ sở dữ liệu. Bắt đầu từ phiên bản 2.0,
Spring Data JDBC cung cấp một cơ chế xây dựng truy vấn tương tự như Spring Data JPA - nó tạo ra hành
vi của các phương thức của repository dựa trên tên của chúng. Hãy nhớ rằng cơ chế truy vấn loại bỏ các
tiền tố và hậu tố như find...By, get...By, query...By, read...By và count...By khỏi tên của phương
thức và sau đó phân tích phần còn lại của nó.

Giống như Spring Data JPA, Spring Data JDBC sẽ xem xét kiểu trả về của phương thức. Nếu chúng ta muốn
tìm một User và trả về nó trong một container Optional, kiểu trả về của phương thức sẽ là Optional<User>.

Các tên của các phương thức cần tuân theo quy tắc để xác định truy vấn kết quả. Các phương thức
truy vấn đã được định nghĩa hiện chỉ có thể sử dụng các thuộc tính có thể được bao gồm trong điều kiện
WHERE, nhưng không có join. Nếu việc đặt tên phương thức sai (ví dụ: thuộc tính thực thể không phù hợp
trong phương thức truy vấn), chúng ta sẽ nhận được một lỗi khi ngữ cảnh ứng dụng được tải.
Bảng 15.1 tổng hợp việc sử dụng các từ khóa cơ bản trong việc xây dựng các phương thức truy vấn Spring Data JDBC
và các điều kiện kết quả. Để biết danh sách chi tiết hơn, xem phần appendix C.

Keyword          Example                                    Condition
Is, Equals       findByUsername(String name)                username = name
                 findByUsernameIs(String name)
                 findByUsernameEquals(String name)

And              findByUsernameAndRegistrationDate          username = name and
                 (String name, LocalDate date)              registration_date = date

Or               findByUsernameOrRegistrationDate           username = name or
                 (String name, LocalDate date)              registrationdatev= name

LessThan         findByRegistrationDateLessThan             registrationdate < date
                 (LocalDate date)

LessThanEqual    findByRegistrationDateLessThanEqual        registrationdate <= date
                 (LocalDate date)

GreaterThan      findByRegistrationDateGreaterThan          registrationdate > date
                 (LocalDate date)

GreaterThanEqual findByRegistrationDateGreaterThanEqual     registrationdate >= date
                 (LocalDatevdate)

Between          findByRegistrationDateBetween              registrationdate between
                 (LocalDate from, LocalDate to)             from and to

OrderBy          findByRegistrationDateOrderByUsernameDesc  registrationdate = date
                 (LocalDate date)                           order by username desc

Like             findByUsernameLike(String name)            username like name

NotLike          findByUsernameNotLike(String name)         username not like name

Before           findByRegistrationDateBefore               registrationdate < date
                 (LocalDate date)

After            findByRegistrationDateAfter                registrationdate > date
                 (LocalDate date)

Null, IsNull     findByRegistrationDate(Is)Null()           registrationdate is null

NotNull,         findByRegistrationDate(Is)NotNull()        registrationdate is not
IsNotNull                                                   null

Not              findByUsernameNot(String name)             username <> name


Chúng ta sẽ mở rộng lớp trừu tượng SpringDataJdbcApplicationTests, lớp cơ sở cho các bài kiểm thử của
chúng ta, bằng cách cấu hình các trường mới được giới thiệu email, level và active cho mỗi user.

Listing 15.11 The updated SpringDataJdbcApplicationTests abstract class
Path: Ch15/spring-data-jdbc2/src/test/java/com/manning/javapersistence/ch15
➥ /SpringDataJdbcApplicationTests.java

@SpringBootTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
abstract class SpringDataJdbcApplicationTests {
    // . . .
    private static List<User> generateUsers() {

        List<User> users = new ArrayList<>();

        User john = new User("john", LocalDate.of(2020, Month.APRIL, 13));
        john.setEmail("john@somedomain.com");
        john.setLevel(1);
        john.setActive(true);

        //create and set a total of 10 users

        users.add(john);
        //add a total of 10 users to the list
        return users;
    }
    // . . .
}

Các bài kiểm thử tiếp theo mở rộng từ lớp này và sử dụng cơ sở dữ liệu đã được điền dữ liệu.
Trường hợp sử dụng chúng tôi muốn giải quyết là lấy một user hoặc danh sách user thỏa mãn một điều kiện
cụ thể (như active trong khoảng thời gian cụ thể) hoặc được sắp xếp theo username. Để kiểm thử
các phương thức mà hiện thuộc về UserRepository, chúng tôi sẽ tạo lớp FindUsersUsingQueriesTest
và tuân theo cùng một cách để viết các bài kiểm thử:
gọi phương thức của repository và xác minh kết quả của nó.


Listing 15.12 The FindUsersUsingQueriesTest class
Path: Ch15/spring-data-jdbc2/src/test/java/com/manning/javapersistence/ch15
➥ /FindUsersUsingQueriesTest.java


public class FindUsersUsingQueriesTest extends SpringDataJdbc2ApplicationTests {

    @Test
    void testFindAll() {
        List<User> users = userRepository.findAll();
        assertEquals(10, users.size());
    }

    @Test
    void testFindUser() {
        User beth = userRepository.findByUsername("beth").get();
        assertEquals("beth", beth.getUsername());
    }

    @Test
    void testFindAllByOrderByUsernameAsc() {
        List<User> users = userRepository.findAllByOrderByUsernameAsc();
        assertAll(
                () -> assertEquals(10, users.size()),
                () -> assertEquals("beth", users.get(0).getUsername()),
                () -> assertEquals("stephanie", users.get(users.size() - 1).getUsername())
        );
    }

    @Test
    void testFindByRegistrationDateBetween() {
        List<User> users =
                userRepository.findByRegistrationDateBetween(
                        LocalDate.of(2020, Month.JANUARY, 1),
                        LocalDate.of(2020, Month.DECEMBER, 31)
                );

        assertEquals(8, users.size());
    }

    @Test
    void testFindByUsernameEmail() {
        List<User> usersList1 = userRepository.findByUsernameAndEmail("mike", "mike@somedomain.com");
        List<User> usersList2 = userRepository.findByUsernameOrEmail("mike", "beth@somedomain.com");
        List<User> usersList3 = userRepository.findByUsernameAndEmail("mike", "beth@somedomain.com");
        List<User> usersList4 = userRepository.findByUsernameOrEmail("beth", "beth@somedomain.com");

        assertAll(
                () -> assertEquals(1, usersList1.size()),
                () -> assertEquals(2, usersList2.size()),
                () -> assertEquals(0, usersList3.size()),
                () -> assertEquals(1, usersList4.size())
        );
    }

    // ...
}


15.2.2 Limiting query results, sorting, and paging

Như trong Spring Data JPA, các từ khóa "first" và "top" (sử dụng tương đương) có thể giới hạn kết quả
của các phương thức truy vấn. Các từ khóa "top" và "first" có thể được theo sau bởi một giá trị số
tùy chọn để chỉ định kích thước tối đa của kết quả cần trả về. Nếu giá trị số học này không có,
kích thước kết quả sẽ là 1.

Pageable là một interface cho thông tin phân trang. Trong thực tế, chúng ta sử dụng lớp
PageRequest để triển khai giao diện này. Lớp này có thể xác định số trang, kích thước trang và
tiêu chí sắp xếp.

Các trường hợp sử dụng mà chúng ta muốn giải quyết ở đây là lấy một số user hạn chế 
(ví dụ: user đầu tiên theo username hoặc theo registration_date) hoặc lấy các user 
đầu tiên với một cấp độ cụ thể, được sắp xếp theo registration_date, hoặc một số lượng
lớn user chia thành các trang, để chúng ta có thể dễ dàng thao tác với họ.

Chúng tôi sẽ thêm các phương thức sau vào giao diện UserRepository.

Optional<User> findFirstByOrderByUsernameAsc();
Optional<User> findTopByOrderByRegistrationDateDesc();
Page<User> findAll(Pageable pageable);
List<User> findFirst2ByLevel(int level, Sort sort);
List<User> findByLevel(int level, Sort sort);
List<User> findByActive(boolean active, Pageable pageable);

Các phương thức này tuân theo mẫu được yêu cầu bởi cơ chế trình tạo truy vấn (tóm tắt trong bảng 15.1),
nhưng lần này mục đích của chúng là giới hạn kết quả của truy vấn, để chúng ta có thể thực hiện sắp xếp
và phân trang. Ví dụ, phương thức Optional<User> findFirstByUsernameAsc() sẽ lấy user đầu tiên
theo username (kết quả là một Optional, vì cuối cùng có thể không tồn tại).
Phương thức Page<User> findAll(Pageable pageable) sẽ lấy tất cả user nhưng theo từng trang.
Chúng tôi sẽ viết các bài test sau để xác minh cách hoạt động của những phương thức mới được thêm vào.

Listing 15.14 Testing limiting query results, sorting, and paging
Path: Ch15/spring-data-jdbc2/src/test/java/com/manning/javapersistence/ch15
➥ /FindUsersSortingAndPagingTest.java

@Test
    void testOrder() {
        User user1 = userRepository.findFirstByOrderByUsernameAsc().get();
        User user2 =
                userRepository.findTopByOrderByRegistrationDateDesc().get();
        Page<User> userPage = userRepository.findAll(PageRequest.of(1, 3));
        List<User> users = userRepository.findFirst2ByLevel(2, Sort.by("registrationDate"));

        assertAll(
                () -> assertEquals("beth", user1.getUsername()),
                () -> assertEquals("julius", user2.getUsername()),
                () -> assertEquals(2, users.size()),
                () -> assertEquals(3, userPage.getSize()),
                () -> assertEquals("beth", users.get(0).getUsername())
        );
    }

Bài kiểm thử đầu tiên tìm user đầu tiên theo thứ tự tăng dần của username
và user đầu tiên theo thứ tự giảm dần của ngày đăng ký.

Tìm tất cả user, chia thành các trang, và trả về trang số 1 có kích thước 3
(số trang bắt đầu từ 0).

Tìm 2 user đầu tiên có level 2, được sắp xếp tăng dần theo ngày đăng ký.

@Test
    void testFindByLevel () {
        Sort.TypedSort<User> user = Sort.sort(User.class);

        List<User> users = userRepository
                .findByLevel(3,
                        user.by(User::getRegistrationDate)
                                .descending()
                );
        assertAll(
                () -> assertEquals(2, users.size()),
                () -> assertEquals("james", users.get(0).getUsername())
        );
    }

Bài test thứ hai xác định một tiêu chí sắp xếp trên lớp User. `Sort.TypedSort` mở rộng từ `Sort`
và có thể sử dụng method handles để xác định các thuộc tính để sắp xếp theo.
Tìm các người dùng có level 3 và sắp xếp theo ngày đăng ký, giảm dần-descending.


15.2.3 Streaming results

Các phương pháp truy vấn trả về nhiều kết quả có thể sử dụng các giao diện Java tiêu chuẩn như
Iterable, List và Set. Giống như Spring Data JPA, Spring Data JDBC hỗ trợ `Streamable`, có thể
được sử dụng như một tùy chọn thay thế cho Iterable hoặc bất kỳ loại tập hợp nào.
Nó cho phép chúng ta kết hợp các đối tượng Streamable và thực hiện trực tiếp việc filter và
map trên các phần tử.

Trường hợp sử dụng mà chúng tôi sẽ giải quyết ở đây là lấy kết quả dưới dạng một dòng dữ liệu (stream),
mà không cần phải chờ cho toàn bộ tập hợp user hoặc một trang user.
Như vậy, chúng ta có thể nhanh chóng bắt đầu xử lý các kết quả đầu tiên khi chúng đến. Khác với
các tập hợp, một dòng dữ liệu chỉ có thể được tiêu thụ một lần và không thay đổi.

Chúng tôi sẽ thêm các phương thức sau vào giao diện UserRepository.

Listing 15.15 Adding methods that return Streamable in UserRepository
Path: Ch15/spring-data-jdbc2/src/main/java/com/manning/javapersistence/ch15
➥ /repositories/UserRepository.java

Streamable<User> findByEmailContaining(String text);
Streamable<User> findByLevel(int level);

Chúng ta sẽ viết các bài test sau để xác minh cách các phương thức mới được thêm vào tương tác
với cơ sở dữ liệu và cung cấp kết quả dưới dạng dòng dữ liệu (stream). Một dòng dữ liệu được cung cấp
như một resource trong khối try, vì vậy nó sẽ tự động đóng khi hoàn tất. Một cách khác là gọi một
cách tường minh phương thức close(). Nếu không, dòng dữ liệu sẽ giữ kết nối cơ sở dữ liệu gốc
không được đóng lại.

Listing 15.16 Testing methods that return Streamable
Path: Ch15/spring-data-jdbc2/src/test/java/com/manning/javapersistence/ch15
➥ /QueryResultsTest.java

@Test
void testStreamable() {
    try(Stream<User> result =
        userRepository.findByEmailContaining("someother")
            .and(userRepository.findByLevel(2))
            .stream().distinct()) {
        assertEquals(6, result.count());
    }
}

Bài kiểm thử sẽ gọi phương thức findByEmailContaining để tìm kiếm các email chứa từ khóa "someother".
Bài kiểm thử sẽ nối dòng dữ liệu kết quả với dòng dữ liệu cung cấp user level 2.

Sau đó, nó sẽ chuyển đổi dòng dữ liệu này thành một dòng dữ liệu (stream) và giữ lại các người dùng duy nhất.

kiểm thử xem dòng dữ liệu kết quả có chứa 6 người dùng hay không.

15.2.4 The @Query annotation

Chúng ta có thể sử dụng chú thích @Query để tạo các phương thức mà cho phép chỉ định một
câu truy vấn tùy chỉnh. Với chú thích @Query, tên của phương thức không cần phải tuân theo
bất kỳ quy tắc đặt tên nào. Câu truy vấn tùy chỉnh có thể được tham số hóa, nhưng khác với
Spring Data JPA, các tham số chỉ có thể được xác định bằng tên và chúng phải được liên kết
trong câu truy vấn bằng chú thích @Param. Không giống với Spring Data JPA, chúng ta
không sử dụng JPQL mà sử dụng SQL. Do đó, không có tính di động - nếu bạn thay đổi nhà cung cấp
cơ sở dữ liệu, bạn sẽ phải viết lại các câu truy vấn.

Listing 15.17 Methods annotated with @Query in the UserRepository interface
Path: Ch15/spring-data-jdbc2/src/main/java/com/manning/javapersistence/ch15
➥ /repositories/UserRepository.java

@Query("SELECT COUNT(*) FROM USERS WHERE ACTIVE = :ACTIVE")
int findNumberOfUsersByActivity(@Param("ACTIVE") boolean active);

@Query("SELECT * FROM USERS WHERE LEVEL = :LEVEL AND ACTIVE = :ACTIVE")
List<User> findByLevelAndActive(@Param("LEVEL") int level, @Param("ACTIVE")
boolean active);

Phương thức findNumberOfUsersByActivity sẽ trả về số lượng người dùng hoạt động.

Phương thức findByLevelAndActive sẽ trả về các người dùng với cấp độ và trạng thái hoạt
động được chỉ định dưới dạng tham số tên.

Chú thích @Param sẽ khớp tham số :LEVEL của câu truy vấn với đối số level của phương thức
và tham số :ACTIVE của câu truy vấn với đối số active của phương thức.

Viết bài test cho các phương thức truy vấn này khá đơn giản và tương tự như các ví dụ trước đó.
Chúng có thể được tìm thấy trong mã nguồn của cuốn sách.

@Test
    void testNumberOfUserByActivity() {
        int active = userRepository.findNumberOfUsersByActivity(true);
        int inactive = userRepository.findNumberOfUsersByActivity(false);

        Assertions.assertAll(
                () -> Assertions.assertEquals(8, active),
                () -> Assertions.assertEquals(2, inactive)
        );
    }

    @Test
    void testUserByLevelAndActivity() {
        List<User> userList1 = userRepository.findByLevelAndActive(1, true);
        List<User> userList2 = userRepository.findByLevelAndActive(2, true);
        List<User> userList3 = userRepository.findByLevelAndActive(2, false);

        Assertions.assertAll(
                () -> Assertions.assertEquals(2, userList1.size()),
                () -> Assertions.assertEquals(2, userList2.size()),
                () -> Assertions.assertEquals(1, userList3.size())
        );
    }

15.2.5 Modifying queries

Chúng ta có thể định nghĩa các phương thức sửa đổi dữ liệu bằng chú thích @Modifying.
Ví dụ, các truy vấn INSERT, UPDATE và DELETE và các câu lệnh DDL (Data Definition Language)
sẽ thay đổi nội dung của cơ sở dữ liệu.
Chú thích @Query có thể chứa một truy vấn sửa đổi và có thể cần ràng buộc tham số.
Tính đến thời điểm viết, Spring Data JDBC không hỗ trợ việc tạo truy vấn tự động
cho các phương thức xóa (không giống với Spring Data JPA).

Chúng tôi sẽ thêm các phương thức mới, được gán chú thích @Query, vào giao diện UserRepository,
nhưng lần này các truy vấn sẽ cập nhật hoặc xóa bản ghi từ bảng USERS.

Listing 15.18 Adding modifying methods to the UserRepository interface
Path: Ch15/spring-data-jdbc2/src/main/java/com/manning/javapersistence/ch15
➥ /repositories/UserRepository.java

@Modifying
@Query("UPDATE USERS SET LEVEL = :NEW_LEVEL WHERE LEVEL = :OLD_LEVEL")
int updateLevel(@Param("OLD_LEVEL") int oldLevel,@Param("NEW_LEVEL")int newLevel);

@Modifying
@Query("DELETE FROM USERS WHERE LEVEL = :LEVEL")
int deleteByLevel(@Param("LEVEL") int level);

Phương thức updateLevel sẽ thay đổi cấp độ của các người dùng
có cấp độ cũ (oldLevel) và đặt nó thành cấp độ mới (newLevel).
Phương thức cũng được chú thích bằng @Modifying.

Phương thức deleteByLevel sẽ xóa tất cả người dùng có cấp độ được
chỉ định làm tham số, như đối số của chú thích @Query.
Phương thức cũng được chú thích bằng @Modifying.





