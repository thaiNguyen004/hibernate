Chúng ta sẽ tiếp tục và hướng dẫn cách implementation giao dịch với Spring và Spring Data.
Mô hình giao dịch được sử dụng bởi Spring có thể áp dụng cho các API khác nhau như
Hibernate, JPA và Spring Data JPA. Quản lý các giao dịch có thể được thực hiện theo
cách lập trình (như đã được giới thiệu) hoặc bằng cách khai báo, với sự hỗ trợ của
các chú thích (đó là những gì chúng ta chủ yếu sử dụng cho phần này của chương).

Abstraction transaction quan trọng trong Spring được định nghĩa bởi interface
org.springframework.transaction.PlatformTransactionManager.

public interface PlatformTransactionManager extends TransactionManager {
    TransactionStatus getTransaction(
        ➥ @Nullable TransactionDefinition definition)
                                    throws TransactionException;

    void commit(TransactionStatus status) throws TransactionException;

    void rollback(TransactionStatus status) throws TransactionException;

}

Thường thì, interface này không được sử dụng trực tiếp. Thay vào đó, bạn sẽ đánh dấu các giao dịch
theo cách khai báo, thông qua các annotations, hoặc cuối cùng bạn có thể sử dụng TransactionTemplate
để định nghĩa giao dịch theo cách lập trình.

Spring sử dụng các mức độ cách ly ANSI đã được thảo luận trước đó. Để làm mới kiến thức, hãy xem lại
phần 11.2.1 và đặc biệt là bảng 11.1, mà tóm tắt các mức độ cách ly và các vấn đề mà chúng giải quyết.


11.4.1 Transaction propagation - Lan truyền transaction

Spring xử lý vấn đề liên quan đến việc truyền tải giao dịch (transaction propagation).
Để tóm gọn, nếu `method-A` là một phương thức có giao dịch và nó gọi `method-B`, thì `method-B` sẽ hoạt động
ra sao từ góc độ giao dịch? Hãy xem vào hình 11.5:

1. `bean-1` chứa `method-A`, một phương thức có giao dịch, được thực thi trong giao dịch `TX1`.
2. `method-A` gọi `bean-2.method-B()`, cũng là một phương thức có giao dịch.

`method-B` sẽ được thực thi trong giao dịch nào sẽ phụ thuộc vào cách propagation (truyền tải giao dịch)
được định nghĩa. Spring định nghĩa danh sách các propagation có thể thông qua enum
`org.springframework.transaction.annotation.Propagation`:

- `REQUIRED`: Nếu đã có một giao dịch đang diễn ra, thực thi sẽ tiếp tục trong giao dịch đó.
Nếu không có giao dịch nào đang tồn tại, một giao dịch mới sẽ được tạo ra. `REQUIRED` là propagation
mặc định cho các giao dịch trong Spring.

- `SUPPORTS`: Nếu đã có một giao dịch đang diễn ra, thực thi sẽ tiếp tục trong giao dịch đó.
Nếu không có giao dịch nào, không có giao dịch nào sẽ được tạo ra.

- `MANDATORY`: Nếu đã có một giao dịch đang diễn ra, thực thi sẽ tiếp tục trong giao dịch đó.
Nếu không có giao dịch nào, một ngoại lệ `TransactionRequiredException` sẽ được ném ra.

- `REQUIRES_NEW`: Nếu đã có một giao dịch đang diễn ra, giao dịch hiện tại sẽ bị tạm ngưng và
một giao dịch mới sẽ được bắt đầu. Nếu không có giao dịch nào, một giao dịch mới sẽ được tạo ra bất kể.

- `NOT_SUPPORTED`: Nếu đã có một giao dịch đang diễn ra, giao dịch hiện tại sẽ bị tạm ngưng và
thực thi không có giao dịch. Nếu không có giao dịch nào, thực thi sẽ tiếp tục bình thường.

- `NEVER`: Nếu đã có một giao dịch đang diễn ra, một ngoại lệ `IllegalTransactionStateException`
sẽ được ném ra. Nếu không có giao dịch nào, thực thi sẽ tiếp tục bình thường.

- `NESTED`: Nếu đã có một giao dịch đang diễn ra, một giao dịch con sẽ được tạo ra và đồng thời
một điểm lưu (savepoint) sẽ được tạo. Nếu giao dịch con thất bại, thực thi sẽ quay trở lại điểm
lưu đó. Nếu ban đầu không có giao dịch nào đang tồn tại, một giao dịch mới sẽ được tạo ra.


Bảng 11.2 giải thích cách giao dịch trong phương thức gọi và phương thức được gọi ứng xử khi sử dụng
các mức truyền tải giao dịch khác nhau. Hãy giải thích cụ thể:

- REQUIRED: Nếu có một giao dịch T1 trong phương thức gọi, phương thức được gọi sẽ tiếp tục trong giao dịch T1.
Nếu không có giao dịch nào trong phương thức gọi, một giao dịch mới (T1) sẽ được tạo.

- SUPPORTS: Nếu có một giao dịch T1 trong phương thức gọi, phương thức được gọi sẽ tiếp tục trong giao dịch T1.
Nếu không có giao dịch nào trong phương thức gọi, phương thức được gọi không tạo giao dịch mới.

- MANDATORY: Nếu có một giao dịch T1 trong phương thức gọi, phương thức được gọi sẽ tiếp tục trong giao dịch T1.
Nếu không có giao dịch nào trong phương thức gọi, một ngoại lệ sẽ được ném ra.

- REQUIRES_NEW: Nếu có một giao dịch T1 trong phương thức gọi, giao dịch T1 sẽ tạm dừng và phương thức được gọi
sẽ tạo một giao dịch mới (T2). Nếu không có giao dịch nào trong phương thức gọi,
một giao dịch mới (T1) sẽ được tạo.

- NOT_SUPPORTED: Nếu có một giao dịch T1 trong phương thức gọi, giao dịch T1 sẽ bị tạm dừng và phương thức
được gọi sẽ không sử dụng giao dịch. Nếu không có giao dịch nào trong phương thức gọi,
phương thức được gọi không tạo giao dịch mới.

- NEVER: Nếu có một giao dịch T1 trong phương thức gọi, một ngoại lệ sẽ được ném ra. Nếu không có giao dịch nào
trong phương thức gọi, phương thức được gọi sẽ tiếp tục mà không tạo giao dịch mới.

- NESTED: Nếu có một giao dịch T1 trong phương thức gọi, giao dịch con T2 sẽ được tạo, và đồng thời một điểm lưu
(savepoint) cũng được tạo. Nếu giao dịch con T2 thất bại, thực thi sẽ quay trở lại điểm lưu đó.
Nếu ban đầu không có giao dịch nào trong phương thức gọi, một giao dịch mới T1 sẽ được tạo.


11.4.2 Transaction rollback

Giao dịch Spring định nghĩa các quy tắc mặc định cho việc rollback: một giao dịch sẽ bị rollback cho RuntimeException.
Hành vi này có thể được ghi đè và chúng ta có thể chỉ định những ngoại lệ nào tự động rollback giao dịch và những
ngoại lệ nào không. Điều này được thực hiện thông qua các thuộc tính của chú thích
@Transactional như rollbackFor, rollbackForClassName, noRollbackFor và noRollbackForClassName. Hành vi được xác định
bởi các thuộc tính này được tóm tắt trong bảng 11.3.

Property: rollbackFor
Type: Mảng các đối tượng lớp (Class) mở rộng từ Throwable
Behavior: Xác định các lớp ngoại lệ mà buộc phải gây ra việc hoàn trả (rollback).

Property: rollbackForClassName
Type: Mảng các tên lớp mở rộng từ Throwable
Behavior: Xác định tên lớp ngoại lệ phải gây ra rollback.

Property: noRollbackFor
Type: Mảng các đối tượng lớp (Class) mở rộng từ Throwable
Behavior: Xác định các lớp ngoại lệ mà không được gây ra việc hoàn trả (rollback).

Property: noRollbackForClassName
Type: Mảng các tên lớp mở rộng từ Throwable
Behavior: Xác định tên lớp ngoại lệ không được gây ra rollback.


11.4.3 Transaction properties

Chú thích @Transactional định nghĩa các thuộc tính trong bảng 11.4. Chúng ta sẽ xem xét ở đây về cách cách ly
và truyền tải đã được xem xét trước đó và về các thuộc tính khác.
Tất cả thông tin meta này sẽ được chuyển thành cấp độ thực thi thao tác giao dịch.

Property: isolation
Type: Isolation enum
Behavior: Công bố các mức cách ly theo tiêu chuẩn ANSI.

Property: propagation
Type: Propagation enum
Behavior: Cài đặt propagation theo các giá trị từ bảng 11.2.

Property: timeout
Type: int (seconds)
Behavior: Hết thời gian chờ sau đó giao dịch sẽ tự động rollback.

Property: readOnly
Type: boolean
Behavior: Declare nếu giao dịch là read-only hoặc read-write.
Giao dịch read-only cho phép tối ưu hóa để làm cho chúng nhanh hơn.

Chú thích @Transactional có thể được áp dụng cho các interfaces, cho các phương thức trong interface,
cho các lớp (classes), hoặc cho các phương thức trong lớp. Khi đã được áp dụng cho một interface hoặc một lớp,
chú thích này áp dụng cho tất cả các phương thức từ lớp hoặc interface đó. Bạn có thể thay đổi hành vi
bằng cách chú thích cách riêng lẻ cho các phương thức cụ thể. Ngoài ra, khi đã áp dụng chú thích cho một
interface hoặc một phương thức trong interface, chú thích này được kế thừa bởi các lớp thực hiện interface
đó hoặc bởi các phương thức tương ứng trong các lớp thực hiện interface đó. Hành vi có thể được ghi đè.
Do đó, để đạt được hành vi chi tiết, nên áp dụng chú thích @Transactional cho các phương thức trong các lớp.


11.4.4 Programmatic transaction definition - định nghĩa giao diện lập trình
Declarative transaction management thường là lựa chọn ưa thích khi sử dụng Spring trong một ứng dụng.
Nó đòi hỏi ít mã code hơn để viết và hành vi của giao dịch được xác định thông qua thông tin siêu
(meta-information) được cung cấp bằng các chú thích (annotations). Tuy nhiên, quản lý giao dịch theo
cách lập trình (programmatic transaction management) vẫn có thể thực hiện được, bằng cách sử dụng
lớp TransactionTemplate.
Khi một đối tượng TransactionTemplate được tạo, hành vi của giao dịch có thể được định nghĩa theo
cách lập trình, như sau:

TransactionTemplate transactionTemplate;
// . . .
transactionTemplate.setIsolationLevel(
    TransactionDefinition.ISOLATION_REPEATABLE_READ);
transactionTemplate.setPropagationBehavior(
    TransactionDefinition.PROPAGATION_REQUIRES_NEW);
transactionTemplate.setTimeout(5);
transactionTemplate.setReadOnly(false);

Một khi đã được xác định, một đối tượng TransactionTemplate hỗ trợ phương pháp callback thông qua phương thức
execute, mà nhận một TransactionCallback làm đối số, như trong đoạn mã sau.
Các hoạt động được thực hiện trong giao dịch được xác định trong phương thức doInTransaction.

transactionTemplate.execute(new TransactionCallback() {
    public Object doInTransaction(TransactionStatus status) {
        //operations to be executed in transaction
    }
});

Vì TransactionCallback là một giao diện chức năng (functional interface)
(nó thậm chí còn được ghi chú bằng @FunctionalInterface), đoạn mã trước
đó có thể được rút gọn như sau:
transactionTemplate.execute(status -> {
    // các hoạt động cần thực hiện trong giao dịch
});

11.4.5 Transactional development with Spring and Spring Data

Chúng tôi đã làm việc trên ứng dụng CaveatEmptor, và bây giờ chúng tôi sẽ thực hiện một tính năng ghi log kết quả
của các hành động khi làm việc với các Item. Chúng tôi sẽ bắt đầu việc implementation bằng Spring Data JPA,
và trước tiên, chúng tôi sẽ tạo interface ItemRepositoryCustom và các phương thức của nó, như được hiển thị
trong mã nguồn 11.8. Interface như vậy được gọi là một fragment interface, và mục đích của nó là extend một
repository với chức năng tùy chỉnh, chức năng này sẽ được cung cấp thông qua một implementation sau này.

Listing 11.8 The ItemRepositoryCustom interface

Path: Ch11/transactions5-springdata/src/main/java/com/manning
➥ /javapersistence/ch11/repositories/ItemRepositoryCustom.java

public interface ItemRepositoryCustom {
    void addItem(String name, LocalDate creationDate);
    void checkNameDuplicate(String name);
    void addLogs();
    void showLogs();
    void addItemNoRollback(String name, LocalDate creationDate);
}

Tiếp theo, chúng tôi sẽ tạo một giao diện ItemRepository, mở rộng cả JpaRepository và giao diện
ItemRepositoryCustom đã được khai báo trước đó. Ngoài ra, chúng tôi sẽ khai báo phương thức findByName,
tuân theo quy tắc đặt tên của Spring Data JPA.

Listing 11.9 The ItemRepository interface

Path: Ch11/transactions5-springdata/src/main/java/com/manning
➥ /javapersistence/ch11/repositories/ItemRepository.java

public interface ItemRepository extends JpaRepository<Item, Long>,
            ItemRepositoryCustom {

    Optional<Item> findByName(String name);

}

Sau đó, chúng tôi sẽ tạo giao diện LogRepositoryCustom và các phương thức của nó, như được hiển thị
trong mã nguồn 11.10. Một lần nữa, đây là một giao diện fragment, và mục đích của nó là mở rộng một
repository với chức năng tùy chỉnh, chức năng này sẽ được cung cấp thông qua một implementation sau này.

Path: Ch11/transactions5-springdata/src/main/java/com/manning
➥ /javapersistence/ch11/repositories/LogRepositoryCustom.java

public interface LogRepositoryCustom {
    void log(String message);
    void showLogs();
    void addSeparateLogsNotSupported();
    void addSeparateLogsSupports();
}

Bây giờ, chúng tôi sẽ tạo giao diện LogRepository,
extend cả JpaRepository và giao diện LogRepositoryCustom đã được khai báo trước đó.

Listing 11.11 The LogRepository interface

Path: Ch11/transactions5-springdata/src/main/java/com/manning
➥ /javapersistence/ch11/repositories/LogRepository.java

public interface LogRepository extends JpaRepository<Log, Integer>,
        LogRepositoryCustom
        {

}

Chúng tôi sẽ cung cấp một lớp implementation cho ItemRepository tiếp theo. Phần quan trọng của
tên lớp này là đuôi "Impl". Đây không liên quan đến Spring Data và chỉ implementation giao diện
ItemRepositoryCustom.

Khi chúng ta inject một bean ItemRepository, Spring Data sẽ tạo một lớp proxy; nó sẽ phát hiện rằng ItemRepository
implementation ItemRepositoryCustom và sẽ tìm một lớp có tên ItemRepositoryImpl để đóng vai trò là một
implementation repository tùy chỉnh. Do đó, các phương thức của bean ItemRepository được inject sẽ có cùng
hành vi như các phương thức của lớp ItemRepositoryImpl.

Listing 11.12 The ItemRepositoryImpl class

Path: Ch11/transactions5-springdata/src/main/java/com/manning
➥ /javapersistence/ch11/repositories/ItemRepositoryImpl.java

public class ItemRepositoryImpl implements ItemRepositoryCustom {

    @Autowired
    private ItemRepository itemRepository;      [A]

    @Autowired                                  [A]
    private LogRepository logRepository;

    @Override
    @Transactional(propagation = Propagation.MANDATORY)         [B]
    public void checkNameDuplicate(String name) {
        if (itemRepository.findAll().stream().map(item ->                           [C]
            item.getName()).filter(n -> n.equals(name)).count() > 0) {
                throw new DuplicateItemNameException("Item with name " + name +
                    " already exists");
        }
    }

    @Override
    @Transactional          [D]
    public void addItem(String name, LocalDate creationDate) {
        logRepository.log("adding item with name " + name);
        checkNameDuplicate(name);
        itemRepository.save(new Item(name, creationDate));
    }

    @Override
    @Transactional(noRollbackFor = DuplicateItemNameException.class)        [E]
    public void addItemNoRollback(String name, LocalDate creationDate) {
        logRepository.save(new Log(
            "adding log in method with no rollback for item " + name));
        checkNameDuplicate(name);
        itemRepository.save(new Item(name, creationDate));
    }

    @Override
    @Transactional          [D]
    public void addLogs() {
        logRepository.addSeparateLogsNotSupported();
    }

    @Override
    @Transactional      [D]
    public void showLogs() {
        logRepository.showLogs();
    }
}

[A] Tự động nạp (autowire) một bean ItemRepository và một bean LogRepository.

[B] Propagation MANDATORY: Spring Data sẽ kiểm tra xem một giao dịch đã đang tiến hành chưa và sẽ tiếp tục với nó.
Nếu không có giao dịch nào đang tiến hành, một ngoại lệ sẽ được ném ra.

[C] Nếu một Item có tên đã cho tồn tại, sẽ ném ra một ngoại lệ DuplicateItemNameException.

[D] Default propagation là REQUIRED.

[E] Không có rollback của giao dịch trong trường hợp xảy ra ngoại lệ DuplicateItemNameException.

Tiếp theo, chúng tôi sẽ cung cấp một lớp implementation cho LogRepository. Giống như ItemRepositoryImpl,
phần quan trọng của tên lớp này là đuôi "Impl". Nó chỉ implementation LogRepositoryCustom.
Khi chúng tôi inject một bean LogRepository, Spring Data sẽ phát hiện rằng LogRepository implementation
LogRepositoryCustom và sẽ tìm kiếm một lớp có tên LogRepositoryImpl để đóng vai trò là một implementation
repository tùy chỉnh. Do đó, các phương thức của bean LogRepository được inject sẽ có cùng hành vi như các
phương thức của lớp LogRepositoryImpl.


Listing 11.13 The LogRepositoryImpl class
Path: Ch11/transactions5-springdata/src/main/java/com/manning
➥ /javapersistence/ch11/repositories/LogRepositoryImpl.java

public class LogRepositoryImpl implements LogRepositoryCustom {

    @Autowired                                          [A]
    private LogRepository logRepository;

    @Override
    @Transactional(propagation = Propagation.REQUIRES_NEW)      [B]
    public void log(String message) {
        logRepository.save(new Log(message));           [C]
    }

    @Override
    @Transactional(propagation = Propagation.NOT_SUPPORTED)     [D]
    public void addSeparateLogsNotSupported() {
        logRepository.save(new Log("check from not supported 1"));
        if (true) throw new RuntimeException();
        logRepository.save(new Log("check from not supported 2"));
    }

    @Override
    @Transactional(propagation = Propagation.SUPPORTS)          [E]
    public void addSeparateLogsSupports() {
        logRepository.save(new Log("check from supports 1"));
        if (true) throw new RuntimeException();
        logRepository.save(new Log("check from supports 2"));
    }

    @Override
    @Transactional(propagation = Propagation.NEVER)             [F]
    public void showLogs() {
        System.out.println("Current log:");
        logRepository.findAll().forEach(System.out::println);
    }
}

[A] Tự động nạp (autowire) một bean `LogRepository`.

[B] Propagation REQUIRES_NEW: Spring Data sẽ thực hiện ghi log trong một giao dịch riêng biệt, hoàn toàn độc lập
với giao dịch cuối cùng của phương thức gọi `log`.

[C] Phương thức `log` sẽ lưu một message vào kho lưu trữ.

[D] Propagation NOT_SUPPORTED: Nếu có một giao dịch đang diễn ra, nó sẽ bị tạm dừng và thực thi không thuộc giao dịch
sẽ tiếp tục. Nếu không có giao dịch nào đang diễn ra, thực thi sẽ tiếp tục mà không sử dụng giao dịch.

[E] Propagation SUPPORTS: Nếu một giao dịch đang diễn ra, thực thi sẽ tiếp tục bên trong giao dịch đó. Nếu không có giao
dịch nào đang diễn ra, thì không có giao dịch nào sẽ được tạo ra.

[F] Propagation NEVER: Nếu một giao dịch đang diễn ra, sẽ ném ra một ngoại lệ IllegalTransactionStateException.
Nếu không có giao dịch nào đang diễn ra, thì thực thi sẽ tiếp tục mà không sử dụng giao dịch.

Chúng ta sẽ bắt đầu viết một loạt các bài kiểm tra (tests) để xác minh hành vi của các phương thức có giao dịch
mà chúng ta vừa mới viết.

Listing 11.14 The TransactionPropagationTest class

Path: Ch11/transactions5-springdata/src/test/java/com/manning
➥ /javapersistence/ch11/concurrency/TransactionPropagationTest.java

